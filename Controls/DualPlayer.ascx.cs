using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Xml.Linq;
using SwingModel.Data;
using SwingModel.Entities;
using System.Web.Script.Serialization;
using SwfDotNet.IO;
//using System.Web.Mail;
using System.Drawing;
using CompuSportDAL;
using System.Data.SqlClient;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Net.Security;

public partial class Controls_DualPlayer : System.Web.UI.UserControl
{
    public string wmpfile = "";
    public string wmpfile1 = "";
    public string wmpfile2 = "";
    public string waitwmpfile = "";
    public int movied;
    public int leftMovieId;
    public int rightMovieId;
    string lpath;
    string rpath;
    string p_id;
    string date;
    string _strBody;

    //    int customerId = 2;//TODO: after unit testing is finished, use the customer id from the logged in user.
    //int code1, code2, code3, code4;
    //string []arr=new string[5];

    string ConnectionString = ConfigurationManager.ConnectionStrings["ConnectionString"].ToString();

    DataSet ds = new DataSet();
    DataTable dt = new DataTable();
    Customer _LoggedInCustomer;
    Customer Customerid;
    Customer customer;
    SummaryMovie summarymovie;
    Lesson lesson;
    MovieClip movieclip;
    MovieClip movieclipid;
    public bool displaysummary;
    bool isComparison = false;
    CustomerProfile _child_id;
    Movie mv;
    private Movie leftMovie;
    private Movie rightMovie;
    bool AlreadyExists = false;
    int firstMovie;

    bool sprintAirTimeLtoRShortI = false;
    bool sprintAirTimeRtoLShortI = false;
    bool sprintAirTimeAverageI = false;
    bool sprintAirTimeLtoRandRtoLShortI = false;

    bool sprintAirTimeLtoRLongI = false;
    bool sprintAirTimeRtoLLongI = false;
    bool sprintAirTimeAverageLongI = false;
    bool sprintAirTimeLtoRandRtoLLongI = false;

    bool sprintStrideLengthLtoRShortI = false;
    bool sprintStrideLengthRtoLShortI = false;
    bool sprintStrideLengthAverageI = false;
    bool sprintStrideLengthLtoRandRtoLshortI = false;

    bool sprintStrideLengthLtoRLongI = false;
    bool sprintStrideLengthRtoLLongI = false;
    bool sprintStrideLengthAverageLongI = false;
    bool sprintStrideLengthLtoRandRtoLLongI = false;

    bool sprintAirTimeLtoRShortF = false;
    bool sprintAirTimeRtoLShortF = false;
    bool sprintAirTimeAverageF = false;
    bool sprintAirTimeLtoRandRtoLShortF = false;

    bool sprintAirTimeLtoRLongF = false;
    bool sprintAirTimeRtoLLongF = false;
    bool sprintAirTimeAverageLongF = false;
    bool sprintAirTimeLtoRandRtoLLongF = false;

    bool sprintStrideLengthLtoRShortF = false;
    bool sprintStrideLengthRtoLShortF = false;
    bool sprintStrideLengthAverageF = false;
    bool sprintStrideLengthLtoRandRtoLshortF = false;

    bool sprintStrideLengthLtoRLongF = false;
    bool sprintStrideLengthRtoLLongF = false;
    bool sprintStrideLengthAverageLongF = false;
    bool sprintStrideLengthLtoRandRtoLLongF = false;

    bool isLeftMovie = false;
    bool isRightMovie = false;
    CompuSportDAL.SprintAthleteEdit sae = new CompuSportDAL.SprintAthleteEdit();

    //protected void Page_PreRender(object sender, EventArgs e)
    //{
    //    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "FunctionForAllBtns", "FunctionForAllBtns(2);", true);
    //}

    protected void Page_Load(object sender, EventArgs e)
    {
        customer = DataRepository.CustomerProvider.GetByAspnetMembershipUserId(new Guid(Membership.GetUser().ProviderUserKey.ToString()))[0];
        Guid MemGuid = new Guid(customer.AspnetMembershipUserId.ToString());
        _child_id = DataRepository.CustomerProfileProvider.GetByCustomerId(customer.CustomerId)[0];
        MembershipUser user = Membership.GetUser(MemGuid);

        if (!IsPostBack)
        {
            LoadDefaultData();
            if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
            {
                GetAllSprintAthleteData(leftMovie.LessonId);
                SprintId.Visible = true;
                StartId.Visible = false;
                HurdleId.Visible = false;
                HurdleStepId.Visible = false;
                Label6.Text = "Maximum Sprint Velocity";
                SprintIntro.Visible = true;
                // System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeSprintHeight", "MakeSprintHeight();", true);
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "FunctionForAllBtns", "FunctionForAllBtns(2);", true);
                // SprintId.Attributes["style"] = string.Format("margin-top:1200px");
            }

            else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
            {
                GetAllSprintAthleteData(leftMovie.LessonId);
                HurdleStepId.Visible = true;
                SprintId.Visible = false;
                StartId.Visible = false;
                HurdleId.Visible = false;
                Label6.Text = "Maximum Hurdle Step Velocity";
                HurdleStepsIntro.Visible = true;
                //SprintIntro.Visible = true;
                // System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeSprintHeight", "MakeSprintHeight();", true);
                ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "FunctionForAllBtns", "FunctionForAllBtns(2);", true);
                // SprintId.Attributes["style"] = string.Format("margin-top:1200px");
            }
            else if (DropDownList2.SelectedItem.Text.Equals("Start"))
            {
                HurdleId.Visible = false;
                SprintId.Visible = false;
                StartId.Visible = true;
                HurdleStepId.Visible = false;
                GetAllStartAthleteData(leftMovie.LessonId);
                Label6.Text = "The Start";
                StartIntro.Visible = true;
                //  System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeStartHeight", "MakeStartHeight();", true);
                //   StartId.Attributes["style"] = string.Format("margin-top:1400px");
            }
            else
            {
                SprintId.Visible = false;
                StartId.Visible = false;
                HurdleId.Visible = true;
                HurdleStepId.Visible = false;
                GetAllHurdleAthleteData(leftMovie.LessonId);
                Label6.Text = "Maximum Hurdle Velocity";
                HurdleIntro.Visible = true;
                //System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeHurdleHeight", "MakeHurdleHeight();", true);
                System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "FunctionForAllBtns", "FunctionForAllBtns(1);", true);

            }
            int AthletesChildId = Convert.ToInt16(_child_id.InitialTeacher);
            int movieid = Convert.ToInt32(DropDownList1.SelectedItem.Value);

            leftMovie = DataRepository.MovieProvider.GetByMovieId(movieid);
            lesson = DataRepository.LessonProvider.GetByLessonId(leftMovie.LessonId);

            Label1.Text = customer.FirstName + " " + customer.LastName;
            HiddenField1.Value = Label1.Text;
            HiddenField5.Value = user.Email;

            VideoDisplay(leftMovie.FilePath, rightMovie.FilePath);
            WriteObjectsToPageAjax();
            waitwmpfile = "../Users/player.swf";
            Label3.Text = customer.FirstName + " " + customer.LastName;
            AthleteChildSendMail();
            btnreset.Style.Add("display", "none");
            // ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "anyOtherKey8", "FunctionForAllBtns(2);", true);
        }
		divSummaryVideo.Visible = false;
		
    }

    public void GetAllSprintAthleteData(int LessonId)
    {
        ds = sae.GetAllSprintAthletesData(LessonId);

        if (ds.Tables[0].Rows.Count > 0)
        {
            if (DropDownList1.SelectedValue != "")
            {
                try
                {
                    int movieid = Convert.ToInt32(DropDownList1.SelectedItem.Value);
                    leftMovie = DataRepository.MovieProvider.GetByMovieId(movieid);
                    string location = sae.SelectLessonlocation(LessonId.ToString());
                    string date = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
                    string LeftSession = date + "-" + location;
                    lblleftmovie.Text = LeftSession;
                }
                catch { }
            }
            lblGroundTimeLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Ground Time Left"].ToString());

            lblGroundTimeRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Ground Time Right"].ToString());

            lblGroundTimeAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Ground Time Average"].ToString());

            lblAirTimeLeftToRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Air Time Left to Right"].ToString());

            lblAirTimeRightToLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Air Time Right to Left"].ToString());
            lblAirTimeAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Air Time Average"].ToString());

            lblTimeToUpperLegFullFlexionLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Time to Upper Leg Full Flexion Left"].ToString());
            lblTimeToUpperLegFullFlexionRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Time to Upper Leg Full Flexion Right"].ToString());
            lblTimeToUpperLegFullFlexionAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Time to Upper Leg Full Flexion Average"].ToString());

            lblStrideRateI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Stride Rate"].ToString());

            lblStrideLengthLeftToRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Stride Length Left to Right"].ToString());
            lblStrideLengthRightToLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Stride Length Right to Left"].ToString());
            lblStrideLengthAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Stride Length Average"].ToString());

            lblVelocity.Text = Convert.ToString(ds.Tables[0].Rows[0]["Velocity"].ToString());

            lblTouchDownDistanceLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Touchdown Distance Left"].ToString());
            lblTouchDownDistanceRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Touchdown Distance Right"].ToString());
            lblTouchDownDistanceAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Touchdown Distance Average"].ToString());

            lblUpperLegFullExtentionAngleLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Extension Angle Left"].ToString());
            lblUpperLegFullExtentionAngleRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Extension Angle Right"].ToString());
            lblUpperLegFullExtentionAngleAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Extension Angle Average"].ToString());

            lblLowerLegAngleAtTakeOfLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Takeoff Left"].ToString());
            lblLowerLegAngleAtTakeOfRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Takeoff Right"].ToString());
            lblLowerLegAngleAtTakeOfAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Takeoff Average"].ToString());

            lblLowerLegFullFlexionAngleLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Full Flexion Angle Left"].ToString());
            lblLowerLegFullFlexionAngleRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Full Flexion Angle Right"].ToString());
            lblLowerLegFullFlexionAngleAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Full Flexion Angle Average"].ToString());

            lblLowerLegAngleAtAnkleCrossLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Ankle Cross Left"].ToString());
            lblLowerLegAngleAtAnkleCrossRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Ankle Cross Right"].ToString());
            lblLowerLegAngleAtAnkleCrossAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Ankle Cross Average"].ToString());

            lblUpperLegFullFlexionAngleLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Flexion Angle Left"].ToString());
            lblUpperLegFullFlexionAngleRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Flexion Angle Right"].ToString());
            lblUpperLegFullFlexionAngleAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Flexion Angle Average"].ToString());
        }

        //model data
        if (ds.Tables[1].Rows.Count > 0)
        {

            lblGroundTimeLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTime"].ToString());

            lblGroundTimeRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTime"].ToString());
            lblGroundTimeAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTime"].ToString());


            lblAirTimeLeftToRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["AirTime"].ToString());
            lblAirTimeRightToLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["AirTime"].ToString());
            lblAirTimeAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["AirTime"].ToString());


            lblTimeToUpperLegFullFlexionLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["FullFlexionTime"].ToString());
            lblTimeToUpperLegFullFlexionRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["FullFlexionTime"].ToString());
            lblTimeToUpperLegFullFlexionAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["FullFlexionTime"].ToString());

            lblStrideRateM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Stride Rate"].ToString());

            lblStrideLengthLeftToRighM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLength"].ToString());
            lblStrideLengthRightToLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLength"].ToString());
            lblStrideLengthAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLength"]);

            lblVelocityM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Velocity"].ToString());

            lblTouchDownDistanceLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["COGDistance"].ToString());
            lblTouchDownDistanceRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["COGDistance"].ToString());
            lblTouchDownDistanceAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["COGDistance"].ToString());

            lblUpperLegFullExtentionAngleLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullExtensionAngle"].ToString());
            lblUpperLegFullExtentionAngleRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullExtensionAngle"].ToString());
            lblUpperLegFullExtentionAngleAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullExtensionAngle"].ToString());

            lblLowerLegAngleAtTakeOfLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleTakeoff"].ToString());
            lblLowerLegAngleAtTakeOfRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleTakeoff"].ToString());
            lblLowerLegAngleAtTakeOfAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleTakeoff"].ToString());

            lblLowerLegFullFlexionAngleLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLFullFlexionAngle"].ToString());
            lblLowerLegFullFlexionAngleRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLFullFlexionAngle"].ToString());
            lblLowerLegFullFlexionAngleAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLFullFlexionAngle"].ToString());

            lblLowerLegAngleAtAnkleCrossLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleAC"].ToString());
            lblLowerLegAngleAtAnkleCrossRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleAC"].ToString());
            lblLowerLegAngleAtAnkleCrossAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleAC"].ToString());

            lblUpperLegFullFlexionAngleLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullFlexionAngle"].ToString());
            lblUpperLegFullFlexionAngleRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullFlexionAngle"].ToString());
            lblUpperLegFullFlexionAngleAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullFlexionAngle"].ToString());
        }

        //current data
        if (ds.Tables[3].Rows.Count > 0)
        {
            if (DropDownList3.SelectedValue != "")
            {
                try
                {
                    int movieidF = Convert.ToInt32(DropDownList1.SelectedItem.Value);
                    leftMovie = DataRepository.MovieProvider.GetByMovieId(movieidF);
                    string locationF = sae.SelectLessonlocation(LessonId.ToString());
                    string dateF = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
                    string RightSession = dateF + "-" + locationF;
                    lblRightMovie.Text = RightSession;
                }
                catch { }
            }
            lblGroundTimeLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Ground Time Left"].ToString());
            lblGroundTimeRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Ground Time Right"].ToString());
            lblGroundTimeAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Ground Time Average"].ToString());

            lblAirTimeLeftToRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Air Time Left to Right"].ToString());
            lblAirTimeRightToLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Air Time Right to Left"].ToString());
            lblAirTimeAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Air Time Average"].ToString());

            lblTimeToUpperLegFullFlexionLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Time to Upper Leg Full Flexion Left"].ToString());
            lblTimeToUpperLegFullFlexionRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Time to Upper Leg Full Flexion Right"].ToString());
            lblTimeToUpperLegFullFlexionAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Time to Upper Leg Full Flexion Average"].ToString());

            lblStrideRateF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Stride Rate"].ToString());

            lblStrideLengthLeftToRighF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Stride Length Left to Right"].ToString());
            lblStrideLengthRightToLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Stride Length Right to Left"].ToString());
            lblStrideLengthAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Stride Length Average"].ToString());

            lblVelocityF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Velocity"].ToString());

            lblTouchDownDistanceLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Touchdown Distance Left"].ToString());
            lblTouchDownDistanceRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Touchdown Distance Right"].ToString());
            lblTouchDownDistanceAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Touchdown Distance Average"].ToString());

            lblUpperLegFullExtentionAngleLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Extension Angle Left"].ToString());
            lblUpperLegFullExtentionAngleRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Extension Angle Right"].ToString());
            lblUpperLegFullExtentionAngleAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Extension Angle Average"].ToString());

            lblLowerLegAngleAtTakeOfLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Takeoff Left"].ToString());
            lblLowerLegAngleAtTakeOfRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Takeoff Right"].ToString());
            lblLowerLegAngleAtTakeOfAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Takeoff Average"].ToString());

            lblLowerLegFullFlexionAngleLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Full Flexion Angle Left"].ToString());
            lblLowerLegFullFlexionAngleRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Full Flexion Angle Right"].ToString());
            lblLowerLegFullFlexionAngleAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Full Flexion Angle Average"].ToString());

            lblLowerLegAngleAtAnkleCrossLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Ankle Cross Left"].ToString());
            lblLowerLegAngleAtAnkleCrossRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Ankle Cross Right"].ToString());
            lblLowerLegAngleAtAnkleCrossAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Ankle Cross Average"].ToString());

            lblUpperLegFullFlexionAngleLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Flexion Angle Left"].ToString());
            lblUpperLegFullFlexionAngleRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Flexion Angle Right"].ToString());
            lblUpperLegFullFlexionAngleAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Flexion Angle Average"].ToString());
        }

        if (ds.Tables[3].Rows.Count > 0)
        {

            //model_2 data

            lblGroundTimeLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTime"].ToString());
            lblGroundTimeRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTime"].ToString());
            lblGroundTimeAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTime"].ToString());

            lblAirTimeLeftToRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["AirTime"].ToString());
            lblAirTimeRightToLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["AirTime"].ToString());
            lblAirTimeAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["AirTime"].ToString());

            lblTimeToUpperLegFullFlexionLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["FullFlexionTime"].ToString());
            lblTimeToUpperLegFullFlexionRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["FullFlexionTime"].ToString());
            lblTimeToUpperLegFullFlexionAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["FullFlexionTime"].ToString());

            lblStrideRateM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Stride Rate"].ToString());

            lblStrideLengthLeftToRighM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLength"].ToString());
            lblStrideLengthRightToLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLength"].ToString());
            lblStrideLengthAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLength"].ToString());

            lblVelocityM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Velocity"].ToString());

            lblTouchDownDistanceLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["COGDistance"].ToString());
            lblTouchDownDistanceRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["COGDistance"].ToString());
            lblTouchDownDistanceAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["COGDistance"].ToString());

            lblUpperLegFullExtentionAngleLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullExtensionAngle"].ToString());
            lblUpperLegFullExtentionAngleRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullExtensionAngle"].ToString());
            lblUpperLegFullExtentionAngleAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullExtensionAngle"].ToString());

            lblLowerLegAngleAtTakeOfLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleTakeoff"].ToString());
            lblLowerLegAngleAtTakeOfRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleTakeoff"].ToString());
            lblLowerLegAngleAtTakeOfAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleTakeoff"].ToString());

            lblLowerLegFullFlexionAngleLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLFullFlexionAngle"].ToString());
            lblLowerLegFullFlexionAngleRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLFullFlexionAngle"].ToString());
            lblLowerLegFullFlexionAngleAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLFullFlexionAngle"].ToString());

            lblLowerLegAngleAtAnkleCrossLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleAC"].ToString());
            lblLowerLegAngleAtAnkleCrossRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleAC"].ToString());
            lblLowerLegAngleAtAnkleCrossAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleAC"].ToString());

            lblUpperLegFullFlexionAngleLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullFlexionAngle"].ToString());
            lblUpperLegFullFlexionAngleRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullFlexionAngle"].ToString());
            lblUpperLegFullFlexionAngleAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullFlexionAngle"].ToString());

        }

        //function calls 
        #region[Initial Model Values]
        if (!lblGroundTimeLeftI.Text.Equals("") && (!lblGroundTimeAverageM1.Text.Equals("")) && (!lblGroundTimeLeftI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblGroundTimeLeftI.Text) - Convert.ToSingle(lblGroundTimeAverageM1.Text) >= Convert.ToSingle(.007))
                lblGroundTimeLeftM1.ForeColor = System.Drawing.Color.Red;
            else
                lblGroundTimeLeftM1.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblGroundTimeLeftM1.Text = "";
            lblGroundTimeLeftI.Text = "";
            //ForeColor = ColorTranslator.FromHtml("#FFFF80");
        }

        if (!lblGroundTimeRightI.Text.Equals("") && (!lblGroundTimeAverageM1.Text.Equals("")) && (!lblGroundTimeRightI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblGroundTimeRightI.Text) - Convert.ToSingle(lblGroundTimeAverageM1.Text) >= Convert.ToSingle(.007))
                lblGroundTimeRightM1.ForeColor = Color.Red;
            else
                lblGroundTimeRightM1.ForeColor = Color.Black;
        }
        else
        {
            lblGroundTimeRightM1.Text = "";
            lblGroundTimeRightI.Text = "";
        }

        if (!lblGroundTimeAverageI.Text.Equals("") && (!lblGroundTimeAverageM1.Text.Equals("")) && (!lblGroundTimeAverageI.Text.Equals("0.000")))
        {
            if (lblGroundTimeLeftM1.ForeColor == Color.Red && lblGroundTimeRightM1.ForeColor == Color.Red)
                lblGroundTimeAverageM1.ForeColor = Color.Red;
            else
                lblGroundTimeAverageM1.ForeColor = Color.Black;
        }
        else
        {
            lblGroundTimeAverageM1.Text = "";
            lblGroundTimeAverageI.Text = "";
        }

        //Air time 

        #region[air time]
        if (!lblAirTimeLeftToRightI.Text.Equals("") && (!lblAirTimeAverageM1.Text.Equals("")) && (!lblAirTimeAverageI.Text.Equals("0.000")))
        {
            if (Math.Abs(Convert.ToSingle(lblAirTimeLeftToRightI.Text) - Convert.ToSingle(lblAirTimeAverageM1.Text)) >= Convert.ToSingle(.005))
            {
                if (Convert.ToSingle(lblAirTimeLeftToRightI.Text) > Convert.ToSingle(lblAirTimeAverageM1.Text))
                {
                    sprintAirTimeLtoRLongI = true;
                    sprintAirTimeLtoRShortI = false;
                }
                else
                {
                    sprintAirTimeLtoRLongI = false;
                    sprintAirTimeLtoRShortI = true;
                }
                lblAirTimeLeftToRightM1.ForeColor = Color.Red;
            }
            else
            {
                sprintAirTimeLtoRShortI = false;
                sprintAirTimeLtoRLongI = false;
                lblAirTimeLeftToRightM1.ForeColor = Color.Black;
            }
        }
        else
        {
            sprintAirTimeLtoRShortI = false;
            sprintAirTimeLtoRLongI = false;

            lblAirTimeLeftToRightM1.Text = "";
            lblAirTimeLeftToRightI.Text = "";
        }

        if (!lblAirTimeRightToLeftI.Text.Equals("") && (!lblAirTimeAverageM1.Text.Equals("")) && (!lblAirTimeRightToLeftI.Text.Equals("0.000")))
        {
            if (Math.Abs(Convert.ToSingle(lblAirTimeRightToLeftI.Text) - Convert.ToSingle(lblAirTimeAverageM1.Text)) >= Convert.ToSingle(.005))
            {
                if (Convert.ToSingle(lblAirTimeRightToLeftI.Text) > Convert.ToSingle(lblAirTimeAverageM1.Text))
                {
                    sprintAirTimeRtoLLongI = true;
                    sprintAirTimeRtoLShortI = false;
                }
                else
                {
                    sprintAirTimeRtoLLongI = false;
                    sprintAirTimeRtoLShortI = true;
                }
                lblAirTimeRightToLeftM1.ForeColor = Color.Red;
            }
            else
            {
                sprintAirTimeRtoLShortI = false;
                sprintAirTimeRtoLLongI = false;
                lblAirTimeRightToLeftM1.ForeColor = Color.Black;

            }
        }
        else
        {
            sprintAirTimeRtoLShortI = false;
            sprintAirTimeRtoLLongI = false;

            lblAirTimeRightToLeftM1.Text = "";
            lblAirTimeRightToLeftI.Text = "";
        }

        if (!lblAirTimeAverageI.Text.Equals("") && (!lblAirTimeAverageM1.Text.Equals("")) && (!lblAirTimeAverageI.Text.Equals("0.000")))
        {
            // if (Math.Abs(Convert.ToSingle(lblAirTimeAverageI.Text) - Convert.ToSingle(lblAirTimeAverageM1.Text)) >= Convert.ToSingle(.005))
            if (sprintAirTimeRtoLShortI && sprintAirTimeLtoRShortI)
            {
                sprintAirTimeAverageI = true;
                lblAirTimeAverageM1.ForeColor = Color.Red;

            }
            else if (sprintAirTimeRtoLLongI && sprintAirTimeLtoRLongI)
            {
                sprintAirTimeAverageI = true;
                lblAirTimeAverageM1.ForeColor = Color.Red;
            }
            else
            {
                sprintAirTimeAverageI = false;
                lblAirTimeAverageM1.ForeColor = Color.Black;
            }
        }
        else
        {
            sprintAirTimeAverageI = false;
            lblAirTimeAverageM1.Text = "";
            lblAirTimeAverageI.Text = "";
        }
        #endregion[air time]

        // TimeToUpperLegFullFlexion

        if (!lblTimeToUpperLegFullFlexionLeftI.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM1.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionLeftI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblTimeToUpperLegFullFlexionLeftI.Text) - Convert.ToSingle(lblTimeToUpperLegFullFlexionAverageM1.Text) <= Convert.ToSingle(-0.01))
                lblTimeToUpperLegFullFlexionLeftM1.ForeColor = Color.Red;
            else
                lblTimeToUpperLegFullFlexionLeftM1.ForeColor = Color.Black;
        }
        else
        {
            lblTimeToUpperLegFullFlexionLeftM1.Text = "";
            lblTimeToUpperLegFullFlexionLeftI.Text = "";
        }


        if (!lblTimeToUpperLegFullFlexionRightI.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM1.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionRightI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblTimeToUpperLegFullFlexionRightI.Text) - Convert.ToSingle(lblTimeToUpperLegFullFlexionAverageM1.Text) <= Convert.ToSingle(-0.01))
                lblTimeToUpperLegFullFlexionRightM1.ForeColor = Color.Red;
            else
                lblTimeToUpperLegFullFlexionRightM1.ForeColor = Color.Black;
        }
        else
        {
            lblTimeToUpperLegFullFlexionRightM1.Text = "";
            lblTimeToUpperLegFullFlexionRightI.Text = "";
        }

        if (!lblTimeToUpperLegFullFlexionAverageI.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM1.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionAverageI.Text.Equals("0.000")))
        {
            if (lblTimeToUpperLegFullFlexionLeftM1.ForeColor == Color.Red && lblTimeToUpperLegFullFlexionRightM1.ForeColor == Color.Red)
                lblTimeToUpperLegFullFlexionAverageM1.ForeColor = Color.Red;
            else
                lblTimeToUpperLegFullFlexionAverageM1.ForeColor = Color.Black;
        }
        else
        {
            lblTimeToUpperLegFullFlexionAverageM1.Text = "";
            lblTimeToUpperLegFullFlexionAverageI.Text = "";
        }

        //Stride rate

        if (!lblStrideRateI.Text.Equals("") && (!lblStrideRateM1.Text.Equals("")) && (!lblStrideRateI.Text.Equals("0.000")))
        {
            if (Math.Abs(Convert.ToSingle(lblStrideRateI.Text) - Convert.ToSingle(lblStrideRateM1.Text)) >= Convert.ToSingle(0.1))
                lblStrideRateM1.ForeColor = Color.Red;
            else
                lblStrideRateM1.ForeColor = Color.Black;
        }
        else
        {
            lblStrideRateM1.Text = "";
            lblStrideRateI.Text = "";
        }

        //Stride length

        #region[stride length]
        if (!lblStrideLengthLeftToRightI.Text.Equals("") && (!lblStrideLengthAverageM1.Text.Equals("")) && (!lblStrideLengthLeftToRightI.Text.Equals("0.000")))
        {
            if (Math.Abs(Convert.ToSingle(lblStrideLengthLeftToRightI.Text) - Convert.ToSingle(lblStrideLengthAverageM1.Text)) >= Convert.ToSingle(0.1))
            {
                if (Convert.ToSingle(lblStrideLengthLeftToRightI.Text) > Convert.ToSingle(lblStrideLengthAverageM1.Text))
                {
                    if (sprintAirTimeLtoRLongI)
                    {
                        sprintStrideLengthLtoRShortI = false;
                        sprintStrideLengthLtoRLongI = true;
                        lblStrideLengthLeftToRighM1.ForeColor = Color.Red;
                    }
                    else
                    {
                        sprintStrideLengthLtoRShortI = false;
                        sprintStrideLengthLtoRLongI = false;
                        lblStrideLengthLeftToRighM1.ForeColor = Color.Black;
                    }
                }
                else if (sprintAirTimeLtoRShortI)
                {
                    sprintStrideLengthLtoRShortI = true;
                    sprintStrideLengthLtoRLongI = false;
                    lblStrideLengthLeftToRighM1.ForeColor = Color.Red;
                }
                else
                {
                    sprintStrideLengthLtoRShortI = false;
                    sprintStrideLengthLtoRLongI = false;
                    lblStrideLengthLeftToRighM1.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthLtoRShortI = false;
                sprintStrideLengthLtoRLongI = false;
                lblStrideLengthLeftToRighM1.ForeColor = Color.Black;
            }
        }
        else
        {
            sprintStrideLengthLtoRShortI = false;
            sprintStrideLengthLtoRLongI = false;
            lblStrideLengthLeftToRighM1.Text = "";
            lblStrideLengthLeftToRightI.Text = "";
        }

        if (!lblStrideLengthRightToLeftI.Text.Equals("") && (!lblStrideLengthAverageM1.Text.Equals("")) && (!lblStrideLengthRightToLeftI.Text.Equals("0.000")))
        {
            if (Math.Abs(Convert.ToSingle(lblStrideLengthRightToLeftI.Text) - Convert.ToSingle(lblStrideLengthAverageM1.Text)) >= Convert.ToSingle(0.1))
            {
                if (Convert.ToSingle(lblStrideLengthRightToLeftI.Text) > Convert.ToSingle(lblStrideLengthAverageM1.Text))
                {
                    if (sprintAirTimeRtoLLongI == true)
                    {
                        sprintStrideLengthRtoLShortI = false;
                        sprintStrideLengthRtoLLongI = true;

                        lblStrideLengthRightToLeftM1.ForeColor = Color.Red;
                    }
                    else
                    {
                        sprintStrideLengthRtoLShortI = false;
                        sprintStrideLengthRtoLLongI = false;

                        lblStrideLengthRightToLeftM1.ForeColor = Color.Black;
                    }
                }
                else if (sprintAirTimeRtoLShortI)
                {
                    sprintStrideLengthRtoLShortI = true;
                    sprintStrideLengthRtoLLongI = false;

                    lblStrideLengthRightToLeftM1.ForeColor = Color.Red;
                }
                else
                {
                    sprintStrideLengthRtoLShortI = false;
                    sprintStrideLengthRtoLLongI = false;

                    lblStrideLengthRightToLeftM1.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthRtoLShortI = false;
                sprintStrideLengthRtoLLongI = false;
                lblStrideLengthRightToLeftM1.ForeColor = Color.Black;
            }
        }
        else
        {
            sprintStrideLengthRtoLShortI = false;
            sprintStrideLengthRtoLLongI = false;
            lblStrideLengthRightToLeftM1.Text = "";
            lblStrideLengthRightToLeftI.Text = "";
        }

        if (!lblStrideLengthAverageI.Text.Equals("") && (!lblStrideLengthAverageM1.Text.Equals("")) && (!lblStrideLengthAverageI.Text.Equals("0.000")))
        {
            if (sprintStrideLengthRtoLShortI == true && sprintStrideLengthLtoRShortI == true)
            {
                sprintStrideLengthAverageI = true;
                lblStrideLengthAverageM1.ForeColor = Color.Red;
            }
            else if (sprintStrideLengthRtoLLongI && sprintStrideLengthLtoRLongI)
            {
                sprintStrideLengthAverageI = true;
                lblStrideLengthAverageM1.ForeColor = Color.Red;
            }
            else
            {
                sprintStrideLengthAverageI = false;
                lblStrideLengthAverageM1.ForeColor = Color.Black;
            }
        }
        else
        {
            sprintStrideLengthAverageI = false;
            lblStrideLengthAverageM1.Text = "";
            lblStrideLengthAverageI.Text = "";
        }
        #endregion[stride length]

        //velocity     

        if (!lblVelocity.Text.Equals("") && (!lblVelocityM1.Text.Equals("")) && (!lblVelocity.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblVelocity.Text) - Convert.ToSingle(lblVelocityM1.Text) <= Convert.ToSingle(-0.65))
                lblVelocityM1.ForeColor = Color.Red;
            else
                lblVelocityM1.ForeColor = Color.Black;
        }
        else
        {
            lblVelocityM1.Text = "";
            lblVelocity.Text = "";
        }

        //TouchDownDistance

        if (!lblTouchDownDistanceLeftI.Text.Equals("") && (!lblTouchDownDistanceAverageM1.Text.Equals("")) && (!lblTouchDownDistanceLeftI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblTouchDownDistanceLeftI.Text) - Convert.ToSingle(lblTouchDownDistanceAverageM1.Text) >= Convert.ToSingle(.02))
                lblTouchDownDistanceLeftM1.ForeColor = Color.Red;
            else
                lblTouchDownDistanceLeftM1.ForeColor = Color.Black;
        }
        else
        {
            lblTouchDownDistanceLeftM1.Text = "";
            lblTouchDownDistanceLeftI.Text = "";
        }

        if (!lblTouchDownDistanceRightI.Text.Equals("") && (!lblTouchDownDistanceAverageM1.Text.Equals("")) && (!lblTouchDownDistanceRightI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblTouchDownDistanceRightI.Text) - Convert.ToSingle(lblTouchDownDistanceAverageM1.Text) >= Convert.ToSingle(.02))
                lblTouchDownDistanceRightM1.ForeColor = Color.Red;
            else
                lblTouchDownDistanceRightM1.ForeColor = Color.Black;
        }
        else
        {
            lblTouchDownDistanceRightM1.Text = "";
            lblTouchDownDistanceRightI.Text = "";
        }

        if (!lblTouchDownDistanceAverageI.Text.Equals("") && (!lblTouchDownDistanceAverageM1.Text.Equals("")) && (!lblTouchDownDistanceAverageI.Text.Equals("0.000")))
        {
            if (lblTouchDownDistanceLeftM1.ForeColor == Color.Red && lblTouchDownDistanceRightM1.ForeColor == Color.Red)
                lblTouchDownDistanceAverageM1.ForeColor = Color.Red;
            else
                lblTouchDownDistanceAverageM1.ForeColor = Color.Black;
        }
        else
        {
            lblTouchDownDistanceAverageM1.Text = "";
            lblTouchDownDistanceAverageI.Text = "";
        }


        if (!lblUpperLegFullExtentionAngleLeftI.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullExtentionAngleLeftI.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblUpperLegFullExtentionAngleLeftI.Text) - Convert.ToInt16(lblUpperLegFullExtentionAngleAverageM1.Text) <= Convert.ToInt16(-7))
                lblUpperLegFullExtentionAngleLeftM1.ForeColor = Color.Red;
            else
                lblUpperLegFullExtentionAngleLeftM1.ForeColor = Color.Black;
        }
        else
        {
            lblUpperLegFullExtentionAngleLeftM1.Text = "";
            lblUpperLegFullExtentionAngleLeftI.Text = "";
        }

        if (!lblUpperLegFullExtentionAngleRightI.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullExtentionAngleRightI.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblUpperLegFullExtentionAngleRightI.Text) - Convert.ToInt16(lblUpperLegFullExtentionAngleAverageM1.Text) <= Convert.ToInt16(-7))
                lblUpperLegFullExtentionAngleRightM1.ForeColor = Color.Red;
            else
                lblUpperLegFullExtentionAngleRightM1.ForeColor = Color.Black;
        }
        else
        {
            lblUpperLegFullExtentionAngleRightM1.Text = "";
            lblUpperLegFullExtentionAngleRightI.Text = "";
        }

        if (!lblUpperLegFullExtentionAngleAverageI.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullExtentionAngleAverageI.Text.Equals("0")))
        {
            if (lblUpperLegFullExtentionAngleLeftM1.ForeColor == Color.Red && lblUpperLegFullExtentionAngleRightM1.ForeColor == Color.Red)
                lblUpperLegFullExtentionAngleAverageM1.ForeColor = Color.Red;
            else
                lblUpperLegFullExtentionAngleAverageM1.ForeColor = Color.Black;
        }
        else
        {
            lblUpperLegFullExtentionAngleAverageM1.Text = "";
            lblUpperLegFullExtentionAngleAverageI.Text = "";
        }

        //LowerLegAngleAtTakeOf

        if (!lblLowerLegAngleAtTakeOfLeftI.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfLeftI.Text.Equals("0")))
        {
            if (Convert.ToSingle(lblLowerLegAngleAtTakeOfLeftI.Text) - Convert.ToSingle(lblLowerLegAngleAtTakeOfAverageM1.Text) >= Convert.ToInt16(7))
                lblLowerLegAngleAtTakeOfLeftM1.ForeColor = Color.Red;
            else
                lblLowerLegAngleAtTakeOfLeftM1.ForeColor = Color.Black;
        }
        else
        {
            lblLowerLegAngleAtTakeOfLeftM1.Text = "";
            lblLowerLegAngleAtTakeOfLeftI.Text = "";
        }

        if (!lblLowerLegAngleAtTakeOfRightI.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfRightI.Text.Equals("0")))
        {
            if (Convert.ToSingle(lblLowerLegAngleAtTakeOfRightI.Text) - Convert.ToSingle(lblLowerLegAngleAtTakeOfAverageM1.Text) >= Convert.ToInt16(7))
                lblLowerLegAngleAtTakeOfRightM1.ForeColor = Color.Red;
            else
                lblLowerLegAngleAtTakeOfRightM1.ForeColor = Color.Black;
        }
        else
        {
            lblLowerLegAngleAtTakeOfRightM1.Text = "";
            lblLowerLegAngleAtTakeOfRightI.Text = "";
        }

        if (!lblLowerLegAngleAtTakeOfAverageI.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfAverageI.Text.Equals("0")))
        {
            if (lblLowerLegAngleAtTakeOfLeftM1.ForeColor == Color.Red && lblLowerLegAngleAtTakeOfRightM1.ForeColor == Color.Red)
                lblLowerLegAngleAtTakeOfAverageM1.ForeColor = Color.Red;
            else
                lblLowerLegAngleAtTakeOfAverageM1.ForeColor = Color.Black;
        }
        else
        {
            lblLowerLegAngleAtTakeOfAverageM1.Text = "";
            lblLowerLegAngleAtTakeOfAverageI.Text = "";
        }

        //LowerLegFullFlexionAngle

        if (!lblLowerLegFullFlexionAngleLeftI.Text.Equals("") && (!lblLowerLegFullFlexionAngleLeftM1.Text.Equals("")) && (!lblLowerLegFullFlexionAngleLeftI.Text.Equals("0")))
        {
            if (Math.Abs(Convert.ToInt16(lblLowerLegFullFlexionAngleLeftI.Text) - Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM1.Text)) >= Convert.ToInt16(7))
                lblLowerLegFullFlexionAngleLeftM1.ForeColor = Color.Red;
            else
                lblLowerLegFullFlexionAngleLeftM1.ForeColor = Color.Black;
        }
        else
        {
            lblLowerLegFullFlexionAngleLeftM1.Text = "";
            lblLowerLegFullFlexionAngleLeftI.Text = "";
        }

        if (!lblLowerLegFullFlexionAngleRightI.Text.Equals("") && (!lblLowerLegFullFlexionAngleRightM1.Text.Equals("")) && (!lblLowerLegFullFlexionAngleRightI.Text.Equals("0")))
        {
            if (Math.Abs(Convert.ToInt16(lblLowerLegFullFlexionAngleRightI.Text) - Convert.ToInt16(lblLowerLegFullFlexionAngleRightM1.Text)) >= Convert.ToInt16(7))
                lblLowerLegFullFlexionAngleRightM1.ForeColor = Color.Red;
            else
                lblLowerLegFullFlexionAngleRightM1.ForeColor = Color.Black;
        }
        else
        {
            lblLowerLegFullFlexionAngleRightM1.Text = "";
            lblLowerLegFullFlexionAngleRightI.Text = "";
        }

        if (!lblLowerLegFullFlexionAngleAverageI.Text.Equals("") && (!lblLowerLegFullFlexionAngleAverageM1.Text.Equals("")) && (!lblLowerLegFullFlexionAngleAverageI.Text.Equals("0")))
        {
            if (lblLowerLegFullFlexionAngleLeftM1.ForeColor == Color.Red && lblLowerLegFullFlexionAngleRightM1.ForeColor == Color.Red)
            {
                if ((Convert.ToInt16(lblLowerLegFullFlexionAngleLeftI.Text) > Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM1.Text)) && (Convert.ToInt16(lblLowerLegFullFlexionAngleRightI.Text) > Convert.ToInt16(lblLowerLegFullFlexionAngleRightM1.Text)))
                    lblLowerLegFullFlexionAngleAverageM1.ForeColor = Color.Red;
                else
                {
                    if ((Convert.ToInt16(lblLowerLegFullFlexionAngleLeftI.Text) < Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM1.Text)) && (Convert.ToInt16(lblLowerLegFullFlexionAngleRightI.Text) < Convert.ToInt16(lblLowerLegFullFlexionAngleRightM1.Text)))
                        lblLowerLegFullFlexionAngleAverageM1.ForeColor = Color.Red;
                    else
                        lblLowerLegFullFlexionAngleAverageM1.ForeColor = Color.Black;
                }
            }
            else
                lblLowerLegFullFlexionAngleAverageM1.ForeColor = Color.Black;
        }
        else
        {
            lblLowerLegFullFlexionAngleAverageM1.Text = "";
            lblLowerLegFullFlexionAngleAverageI.Text = "";
        }

        if (!lblLowerLegAngleAtAnkleCrossLeftI.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossLeftI.Text.Equals("0")))
        {

            if (Math.Abs(Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftI.Text) - Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)) >= Convert.ToInt16(7))
                lblLowerLegAngleAtAnkleCrossLeftM1.ForeColor = Color.Red;
            else
                lblLowerLegAngleAtAnkleCrossLeftM1.ForeColor = Color.Black;
        }
        else
        {
            lblLowerLegAngleAtAnkleCrossLeftM1.Text = "";
            lblLowerLegAngleAtAnkleCrossLeftI.Text = "";
        }

        if (!lblLowerLegAngleAtAnkleCrossRightI.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossRightI.Text.Equals("0")))
        {
            if (Math.Abs(Convert.ToInt16(lblLowerLegAngleAtAnkleCrossRightI.Text) - Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)) >= Convert.ToInt16(7))
                lblLowerLegAngleAtAnkleCrossRightM1.ForeColor = Color.Red;
            else
                lblLowerLegAngleAtAnkleCrossRightM1.ForeColor = Color.Black;
        }
        else
        {
            lblLowerLegAngleAtAnkleCrossRightM1.Text = "";
            lblLowerLegAngleAtAnkleCrossRightI.Text = "";
        }

        if (!lblLowerLegAngleAtAnkleCrossAverageI.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossAverageI.Text.Equals("0")))
        {
            if (lblLowerLegFullFlexionAngleLeftM1.ForeColor == Color.Red && lblLowerLegFullFlexionAngleRightM1.ForeColor == Color.Red)
            {
                if ((Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftI.Text) > Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)) && (Convert.ToInt16(lblLowerLegAngleAtAnkleCrossRightI.Text) > Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)))
                    lblLowerLegAngleAtAnkleCrossAverageM1.ForeColor = Color.Red;
                else
                {
                    if ((Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftI.Text) < Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)) && (Convert.ToInt16(lblLowerLegAngleAtAnkleCrossRightI.Text) < Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)))
                        lblLowerLegAngleAtAnkleCrossAverageM1.ForeColor = Color.Red;
                    else
                        lblLowerLegAngleAtAnkleCrossAverageM1.ForeColor = Color.Black;
                }
            }
            else
                lblLowerLegAngleAtAnkleCrossAverageM1.ForeColor = Color.Black;
        }
        else
        {
            lblLowerLegAngleAtAnkleCrossAverageM1.Text = "";
            lblLowerLegAngleAtAnkleCrossAverageI.Text = "";
        }

        if (!lblUpperLegFullFlexionAngleLeftI.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullFlexionAngleLeftI.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblUpperLegFullFlexionAngleLeftI.Text) - Convert.ToInt16(lblUpperLegFullFlexionAngleAverageM1.Text) <= Convert.ToInt16(-7))
                lblUpperLegFullFlexionAngleLeftM1.ForeColor = Color.Red;
            else
                lblUpperLegFullFlexionAngleLeftM1.ForeColor = Color.Black;
        }
        else
        {
            lblUpperLegFullFlexionAngleLeftM1.Text = "";
            lblUpperLegFullFlexionAngleLeftI.Text = "";
        }

        if (!lblUpperLegFullFlexionAngleRightI.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullFlexionAngleRightI.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblUpperLegFullFlexionAngleRightI.Text) - Convert.ToInt16(lblUpperLegFullFlexionAngleAverageM1.Text) <= Convert.ToInt16(-7))
                lblUpperLegFullFlexionAngleRightM1.ForeColor = Color.Red;
            else
                lblUpperLegFullFlexionAngleRightM1.ForeColor = Color.Black;
        }
        else
        {
            lblUpperLegFullFlexionAngleRightM1.Text = "";
            lblUpperLegFullFlexionAngleRightI.Text = "";
        }

        if (!lblUpperLegFullFlexionAngleAverageI.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullFlexionAngleAverageI.Text.Equals("0")))
        {
            if (lblUpperLegFullFlexionAngleLeftM1.ForeColor == Color.Red && lblUpperLegFullFlexionAngleRightM1.ForeColor == Color.Red)
                lblUpperLegFullFlexionAngleAverageM1.ForeColor = Color.Red;
            else
                lblUpperLegFullFlexionAngleAverageM1.ForeColor = Color.Black;
        }

        else
        {
            lblUpperLegFullFlexionAngleAverageM1.Text = "";
            lblUpperLegFullFlexionAngleAverageI.Text = "";
        }
        #endregion[initial model values]
        //for model_2 data
        #region[Final Model Values]
        if (!lblGroundTimeLeftF.Text.Equals("") && (!lblGroundTimeAverageM2.Text.Equals("")) && (!lblGroundTimeLeftF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblGroundTimeLeftF.Text) - Convert.ToSingle(lblGroundTimeAverageM2.Text) >= Convert.ToSingle(.007))
                lblGroundTimeLeftM2.ForeColor = Color.Red;
            else
                lblGroundTimeLeftM2.ForeColor = Color.Black;
        }
        else
        {
            lblGroundTimeLeftM2.Text = "";
            lblGroundTimeLeftF.Text = "";
        }
        if (!lblGroundTimeRightF.Text.Equals("") && (!lblGroundTimeAverageM2.Text.Equals("")) && (!lblGroundTimeRightF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblGroundTimeRightF.Text) - Convert.ToSingle(lblGroundTimeAverageM2.Text) >= Convert.ToSingle(.007))
                lblGroundTimeRightM2.ForeColor = Color.Red;

            else
                lblGroundTimeRightM2.ForeColor = Color.Black;
        }
        else
        {
            lblGroundTimeRightM2.Text = "";
            lblGroundTimeRightF.Text = "";
        }
        if (!lblGroundTimeAverageF.Text.Equals("") && (!lblGroundTimeAverageM2.Text.Equals("")) && (!lblGroundTimeAverageF.Text.Equals("0.000")))
        {
            if (lblGroundTimeLeftM2.ForeColor == Color.Red && lblGroundTimeRightM2.ForeColor == Color.Red)
                lblGroundTimeAverageM2.ForeColor = Color.Red;
            else
                lblGroundTimeAverageM2.ForeColor = Color.Black;
        }
        else
        {
            lblGroundTimeAverageM2.Text = "";
            lblGroundTimeAverageF.Text = "";
        }

        //Air time 
        #region[air time]
        if (!lblAirTimeLeftToRightF.Text.Equals("") && (!lblAirTimeAverageM2.Text.Equals("")) && (!lblAirTimeAverageF.Text.Equals("0.000")))
        {
            if (Math.Abs(Convert.ToSingle(lblAirTimeLeftToRightF.Text) - Convert.ToSingle(lblAirTimeAverageM2.Text)) >= Convert.ToSingle(.005))
            {
                if (Convert.ToSingle(lblAirTimeLeftToRightF.Text) > Convert.ToSingle(lblAirTimeAverageM2.Text))
                {
                    sprintAirTimeLtoRLongF = true;
                    sprintAirTimeLtoRShortF = false;
                }
                else
                {
                    sprintAirTimeLtoRLongF = false;
                    sprintAirTimeLtoRShortF = true;
                }
                lblAirTimeLeftToRightM2.ForeColor = Color.Red;
            }
            else
            {
                sprintAirTimeLtoRShortF = false;
                sprintAirTimeLtoRLongF = false;
                lblAirTimeLeftToRightM2.ForeColor = Color.Black;
            }
        }
        else
        {
            sprintAirTimeLtoRShortF = false;
            sprintAirTimeLtoRLongF = false;

            lblAirTimeLeftToRightM2.Text = "";
            lblAirTimeLeftToRightF.Text = "";
        }

        if (!lblAirTimeRightToLeftF.Text.Equals("") && (!lblAirTimeAverageM2.Text.Equals("")) && (!lblAirTimeRightToLeftF.Text.Equals("0.000")))
        {
            if (Math.Abs(Convert.ToSingle(lblAirTimeRightToLeftF.Text) - Convert.ToSingle(lblAirTimeAverageM2.Text)) >= Convert.ToSingle(.005))
            {
                if (Convert.ToSingle(lblAirTimeRightToLeftF.Text) > Convert.ToSingle(lblAirTimeAverageM2.Text))
                {
                    sprintAirTimeRtoLLongF = true;
                    sprintAirTimeRtoLShortF = false;

                }
                else
                {
                    sprintAirTimeRtoLLongF = false;
                    sprintAirTimeRtoLShortF = true;
                }
                lblAirTimeRightToLeftM2.ForeColor = Color.Red;
            }
            else
            {
                sprintAirTimeRtoLShortF = false;
                sprintAirTimeRtoLLongF = false;
                lblAirTimeRightToLeftM2.ForeColor = Color.Black;

            }
        }
        else
        {
            sprintAirTimeRtoLShortF = false;
            sprintAirTimeRtoLLongF = false;

            lblAirTimeRightToLeftM2.Text = "";
            lblAirTimeRightToLeftF.Text = "";
        }

        if (!lblAirTimeAverageF.Text.Equals("") && (!lblAirTimeAverageM2.Text.Equals("")) && (!lblAirTimeAverageF.Text.Equals("0.000")))
        {
            // if (Math.Abs(Convert.ToSingle(lblAirTimeAverageF.Text) - Convert.ToSingle(lblAirTimeAverageM2.Text)) >= Convert.ToSingle(.005))
            if (sprintAirTimeRtoLShortF && sprintAirTimeLtoRShortF)
            {
                sprintAirTimeAverageF = true;
                lblAirTimeAverageM2.ForeColor = Color.Red;

            }
            else if (sprintAirTimeRtoLLongF && sprintAirTimeLtoRLongF)
            {
                sprintAirTimeAverageF = true;
                lblAirTimeAverageM2.ForeColor = Color.Red;
            }
            else
            {
                sprintAirTimeAverageF = false;
                lblAirTimeAverageM2.ForeColor = Color.Black;
            }
        }
        else
        {
            sprintAirTimeAverageF = false;
            lblAirTimeAverageM2.Text = "";
            lblAirTimeAverageF.Text = "";
        }
        #endregion[air time]

        //TimeToUpperLegFullFlexion
        if (!lblTimeToUpperLegFullFlexionLeftF.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM2.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionLeftF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblTimeToUpperLegFullFlexionLeftF.Text) - Convert.ToSingle(lblTimeToUpperLegFullFlexionAverageM2.Text) <= Convert.ToSingle(-0.01))
                lblTimeToUpperLegFullFlexionLeftM2.ForeColor = Color.Red;
            else
                lblTimeToUpperLegFullFlexionLeftM2.ForeColor = Color.Black;
        }
        else
        {
            lblTimeToUpperLegFullFlexionLeftM2.Text = "";
            lblTimeToUpperLegFullFlexionLeftF.Text = "";
        }

        if (!lblTimeToUpperLegFullFlexionRightF.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM2.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionRightF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblTimeToUpperLegFullFlexionRightF.Text) - Convert.ToSingle(lblTimeToUpperLegFullFlexionAverageM2.Text) <= Convert.ToSingle(-0.01))
                lblTimeToUpperLegFullFlexionRightM2.ForeColor = Color.Red;
            else
                lblTimeToUpperLegFullFlexionRightM2.ForeColor = Color.Black;
        }
        else
        {
            lblTimeToUpperLegFullFlexionRightM2.Text = "";
            lblTimeToUpperLegFullFlexionRightF.Text = "";
        }

        if (!lblTimeToUpperLegFullFlexionAverageF.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM2.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionAverageF.Text.Equals("0.000")))
        {
            if (lblTimeToUpperLegFullFlexionLeftM2.ForeColor == Color.Red && lblTimeToUpperLegFullFlexionRightM2.ForeColor == Color.Red)
                lblTimeToUpperLegFullFlexionAverageM2.ForeColor = Color.Red;
            else
                lblTimeToUpperLegFullFlexionAverageM2.ForeColor = Color.Black;
        }
        else
        {
            lblTimeToUpperLegFullFlexionAverageM2.Text = "";
            lblTimeToUpperLegFullFlexionAverageF.Text = "";
        }

        if (!lblStrideRateF.Text.Equals("") && (!lblStrideRateM2.Text.Equals("")) && (!lblStrideRateF.Text.Equals("0.000")))
        {
            if (Math.Abs(Convert.ToSingle(lblStrideRateF.Text) - Convert.ToSingle(lblStrideRateM2.Text)) >= Convert.ToSingle(0.1))
                lblStrideRateM2.ForeColor = System.Drawing.Color.Red;
            else
                lblStrideRateM2.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblStrideRateM2.Text = "";
            lblStrideRateF.Text = "";
        }

        //stride length

        #region[stride length]
        if (!lblStrideLengthLeftToRighF.Text.Equals("") && (!lblStrideLengthAverageM2.Text.Equals("")) && (!lblStrideLengthLeftToRighF.Text.Equals("0.000")))
        {
            if (Math.Abs(Convert.ToSingle(lblStrideLengthLeftToRighF.Text) - Convert.ToSingle(lblStrideLengthAverageM2.Text)) >= Convert.ToSingle(0.1))
            {
                if (Convert.ToSingle(lblStrideLengthLeftToRighF.Text) > Convert.ToSingle(lblStrideLengthAverageM2.Text))
                {
                    if (sprintAirTimeLtoRLongF)
                    {
                        sprintStrideLengthLtoRShortF = false;
                        sprintStrideLengthLtoRLongF = true;
                        lblStrideLengthLeftToRighM2.ForeColor = Color.Red;
                    }
                    else
                    {
                        sprintStrideLengthLtoRShortF = false;
                        sprintStrideLengthLtoRLongF = false;
                        lblStrideLengthLeftToRighM2.ForeColor = Color.Black;
                    }
                }
                else if (sprintAirTimeLtoRShortF)
                {
                    sprintStrideLengthLtoRShortF = true;
                    sprintStrideLengthLtoRLongF = false;
                    lblStrideLengthLeftToRighM2.ForeColor = Color.Red;
                }
                else
                {
                    sprintStrideLengthLtoRShortF = false;
                    sprintStrideLengthLtoRLongF = false;
                    lblStrideLengthLeftToRighM2.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthLtoRShortF = false;
                sprintStrideLengthLtoRLongF = false;
                lblStrideLengthLeftToRighM2.ForeColor = Color.Black;
            }
        }
        else
        {
            sprintStrideLengthLtoRShortF = false;
            sprintStrideLengthLtoRLongF = false;
            lblStrideLengthLeftToRighM2.Text = "";
            lblStrideLengthLeftToRighF.Text = "";
        }

        if (!lblStrideLengthRightToLeftF.Text.Equals("") && (!lblStrideLengthAverageM2.Text.Equals("")) && (!lblStrideLengthRightToLeftF.Text.Equals("0.000")))
        {
            if (Math.Abs(Convert.ToSingle(lblStrideLengthRightToLeftF.Text) - Convert.ToSingle(lblStrideLengthAverageM2.Text)) >= Convert.ToSingle(0.1))
            {
                if (Convert.ToSingle(lblStrideLengthRightToLeftF.Text) > Convert.ToSingle(lblStrideLengthAverageM2.Text))
                {
                    if (sprintAirTimeRtoLLongF == true)
                    {
                        sprintStrideLengthRtoLShortF = false;
                        sprintStrideLengthRtoLLongF = true;

                        lblStrideLengthRightToLeftM2.ForeColor = Color.Red;
                    }
                    else
                    {
                        sprintStrideLengthRtoLShortF = false;
                        sprintStrideLengthRtoLLongF = false;

                        lblStrideLengthRightToLeftM2.ForeColor = Color.Black;
                    }
                }
                else if (sprintAirTimeRtoLShortF)
                {
                    sprintStrideLengthRtoLShortF = true;
                    sprintStrideLengthRtoLLongF = false;

                    lblStrideLengthRightToLeftM2.ForeColor = Color.Red;
                }
                else
                {
                    sprintStrideLengthRtoLShortF = false;
                    sprintStrideLengthRtoLLongF = false;

                    lblStrideLengthRightToLeftM2.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthRtoLShortF = false;
                sprintStrideLengthRtoLLongF = false;
                lblStrideLengthRightToLeftM2.ForeColor = Color.Black;
            }
        }
        else
        {
            sprintStrideLengthRtoLShortF = false;
            sprintStrideLengthRtoLLongF = false;
            lblStrideLengthRightToLeftM2.Text = "";
            lblStrideLengthRightToLeftF.Text = "";
        }

        if (!lblStrideLengthAverageF.Text.Equals("") && (!lblStrideLengthAverageM2.Text.Equals("")) && (!lblStrideLengthAverageF.Text.Equals("0.000")))
        {
            if (sprintStrideLengthRtoLShortF == true && sprintStrideLengthLtoRShortF == true)
            {
                sprintStrideLengthAverageF = true;
                lblStrideLengthAverageM2.ForeColor = Color.Red;
            }
            else if (sprintStrideLengthRtoLLongF && sprintStrideLengthLtoRLongF)
            {
                sprintStrideLengthAverageF = true;
                lblStrideLengthAverageM2.ForeColor = Color.Red;
            }
            else
            {
                sprintStrideLengthAverageF = false;
                lblStrideLengthAverageM2.ForeColor = Color.Black;
            }
        }
        else
        {
            sprintStrideLengthAverageF = false;
            lblStrideLengthAverageM2.Text = "";
            lblStrideLengthAverageF.Text = "";
        }
        #endregion[stride length]

        if (!lblVelocityF.Text.Equals("") && (!lblVelocityM2.Text.Equals("")) && (!lblVelocityF.Text.Equals("0.000")))
        {

            if (Convert.ToSingle(lblVelocityF.Text) - Convert.ToSingle(lblVelocityM2.Text) <= Convert.ToSingle(-0.65))
                lblVelocityM2.ForeColor = System.Drawing.Color.Red;
            else
                lblVelocityM2.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblVelocityM2.Text = "";
            lblVelocityF.Text = "";
        }

        //touch down distance

        if (!lblTouchDownDistanceLeftF.Text.Equals("") && (!lblTouchDownDistanceAverageM2.Text.Equals("")) && (!lblTouchDownDistanceLeftF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblTouchDownDistanceLeftF.Text) - Convert.ToSingle(lblTouchDownDistanceAverageM2.Text) >= Convert.ToSingle(.02))
                lblTouchDownDistanceLeftM2.ForeColor = Color.Red;
            else
                lblTouchDownDistanceLeftM2.ForeColor = Color.Black;
        }
        else
        {
            lblTouchDownDistanceLeftM2.Text = "";
            lblTouchDownDistanceLeftF.Text = "";
        }

        if (!lblTouchDownDistanceRightF.Text.Equals("") && (!lblTouchDownDistanceAverageM2.Text.Equals("")) && (!lblTouchDownDistanceRightF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblTouchDownDistanceRightF.Text) - Convert.ToSingle(lblTouchDownDistanceAverageM2.Text) >= Convert.ToSingle(.02))
                lblTouchDownDistanceRightM2.ForeColor = Color.Red;
            else
                lblTouchDownDistanceRightM2.ForeColor = Color.Black;
        }
        else
        {
            lblTouchDownDistanceRightM2.Text = "";
            lblTouchDownDistanceRightF.Text = "";
        }

        if (!lblTouchDownDistanceAverageF.Text.Equals("") && (!lblTouchDownDistanceAverageM2.Text.Equals("")) && (!lblTouchDownDistanceAverageF.Text.Equals("0.000")))
        {
            if (lblTouchDownDistanceLeftM2.ForeColor == Color.Red && lblTouchDownDistanceRightM2.ForeColor == Color.Red)
                lblTouchDownDistanceAverageM2.ForeColor = Color.Red;
            else
                lblTouchDownDistanceAverageM2.ForeColor = Color.Black;
        }
        else
        {
            lblTouchDownDistanceAverageM2.Text = "";
            lblTouchDownDistanceAverageF.Text = "";
        }

        //upper leg full extension angle

        if (!lblUpperLegFullExtentionAngleLeftF.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullExtentionAngleLeftF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblUpperLegFullExtentionAngleLeftF.Text) - Convert.ToInt16(lblUpperLegFullExtentionAngleAverageM2.Text) <= Convert.ToInt16(-7))
                lblUpperLegFullExtentionAngleLeftM2.ForeColor = Color.Red;
            else
                lblUpperLegFullExtentionAngleLeftM2.ForeColor = Color.Black;
        }
        else
        {
            lblUpperLegFullExtentionAngleLeftM2.Text = "";
            lblUpperLegFullExtentionAngleLeftF.Text = "";
        }

        if (!lblUpperLegFullExtentionAngleRightF.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullExtentionAngleRightF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblUpperLegFullExtentionAngleRightF.Text) - Convert.ToInt16(lblUpperLegFullExtentionAngleAverageM2.Text) <= Convert.ToInt16(-7))
                lblUpperLegFullExtentionAngleRightM2.ForeColor = Color.Red;
            else
                lblUpperLegFullExtentionAngleRightM2.ForeColor = Color.Black;
        }
        else
        {
            lblUpperLegFullExtentionAngleRightM2.Text = "";
            lblUpperLegFullExtentionAngleRightF.Text = "";
        }
        if (!lblUpperLegFullExtentionAngleAverageF.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullExtentionAngleAverageF.Text.Equals("0")))
        {
            if (lblUpperLegFullExtentionAngleLeftM2.ForeColor == Color.Red && lblUpperLegFullExtentionAngleRightM2.ForeColor == Color.Red)
                lblUpperLegFullExtentionAngleAverageM2.ForeColor = Color.Red;
            else
                lblUpperLegFullExtentionAngleAverageM2.ForeColor = Color.Black;
        }
        else
        {
            lblUpperLegFullExtentionAngleAverageM2.Text = "";
            lblUpperLegFullExtentionAngleAverageF.Text = "";
        }

        //LowerLegAngleAtTakeOf

        if (!lblLowerLegAngleAtTakeOfLeftF.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfLeftF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblLowerLegAngleAtTakeOfLeftF.Text) - Convert.ToInt16(lblLowerLegAngleAtTakeOfAverageM2.Text) >= Convert.ToInt16(7))
                lblLowerLegAngleAtTakeOfLeftM2.ForeColor = System.Drawing.Color.Red;
            else
                lblLowerLegAngleAtTakeOfLeftM2.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblLowerLegAngleAtTakeOfLeftF.Text = "";
            lblLowerLegAngleAtTakeOfLeftM2.Text = "";
        }

        if (!lblLowerLegAngleAtTakeOfRightF.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfRightF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblLowerLegAngleAtTakeOfRightF.Text) - Convert.ToInt16(lblLowerLegAngleAtTakeOfAverageM2.Text) >= Convert.ToInt16(7))
                lblLowerLegAngleAtTakeOfRightM2.ForeColor = System.Drawing.Color.Red;
            else
                lblLowerLegAngleAtTakeOfRightM2.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblLowerLegAngleAtTakeOfRightF.Text = "";
            lblLowerLegAngleAtTakeOfRightM2.Text = "";
        }

        if (!lblLowerLegAngleAtTakeOfAverageF.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfAverageF.Text.Equals("0")))
        {
            if (lblLowerLegAngleAtTakeOfLeftM2.ForeColor == Color.Red && lblLowerLegAngleAtTakeOfRightM2.ForeColor == Color.Red)
                lblLowerLegAngleAtTakeOfAverageM2.ForeColor = System.Drawing.Color.Red;
            else
                lblLowerLegAngleAtTakeOfAverageM2.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblLowerLegAngleAtTakeOfAverageF.Text = "";
            lblLowerLegAngleAtTakeOfAverageM2.Text = "";
        }

        //LowerLegFullFlexionAngle

        if (!lblLowerLegFullFlexionAngleLeftF.Text.Equals("") && (!lblLowerLegFullFlexionAngleLeftM2.Text.Equals("")) && (!lblLowerLegFullFlexionAngleLeftF.Text.Equals("0")))
        {
            if (Math.Abs(Convert.ToInt16(lblLowerLegFullFlexionAngleLeftF.Text) - Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM2.Text)) >= Convert.ToInt16(7))

                lblLowerLegFullFlexionAngleLeftM2.ForeColor = Color.Red;
            else
                lblLowerLegFullFlexionAngleLeftM2.ForeColor = Color.Black;
        }
        else
        {
            lblLowerLegFullFlexionAngleLeftF.Text = "";
            lblLowerLegFullFlexionAngleLeftM2.Text = "";
        }
        if (!lblLowerLegFullFlexionAngleRightF.Text.Equals("") && (!lblLowerLegFullFlexionAngleRightM2.Text.Equals("")) && (!lblLowerLegFullFlexionAngleRightF.Text.Equals("0")))
        {
            if (Math.Abs(Convert.ToInt16(lblLowerLegFullFlexionAngleRightF.Text) - Convert.ToInt16(lblLowerLegFullFlexionAngleRightM2.Text)) >= Convert.ToInt16(7))
                lblLowerLegFullFlexionAngleRightM2.ForeColor = Color.Red;
            else
                lblLowerLegFullFlexionAngleRightM2.ForeColor = Color.Black;
        }
        else
        {
            lblLowerLegFullFlexionAngleRightF.Text = "";
            lblLowerLegFullFlexionAngleRightM2.Text = "";
        }

        if (!lblLowerLegFullFlexionAngleAverageF.Text.Equals("") && (!lblLowerLegFullFlexionAngleAverageM2.Text.Equals("")) && (!lblLowerLegFullFlexionAngleAverageF.Text.Equals("0")))
        {
            if (lblLowerLegFullFlexionAngleLeftM2.ForeColor == Color.Red && lblLowerLegFullFlexionAngleRightM2.ForeColor == Color.Red)
            {
                if ((Convert.ToInt16(lblLowerLegFullFlexionAngleLeftF.Text) > Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM2.Text)) && (Convert.ToInt16(lblLowerLegFullFlexionAngleRightF.Text) > Convert.ToInt16(lblLowerLegFullFlexionAngleRightM2.Text)))
                    lblLowerLegFullFlexionAngleAverageM2.ForeColor = Color.Red;
                else
                {
                    if ((Convert.ToInt16(lblLowerLegFullFlexionAngleLeftF.Text) < Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM2.Text)) && (Convert.ToInt16(lblLowerLegFullFlexionAngleRightF.Text) < Convert.ToInt16(lblLowerLegFullFlexionAngleRightM2.Text)))
                        lblLowerLegFullFlexionAngleAverageM2.ForeColor = Color.Red;
                    else
                        lblLowerLegFullFlexionAngleAverageM2.ForeColor = Color.Black;
                }
            }
            else
                lblLowerLegFullFlexionAngleAverageM2.ForeColor = Color.Black;
        }
        else
        {
            lblLowerLegFullFlexionAngleAverageF.Text = "";
            lblLowerLegFullFlexionAngleAverageM2.Text = "";
        }

        //LowerLegAngleAtAnkleCross


        if (!lblLowerLegAngleAtAnkleCrossLeftF.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossLeftF.Text.Equals("0")))
        {
            if (Math.Abs(Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftF.Text) - Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)) >= Convert.ToInt16(7))
                lblLowerLegAngleAtAnkleCrossLeftM2.ForeColor = System.Drawing.Color.Red;
            else
                lblLowerLegAngleAtAnkleCrossLeftM2.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblLowerLegAngleAtAnkleCrossLeftF.Text = "";
            lblLowerLegAngleAtAnkleCrossLeftM2.Text = "";
        }

        if (!lblLowerLegAngleAtAnkleCrossRightF.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossRightF.Text.Equals("0")))
        {
            if (Math.Abs(Convert.ToSingle(lblLowerLegAngleAtAnkleCrossRightF.Text) - Convert.ToSingle(lblLowerLegAngleAtAnkleCrossAverageM2.Text)) >= Convert.ToInt16(7))
                lblLowerLegAngleAtAnkleCrossRightM2.ForeColor = System.Drawing.Color.Red;
            else
                lblLowerLegAngleAtAnkleCrossRightM2.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblLowerLegAngleAtAnkleCrossRightF.Text = "";
            lblLowerLegAngleAtAnkleCrossRightM2.Text = "";
        }

        if (!lblLowerLegAngleAtAnkleCrossAverageF.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossAverageF.Text.Equals("0")))
        {
            if (lblLowerLegAngleAtAnkleCrossLeftM2.ForeColor == Color.Red && lblLowerLegAngleAtAnkleCrossRightM2.ForeColor == Color.Red)
            {
                if ((Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftF.Text) > Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)) && (Convert.ToInt16(lblLowerLegAngleAtAnkleCrossRightF.Text) > Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)))
                    lblLowerLegAngleAtAnkleCrossAverageM2.ForeColor = Color.Red;
                else
                {
                    if ((Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftF.Text) < Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)) && (Convert.ToInt16(lblLowerLegAngleAtAnkleCrossRightF.Text) < Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)))
                        lblLowerLegAngleAtAnkleCrossAverageM2.ForeColor = Color.Red;
                    else
                        lblLowerLegAngleAtAnkleCrossAverageM2.ForeColor = Color.Black;
                }
            }
            else
                lblLowerLegAngleAtAnkleCrossAverageM2.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblLowerLegAngleAtAnkleCrossAverageF.Text = "";
            lblLowerLegAngleAtAnkleCrossAverageM2.Text = "";
        }

        //UpperLegFullFlexionAngle

        if (!lblUpperLegFullFlexionAngleLeftF.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullFlexionAngleLeftF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblUpperLegFullFlexionAngleLeftF.Text) - Convert.ToInt16(lblUpperLegFullFlexionAngleAverageM2.Text) <= Convert.ToInt16(-7))
                lblUpperLegFullFlexionAngleLeftM2.ForeColor = Color.Red;
            else
                lblUpperLegFullFlexionAngleLeftM2.ForeColor = Color.Black;
        }
        else
        {
            lblUpperLegFullFlexionAngleLeftF.Text = "";
            lblUpperLegFullFlexionAngleLeftM2.Text = "";
        }
        if (!lblUpperLegFullFlexionAngleRightF.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullFlexionAngleRightF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblUpperLegFullFlexionAngleRightF.Text) - Convert.ToInt16(lblUpperLegFullFlexionAngleAverageM2.Text) <= Convert.ToInt16(-7))
                lblUpperLegFullFlexionAngleRightM2.ForeColor = Color.Red;
            else
                lblUpperLegFullFlexionAngleRightM2.ForeColor = Color.Black;
        }
        else
        {
            lblUpperLegFullFlexionAngleRightF.Text = "";
            lblUpperLegFullFlexionAngleRightM2.Text = "";
        }

        if (!lblUpperLegFullFlexionAngleAverageF.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullFlexionAngleAverageF.Text.Equals("0")))
        {
            if (lblUpperLegFullFlexionAngleLeftM2.ForeColor == Color.Red && lblUpperLegFullFlexionAngleRightM2.ForeColor == Color.Red)
                lblUpperLegFullFlexionAngleAverageM2.ForeColor = Color.Red;
            else
                lblUpperLegFullFlexionAngleAverageM2.ForeColor = Color.Black;
        }
        else
        {
            lblUpperLegFullFlexionAngleAverageF.Text = "";
            lblUpperLegFullFlexionAngleAverageM2.Text = "";
        }
        #endregion[Final model Values]
        WriteObjectsToPageAjax();
    }

    
    //check later
    public void GetAllHurdleStepsAthleteData(int LessonId)
    {
        ds = sae.GetAllHurdleStepsAthletesData(LessonId);

        if (ds.Tables[0].Rows.Count > 0)
        {
            if (DropDownList1.SelectedValue != "")
            {
                try
                {
                    int movieid = Convert.ToInt32(DropDownList1.SelectedItem.Value);
                    leftMovie = DataRepository.MovieProvider.GetByMovieId(movieid);
                    string location = sae.SelectLessonlocation(LessonId.ToString());
                    string date = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
                    string LeftSession = date + "-" + location;
                    lblHurdleStepLeftMovie.Text = LeftSession;
                }
                catch { }
            }
            //initial  Data
            lblHurdleStepBetweenI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetDistanceBetweenHurdleSteps"].ToString());
            lblHurdleStepIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetDistanceIntoHurdleSteps"].ToString());
            lblHurdleStepOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetDistanceOffHurdleSteps"].ToString());
            lblHurdleStepVelocityI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Velocity"].ToString());

            lblStep1HSGroundTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1GroundTime"].ToString());
            lblStep1HSAirTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1AirTime"].ToString());

            //lblStep1UlFlexTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1UlFlexTime"].ToString());
            lblStep1HSStrideRateI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1 Stride Rate"].ToString());
            lblStep1HSStrideLengthI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1StrideLength"].ToString());
            lblStep1TouchdownDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1TouchdownDistance"].ToString());

            lblStep1KSTouchdownI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1KneeSeperationatTouchdown"].ToString());
            lblStep1TrunkTouchdownAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1TrunkTouchdownAngle"].ToString());
            lblStep1TrunkTakeoffAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1TrunkTakeoffAngle"].ToString());


            lblStep1ULFullExtensionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1ULAtFullExtension"].ToString());
            lblStep1LLAtTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1LLAtTakeoff"].ToString());

            lblStep1ULFullFlexionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1ULAtFullFlexion"].ToString());
            lblStep2HSGroundTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2GroundTime"].ToString());
            lblStep2HSAirTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2AirTime"].ToString());
            //lblStep2UlFlexTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2UlFlexTime"].ToString());//chk

            lblStep2HSStrideRateI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2StrideRate"].ToString());
            lblStep2HSStrideLengthI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2StrideLength"].ToString());
            lblStep2TouchdownDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2TouchdownDistance"].ToString());

            lblStep2KSAtTouchdownI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2KneeSeperationatTouchdown"].ToString());
            lblStep2TrunkTouchdownAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2TrunkTouchdownAngle"].ToString());
            lblStep2TrunkTakeoffAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2TrunkTakeoffAngle"].ToString());


            lblStep2ULAtFullExtensionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2ULAtFullExtension"].ToString());
            lblStep2LLAtTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2LLAtTakeoff"].ToString());

            lblStep2LLAtFullFlexionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2LLAtFullFlexion"].ToString());
            lblStep2LLAtAngleCrossI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2LLAtatAnkleCross"].ToString());
            lblStep2ULAtFullFlexionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2ULAtFullFlexion"].ToString());

            lblStep3HSGroundTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3GroundTime"].ToString());
            lblStep3HSAirTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3AirTime"].ToString());
            //lblStep3UlFlexTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3UlFlexTime"].ToString());//chk
            lblStep3StrideRateI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3 Stride Rate"].ToString());

            lblStep3StrideLengthI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3StrideLength"].ToString());
            lblStep3TouchdownDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3TouchdownDistance"].ToString());
            lblStep3KSAtTouchdownI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3KneeSeperationatTouchdown"].ToString());
            lblStep3TrunkTouchdownAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3TrunkTouchdownAngle"].ToString());
            lblStep3TrunkTakeoffAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3TrunkTakeoffAngle"].ToString());



            lblStep3ULAtFullExtensionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3ULAtFullExtension"].ToString());
            lblStep3LLAtTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3LLAtTakeoff"].ToString());
            lblStep3LLAtFullFlexionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3LLAtFullFlexion"].ToString());

            lblStep3LLAtAngleCrossI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3LLAtatAnkleCross"].ToString());
            lblStep3ULAtFullFlexionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3ULAtFullFlexion"].ToString());

            lblIntoHurdleTouchdownDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetTouchdownDistanceIntoTheHurdle"].ToString());
            lblIntoHurdleKSTouchdownI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetKneeSeperationatTouchdownIntoTheHurdle"].ToString());
            lblIntoHurdleTrunkTouchdownAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetTrunkTouchdownAngleIntoTheHurdle"].ToString());
            lblIntoHurdleLLTouchdownI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetLLAtTouchdownIntoTheHurdle"].ToString());


        }

        //model data
        if (ds.Tables[1].Rows.Count > 0)
        {
            lblHurdleStepBetweenM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetDistanceBetweenHurdleSteps"].ToString());
            lblHurdleStepIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetDistanceIntoHurdleSteps"].ToString());
            lblHurdleStepOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetDistanceOffHurdleSteps"].ToString());

            lblHurdleStepVelocityM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Velocity"].ToString());
            lblStep1HSGroundTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1GroundTime"].ToString());
            lblStep1HSAirTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1AirTime"].ToString());
            //lblStep1UlFlexTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1UlFlexTime"].ToString());//chk Step1UlFlexTime

            lblStep1HSStrideRateM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1 Stride Rate"].ToString());
            lblStep1HSStrideLengthM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1StrideLength"].ToString());
            lblStep1TouchdownDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1TouchdownDistance"].ToString());

            lblStep1KSTouchdownM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1KneeSeperationatTouchdown"].ToString());
            lblStep1TrunkTouchdownAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1TrunkTouchdownAngle"].ToString());
            lblStep1TrunkTakeoffAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1TrunkTakeoffAngle"].ToString());


            lblStep1ULAtFullExtensionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1ULAtFullExtension"].ToString());
            lblStep1LLAtTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1LLAtTakeoff"].ToString());
            lblStep1ULFullFlexionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1ULAtFullFlexion"].ToString());

            lblStep2HSGroundTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2GroundTime"].ToString());
            lblStep2HSAirTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2AirTime"].ToString());
            //lblStep2UlFlexTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2UlFlexTime"].ToString());

            lblStep2HSStrideRateM1.Text = Convert.ToString(ds.Tables[1].Rows[0][" Step2 Stride Rate"].ToString());
            lblStepHS2StrideLengthM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2StrideLength"].ToString());
            lblStep2TouchdownDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2TouchdownDistance"].ToString());

            lblStep2KSAtTouchdownM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2KneeSeperationatTouchdown"].ToString());
            lblStep2TrunkTouchdownAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2TrunkTouchdownAngle"].ToString());
            lblStep2TrunkTakeoffAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2TrunkTakeoffAngle"].ToString());



            lblStep2ULAtFullExtensionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2ULAtFullExtension"].ToString());
            lblStep2LLAtTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2LLAtTakeoff"].ToString());

            lblStep2LLFullAtFlexionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2LLAtFullFlexion"].ToString());
            lblStep2LLAtAngleCrossM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2LLAtatAnkleCross"].ToString());
            lblStep2ULAtFullFlexionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2ULAtFullFlexion"].ToString());

            lblStep3HSGroundTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3GroundTime"].ToString());
            lblStep3HSAirTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3AirTime"].ToString());
            //lblStep3UlFlexTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3UlFlexTime"].ToString());//chk

            lblStep3StrideRateM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3 Stride Rate"].ToString());
            lblStep3StrideLengthM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3StrideLength"].ToString());
            lblStep3TouchdownDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3TouchdownDistance"].ToString());

            lblStep3KSAtTouchdownM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3KneeSeperationatTouchdown"].ToString());
            lblStep3TrunkTouchdownAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3TrunkTouchdownAngle"].ToString());
            lblStep3TrunkTakeoffAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3TrunkTakeoffAngle"].ToString());

            lblStep3ULAtFullExtensionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3ULAtFullExtension"].ToString());
            lblStep3LLAtTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3LLAtTakeoff"].ToString());

            lblStep3LLAtFullFlexionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3LLAtFullFlexion"].ToString());
            lblStep3LLAtAngleCrossM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3LLAtatAnkleCross"].ToString());
            lblStep3ULAtFullFlexionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3ULAtFullFlexion"].ToString());


            lblIntoHurdleTouchdownDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetTouchdownDistanceIntoTheHurdle"].ToString());
            lblIntoHurdleKSTouchdownM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetKneeSeperationatTouchdownIntoTheHurdle"].ToString());
            lblIntoHurdleTrunkTouchdownAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetTrunkTouchdownAngleIntoTheHurdle"].ToString());
            lblIntoHurdleLLTouchdownM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetLLAtTouchdownIntoTheHurdle"].ToString());



            //lblGroundTimeLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTime"].ToString());
            //lblGroundTimeRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTime"].ToString());
            //lblGroundTimeAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTime"].ToString());



        }

        //current data
        if (ds.Tables[3].Rows.Count > 0)
        {
            if (DropDownList3.SelectedValue != "")
            {
                try
                {
                    int movieidF = Convert.ToInt32(DropDownList1.SelectedItem.Value);
                    leftMovie = DataRepository.MovieProvider.GetByMovieId(movieidF);
                    string locationF = sae.SelectLessonlocation(LessonId.ToString());
                    string dateF = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
                    string RightSession = dateF + "-" + locationF;
                    lblRightMovie.Text = RightSession;
                }
                catch { }
            }

            lblHurdleStepBetweenF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetDistanceBetweenHurdleSteps"].ToString());
            lblHurdleStepIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetDistanceIntoHurdleSteps"].ToString());
            lblHurdleStepOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetDistanceOffHurdleSteps"].ToString());


            lblHurdleStepVelocityF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Velocity"].ToString());
            lblStep1HSGroundTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1GroundTime"].ToString());
            lblStep1HSAirTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1AirTime"].ToString());
            //lblStep1UlFlexTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1UlFlexTime"].ToString());


            lblStep1HSStrideRateF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1 Stride Rate"].ToString());
            lblStep1HSStrideLengthF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1StrideLength"].ToString());
            lblStep1TouchdownDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1TouchdownDistance"].ToString());

            lblStep1KSTouchdownF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1KneeSeperationatTouchdown"].ToString());
            lblStep1TrunkTouchdownAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1TrunkTouchdownAngle"].ToString());
            lblStep1TrunkTakeoffAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1TrunkTakeoffAngle"].ToString());



            lblStep1ULAtFullExtensionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1ULAtFullExtension"].ToString());
            lblStep1LLAtTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1LLAtTakeoff"].ToString());
            lblStep1ULFullFlexionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1ULAtFullFlexion"].ToString());



            lblStep2HSGroundTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2GroundTime"].ToString());
            lblStep2HSAirTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2AirTime"].ToString());
            //lblStep2UlFlexTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2UlFlexTime"].ToString());


            lblStep2HSStrideRateF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2 Stride Rate"].ToString());
            lblStep2HSStrideLengthF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2StrideLength"].ToString());
            lblStep2TouchdownDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2TouchdownDistance"].ToString());

            lblStep2KSAtTouchdownF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2KneeSeperationatTouchdown"].ToString());
            lblStep2TrunkTouchdownAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2TrunkTouchdownAngle"].ToString());
            lblStep2TrunkTakeoffAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2TrunkTakeoffAngle"].ToString());


            lblStep2ULAtFullExtensionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2ULAtFullExtension"].ToString());
            lblStep2LLAtTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2LLAtTakeoff"].ToString());


            lblStep2LLAtFullFlexionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2LLAtFullFlexion"].ToString());
            lblStep2LLAtAngleCrossF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2LLAtatAnkleCross"].ToString());
            lblStep2ULAtFullFlexionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2ULAtFullFlexion"].ToString());

            lblStep3HSGroundTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3GroundTime"].ToString());
            lblStep3HSAirTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3AirTime"].ToString());
            //lblStep3UlFlexTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3UlFlexTime"].ToString());

            lblStep3StrideRateF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3 Stride Rate"].ToString());
            lblStep3StrideLengthF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3StrideLength"].ToString());
            lblStep3TouchdownDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3TouchdownDistance"].ToString());


            lblStep3KSAtTouchdownF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3KneeSeperationatTouchdown"].ToString());
            lblStep3TrunkTouchdownAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3TrunkTouchdownAngle"].ToString());
            lblStep3TrunkTakeoffAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3TrunkTakeoffAngle"].ToString());

            lblStep3ULAtFullExtensionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3ULAtFullExtension"].ToString());
            lblStep3LLAtTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3LLAtTakeoff"].ToString());

            lblStep3LLAtFullFlexionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3LLAtFullFlexion"].ToString());
            lblStep3LLAtAngleCrossF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3LLAtatAnkleCross"].ToString());
            lblStep3ULAtFullFlexionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3ULAtFullFlexion"].ToString());


            lblIntoHurdleTouchdownDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetTouchdownDistanceIntoTheHurdle"].ToString());
            lblIntoHurdleKSTouchdownF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetKneeSeperationatTouchdownIntoTheHurdle"].ToString());
            lblStep1TrunkTouchdownAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetTrunkTouchdownAngleIntoTheHurdle"].ToString());
            lblIntoHurdleLLTouchdownF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetLLAtTouchdownIntoTheHurdle"].ToString());




            //lblGroundTimeLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Ground Time Left"].ToString());
            //lblGroundTimeRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Ground Time Right"].ToString());
            //lblGroundTimeAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Ground Time Average"].ToString());


        }

        if (ds.Tables[3].Rows.Count > 0)
        {

            //model_2 data
            lblHurdleStepBetweenM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetDistanceBetweenHurdleSteps"].ToString());
            lblHurdleStepIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetDistanceIntoHurdleSteps"].ToString());
            lblHurdleStepOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetDistanceOffHurdleSteps"].ToString());


            lblHurdleStepVelocityM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Velocity"].ToString());
            lblStep1HSGroundTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1GroundTime"].ToString());
            lblStep1HSAirTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1AirTime"].ToString());
            //lblStep1UlFlexTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1UlFlexTime"].ToString());


            lblStep1HSStrideRateM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1 Stride Rate"].ToString());
            lblStep1HSStrideLengthM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1StrideLength"].ToString());
            lblStep1TouchdownDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1TouchdownDistance"].ToString());

            lblStep1KSTouchdownM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1KneeSeperationatTouchdown"].ToString());
            lblStep1TrunkTouchdownAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1TrunkTouchdownAngle"].ToString());
            lblStep1TrunkTakeoffAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1TrunkTakeoffAngle"].ToString());

            lblStep1ULFullExtensionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1ULAtFullExtension"].ToString());
            lblStep1LLAtTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1LLAtTakeoff"].ToString());
            lblStep1ULFullFlexionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1ULAtFullFlexion"].ToString());



            lblStep2HSGroundTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2GroundTime"].ToString());
            lblStep2HSAirTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2AirTime"].ToString());
            //lblStep2UlFlexTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2UlFlexTime"].ToString());


            lblStep2HSStrideRateM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2 Stride Rate"].ToString());
            lblStep2HSStrideLengthM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2StrideLength"].ToString());
            lblStep2TouchdownDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2TouchdownDistance"].ToString());

            lblStep2KSAtTouchdownM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2KneeSeperationatTouchdown"].ToString());
            lblStep2TrunkTouchdownAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2TrunkTouchdownAngle"].ToString());
            lblStep2TrunkTakeoffAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2TrunkTakeoffAngle"].ToString());

            lblStep2ULAtFullExtensionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2ULAtFullExtension"].ToString());
            lblStep2LLAtTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2LLAtTakeoff"].ToString());


            lblStep2LLAtFullFlexionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2LLAtFullFlexion"].ToString());
            lblStep2LLAtAngleCrossM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2LLAtatAnkleCross"].ToString());
            lblStep2ULAtFullFlexionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2ULAtFullFlexion"].ToString());

            lblStep3HSGroundTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3GroundTime"].ToString());
            lblStep3HSAirTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3AirTime"].ToString());
            //lblStep3UlFlexTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3UlFlexTime"].ToString());

            lblStep3StrideRateM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3 Stride Rate"].ToString());
            lblStep3StrideLengthM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3StrideLength"].ToString());
            lblStep3TouchdownDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3TouchdownDistance"].ToString());


            lblStep3KSAtTouchdownM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3KneeSeperationatTouchdown"].ToString());
            lblStep3TrunkTouchdownAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3TrunkTouchdownAngle"].ToString());
            lblStep3TrunkTakeoffAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3TrunkTakeoffAngle"].ToString());


            lblStep3ULAtFullExtensionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3ULAtFullExtension"].ToString());
            lblStep3LLAtTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3LLAtTakeoff"].ToString());

            lblStep3LLAtFullFlexionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3LLAtFullFlexion"].ToString());
            lblStep3LLAtAngleCrossM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3LLAtatAnkleCross"].ToString());
            lblStep3ULAtFullFlexionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3ULAtFullFlexion"].ToString());


            lblIntoHurdleTouchdownDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetTouchdownDistanceIntoTheHurdle"].ToString());
            lblIntoHurdleKSTouchdownM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetKneeSeperationatTouchdownIntoTheHurdle"].ToString());
            lblIntoHurdleTrunkTouchdownAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetTrunkTouchdownAngleIntoTheHurdle"].ToString());
            lblIntoHurdleLLTouchdownM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetLLAtTouchdownIntoTheHurdle"].ToString());






            //lblGroundTimeLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTime"].ToString());
            //lblGroundTimeRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTime"].ToString());
            //lblGroundTimeAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTime"].ToString());



        }

        //function calls 
        #region[Initial Model Values]

        //StridelengthBtweenHurdle   
        #region[StridelengthBtweenHurdle]
        if (!lblHurdleStepBetweenI.Text.Equals("") && (!lblHurdleStepBetweenM1.Text.Equals("")) && (!lblHurdleStepBetweenI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblHurdleStepIntoI.Text) - Convert.ToSingle(lblHurdleStepBetweenM1.Text)) >= Convert.ToSingle(.06))
                lblHurdleStepBetweenM1.ForeColor = Color.Red;
            else
                lblHurdleStepIntoM1.ForeColor = Color.Black;
        }
        else
        {
            lblHurdleStepBetweenM1.Text = "";
            lblHurdleStepBetweenI.Text = "";
        }
        #endregion

        //StrideLengthIntoHurdle(For Into as mentioned in the Chart)
        #region[StrideLengthIntoHurdle]
        //StrideLengthIntoHurdle(For Into as mentioned in the chart)   lblHurdleStepBetweenI

        if (!lblHurdleStepIntoI.Text.Equals("") && (!lblHurdleStepIntoM1.Text.Equals("")) && (!lblHurdleStepIntoI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblHurdleStepIntoI.Text) - Convert.ToSingle(lblHurdleStepIntoM1.Text)) >= Convert.ToSingle(.06))
                lblHurdleStepIntoM1.ForeColor = Color.Red;
            else
                lblHurdleStepIntoM1.ForeColor = Color.Black;
        }
        else
        {
            lblHurdleStepIntoM1.Text = "";
            lblHurdleStepIntoI.Text = "";
        }
        #endregion

        //StrideLengthOffHurdle(For Off as mentioned in the Chart)
        #region[StrideLengthOffHurdle]
        if (!lblHurdleStepOffI.Text.Equals("") && (!lblHurdleStepOffM1.Text.Equals("")) && (!lblHurdleStepOffI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblHurdleStepOffI.Text) - Convert.ToSingle(lblHurdleStepOffM1.Text)) >= Convert.ToSingle(.06))
                lblHurdleStepOffM1.ForeColor = Color.Red;
            else
                lblHurdleStepOffM1.ForeColor = Color.Black;
        }
        else
        {
            lblHurdleStepOffM1.Text = "";
            lblHurdleStepOffI.Text = "";
        }
        #endregion
        //Velocity     
        #region[Velocity]

        if (!lblHurdleStepVelocityI.Text.Equals("") && (!lblHurdleStepVelocityM1.Text.Equals("")) && (!lblHurdleStepVelocityI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblHurdleStepVelocityI.Text) - Convert.ToSingle(lblHurdleStepVelocityM1.Text) <= Convert.ToSingle(-0.50))
                lblHurdleStepVelocityM1.ForeColor = Color.Red;
            else
                lblHurdleStepVelocityM1.ForeColor = Color.Black;
        }
        else
        {
            lblHurdleStepVelocityM1.Text = "";
            lblHurdleStepVelocityI.Text = "";
        }
        #endregion
        //Ground Time
        #region[Ground Time]
        if (!lblStep1HSGroundTimeI.Text.Equals("") && (!lblStep1HSGroundTimeM1.Text.Equals("")) && (!lblStep1HSGroundTimeI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep1HSGroundTimeI.Text) - Convert.ToSingle(lblStep1HSGroundTimeM1.Text) >= Convert.ToSingle(.007))
                lblStep1HSGroundTimeM1.ForeColor = System.Drawing.Color.Red;
            else
                lblStep1HSGroundTimeM1.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblStep1HSGroundTimeM1.Text = "";
            lblStep1HSGroundTimeI.Text = "";
            //ForeColor = ColorTranslator.FromHtml("#FFFF80");
        }

        if (!lblStep2HSGroundTimeI.Text.Equals("") && (!lblStep2HSGroundTimeM1.Text.Equals("")) && (!lblStep2HSGroundTimeI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep2HSGroundTimeI.Text) - Convert.ToSingle(lblStep2HSGroundTimeM1.Text) >= Convert.ToSingle(.007))
                lblStep2HSGroundTimeM1.ForeColor = System.Drawing.Color.Red;
            else
                lblStep2HSGroundTimeM1.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblStep2HSGroundTimeM1.Text = "";
            lblStep2HSGroundTimeI.Text = "";
            //ForeColor = ColorTranslator.FromHtml("#FFFF80");
        }

        if (!lblStep3HSGroundTimeI.Text.Equals("") && (!lblStep3HSGroundTimeM1.Text.Equals("")) && (!lblStep3HSGroundTimeI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep3HSGroundTimeI.Text) - Convert.ToSingle(lblStep3HSGroundTimeM1.Text) >= Convert.ToSingle(.007))
                lblStep3HSGroundTimeM1.ForeColor = System.Drawing.Color.Red;
            else
                lblStep3HSGroundTimeM1.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblStep3HSGroundTimeM1.Text = "";
            lblStep3HSGroundTimeI.Text = "";
            //ForeColor = ColorTranslator.FromHtml("#FFFF80"); lblStep3HSGroundTimeM1
        }
        #endregion
        //Air time 
        #region[Air Time]
        if (!lblStep1HSAirTimeI.Text.Equals("") && (!lblStep1HSAirTimeM1.Text.Equals("")) && (!lblStep1HSAirTimeI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep1HSAirTimeI.Text) - Convert.ToSingle(lblStep1HSAirTimeM1.Text) >= Convert.ToSingle(.007))
                lblStep1HSAirTimeM1.ForeColor = System.Drawing.Color.Red;
            else
                lblStep1HSAirTimeM1.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblStep1HSAirTimeM1.Text = "";
            lblStep1HSAirTimeI.Text = "";
            //ForeColor = ColorTranslator.FromHtml("#FFFF80");
        }

        if (!lblStep2HSAirTimeI.Text.Equals("") && (!lblStep2HSAirTimeM1.Text.Equals("")) && (!lblStep2HSAirTimeI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep2HSAirTimeI.Text) - Convert.ToSingle(lblStep2HSAirTimeM1.Text) >= Convert.ToSingle(.007))
                lblStep2HSAirTimeM1.ForeColor = System.Drawing.Color.Red;
            else
                lblStep2HSAirTimeM1.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblStep2HSAirTimeM1.Text = "";
            lblStep2HSAirTimeI.Text = "";
            //ForeColor = ColorTranslator.FromHtml("#FFFF80");lblStep3HSAirTimeI
        }

        if (!lblStep3HSAirTimeI.Text.Equals("") && (!lblStep3HSAirTimeM1.Text.Equals("")) && (!lblStep3HSAirTimeI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep3HSAirTimeI.Text) - Convert.ToSingle(lblStep3HSAirTimeM1.Text) >= Convert.ToSingle(.007))
                lblStep3HSAirTimeM1.ForeColor = System.Drawing.Color.Red;
            else
                lblStep3HSAirTimeM1.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblStep3HSAirTimeM1.Text = "";
            lblStep3HSAirTimeI.Text = "";
            //ForeColor = ColorTranslator.FromHtml("#FFFF80");
        }
        #endregion

        // check later

        // TimeToUpperLegFullFlexion(for  UlFlexTime  ) 
        #region[Upper Leg at Full Flexion ]

       // if (!lblStep1UlFlexTimeI.Text.Equals("") && (!lblStep1UlFlexTimeM1.Text.Equals("")) && (!lblStep1UlFlexTimeI.Text.Equals("0.00")))
       // {
       //    if (Convert.ToSingle(lblStep1UlFlexTimeI.Text) - Convert.ToSingle(lblStep1UlFlexTimeM1.Text) <= Convert.ToSingle(-0.01))
       //        lblStep1UlFlexTimeM1.ForeColor = Color.Red;
       //     else
       //         lblStep1UlFlexTimeM1.ForeColor = Color.Black;
       // }
       //else
       // {
       //     lblStep1UlFlexTimeM1.Text = "";
       //    lblStep1UlFlexTimeI.Text = "";
       // }

       // if (!lblStep2UlFlexTimeI.Text.Equals("") && (!lblStep2UlFlexTimeM1.Text.Equals("")) && (!lblStep2UlFlexTimeI.Text.Equals("0.00")))
       // {
       //     if (Convert.ToSingle(lblStep2UlFlexTimeI.Text) - Convert.ToSingle(lblStep2UlFlexTimeM1.Text) <= Convert.ToSingle(-0.01))
       //         lblStep2UlFlexTimeM1.ForeColor = Color.Red;
       //     else
       //         lblStep2UlFlexTimeM1.ForeColor = Color.Black;
       // }
       // else
       // {
       //     lblStep2UlFlexTimeM1.Text = "";
       //     lblStep2UlFlexTimeI.Text = "";
       // }

       // if (!lblStep3UlFlexTimeI.Text.Equals("") && (!lblStep3UlFlexTimeM1.Text.Equals("")) && (!lblStep3UlFlexTimeI.Text.Equals("0.00")))
       // {
       //     if (Convert.ToSingle(lblStep3UlFlexTimeI.Text) - Convert.ToSingle(lblStep3UlFlexTimeM1.Text) <= Convert.ToSingle(-0.01))
       //         lblStep3UlFlexTimeM1.ForeColor = Color.Red;
       //     else
       //         lblStep3UlFlexTimeM1.ForeColor = Color.Black;
       // }
       // else
       // {
       //     lblStep3UlFlexTimeM1.Text = "";
       //     lblStep3UlFlexTimeI.Text = "";
       // }
        #endregion[Upper Leg at Full Flexion ]

        //Stride rate 
        #region[Stride rate]
        if (!lblStep1HSStrideRateI.Text.Equals("") && (!lblStep1HSStrideRateM1.Text.Equals("")) && (!lblStep1HSStrideRateI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep1HSStrideRateI.Text) - Convert.ToSingle(lblStep1HSStrideRateM1.Text)) >= Convert.ToSingle(0.1))
                lblStep1HSStrideRateM1.ForeColor = Color.Red;
            else
                lblStep1HSStrideRateM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1HSStrideRateM1.Text = "";
            lblStep1HSStrideRateI.Text = "";
        }

        if (!lblStep2HSStrideRateI.Text.Equals("") && (!lblStep2HSStrideRateM1.Text.Equals("")) && (!lblStep2HSStrideRateI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep2HSStrideRateI.Text) - Convert.ToSingle(lblStep2HSStrideRateM1.Text)) >= Convert.ToSingle(0.1))
                lblStep2HSStrideRateM1.ForeColor = Color.Red;
            else
                lblStep2HSStrideRateM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2HSStrideRateM1.Text = "";
            lblStep2HSStrideRateI.Text = "";
        }
        //lblStep3StrideRateI lblStep3StrideRateM1
        if (!lblStep3StrideRateI.Text.Equals("") && (!lblStep3StrideRateM1.Text.Equals("")) && (!lblStep3StrideRateI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep3StrideRateI.Text) - Convert.ToSingle(lblStep3StrideRateM1.Text)) >= Convert.ToSingle(0.1))
                lblStep3StrideRateM1.ForeColor = Color.Red;
            else
                lblStep3StrideRateM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep3StrideRateM1.Text = "";
            lblStep3StrideRateI.Text = "";
        }

        #endregion[Stride rate]
        //Stride length  
        #region[Stride length]

        if (!lblStep1StrideLengthI.Text.Equals("") && (!lblStep1StrideLengthM1.Text.Equals("")) && (!lblStep1StrideLengthI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep1StrideLengthI.Text) - Convert.ToSingle(lblStep1StrideLengthM1.Text)) >= Convert.ToSingle(0.1))
                lblStep1StrideLengthM1.ForeColor = Color.Red;
            else
                lblStep1StrideLengthM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1StrideLengthM1.Text = "";
            lblStep1StrideLengthI.Text = "";
        }
        //lblStep2StrideLengthM1
        if (!lblStep2StrideLengthI.Text.Equals("") && (!lblStep2StrideLengthM1.Text.Equals("")) && (!lblStep2StrideLengthI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep2StrideLengthI.Text) - Convert.ToSingle(lblStep2StrideLengthM1.Text)) >= Convert.ToSingle(0.1))
                lblStep2StrideLengthM1.ForeColor = Color.Red;
            else
                lblStep2StrideLengthM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2StrideLengthM1.Text = "";
            lblStep2StrideLengthI.Text = "";
        }

        //lblStep3StrideLengthI lblStep3StrideLengthM1

        if (!lblStep3StrideLengthI.Text.Equals("") && (!lblStep3StrideLengthM1.Text.Equals("")) && (!lblStep3StrideLengthI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep3StrideLengthI.Text) - Convert.ToSingle(lblStep3StrideLengthM1.Text)) >= Convert.ToSingle(0.1))
                lblStep3StrideLengthM1.ForeColor = Color.Red;
            else
                lblStep3StrideLengthM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep3StrideLengthM1.Text = "";
            lblStep3StrideLengthI.Text = "";
        }

        #endregion[Stride length]

        //TouchDownDistance
        #region[TouchDownDistance]//lblStep1TouchdownDistanceI lblStep1TouchdownDistanceM1

        if (!lblStep1TouchdownDistanceI.Text.Equals("") && (!lblStep1TouchdownDistanceM1.Text.Equals("")) && (!lblStep1TouchdownDistanceI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep1TouchdownDistanceI.Text) - Convert.ToSingle(lblStep1TouchdownDistanceM1.Text) >= Convert.ToSingle(.02))
                lblStep1TouchdownDistanceM1.ForeColor = Color.Red;
            else
                lblStep1TouchdownDistanceM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1TouchdownDistanceM1.Text = "";
            lblStep1TouchdownDistanceI.Text = "";
        }
        //lblStep2TouchdownDistanceI lblStep2TouchdownDistanceM1
        if (!lblStep2TouchdownDistanceI.Text.Equals("") && (!lblStep2TouchdownDistanceM1.Text.Equals("")) && (!lblStep2TouchdownDistanceI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep2TouchdownDistanceI.Text) - Convert.ToSingle(lblStep2TouchdownDistanceM1.Text) >= Convert.ToSingle(.02))
                lblStep2TouchdownDistanceM1.ForeColor = Color.Red;
            else
                lblStep2TouchdownDistanceM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2TouchdownDistanceM1.Text = "";
            lblStep2TouchdownDistanceI.Text = "";
        }
        //lblStep3TouchdownDistanceM1
        if (!lblStep3TouchdownDistanceI.Text.Equals("") && (!lblStep3TouchdownDistanceM1.Text.Equals("")) && (!lblStep3TouchdownDistanceI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep3TouchdownDistanceI.Text) - Convert.ToSingle(lblStep3TouchdownDistanceM1.Text) >= Convert.ToSingle(.02))
                lblStep3TouchdownDistanceM1.ForeColor = Color.Red;
            else
                lblStep3TouchdownDistanceM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep3TouchdownDistanceM1.Text = "";
            lblStep3TouchdownDistanceI.Text = "";
        }
        //lblIntoHurdleTouchdownDistanceM1
        if (!lblIntoHurdleTouchdownDistanceI.Text.Equals("") && (!lblIntoHurdleTouchdownDistanceM1.Text.Equals("")) && (!lblIntoHurdleTouchdownDistanceI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblIntoHurdleTouchdownDistanceI.Text) - Convert.ToSingle(lblIntoHurdleTouchdownDistanceM1.Text) >= Convert.ToSingle(.02))
                lblIntoHurdleTouchdownDistanceM1.ForeColor = Color.Red;
            else
                lblIntoHurdleTouchdownDistanceM1.ForeColor = Color.Black;
        }
        else
        {
            lblIntoHurdleTouchdownDistanceM1.Text = "";
            lblIntoHurdleTouchdownDistanceI.Text = "";
        }
        #endregion[TouchDownDistance]

        //TouchDownKneeSeperation   
        #region[TouchDownKneeSeperation]

        if (!lblStep1KSTouchdownI.Text.Equals("") && (!lblStep1KSTouchdownM1.Text.Equals("")) && (!lblStep1KSTouchdownI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep1KSTouchdownI.Text) - Convert.ToSingle(lblStep1KSTouchdownM1.Text) >= Convert.ToSingle(.02))
                lblStep1KSTouchdownM1.ForeColor = Color.Red;
            else
                lblStep1KSTouchdownM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1KSTouchdownM1.Text = "";
            lblStep1KSTouchdownI.Text = "";
        }
        //lblStep2KSTouchdownM1  lblStep2KSAtTouchdownM1
        if (!lblStep2KSAtTouchdownI.Text.Equals("") && (!lblStep2KSAtTouchdownM1.Text.Equals("")) && (!lblStep2KSAtTouchdownI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep2KSAtTouchdownI.Text) - Convert.ToSingle(lblStep2KSAtTouchdownM1.Text) >= Convert.ToSingle(.02))
                lblStep2KSAtTouchdownM1.ForeColor = Color.Red;
            else
                lblStep2KSAtTouchdownM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2KSAtTouchdownM1.Text = "";
            lblStep2KSAtTouchdownI.Text = "";
        }
        //lblStep3KSAtTouchdownM1 lblStep3KSAtTouchdownI
        if (!lblStep3KSAtTouchdownI.Text.Equals("") && (!lblStep3KSAtTouchdownM1.Text.Equals("")) && (!lblStep3KSAtTouchdownI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep3KSAtTouchdownI.Text) - Convert.ToSingle(lblStep3KSAtTouchdownM1.Text) >= Convert.ToSingle(.02))
                lblStep3KSAtTouchdownM1.ForeColor = Color.Red;
            else
                lblStep3KSAtTouchdownM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep3KSAtTouchdownM1.Text = "";
            lblStep3KSAtTouchdownI.Text = "";
        }
        //lblIntoHurdleKSTouchdownI lblIntoHurdleKSTouchdownM1 lblIntoHurdleKSTouchdownF
        if (!lblIntoHurdleKSTouchdownI.Text.Equals("") && (!lblIntoHurdleKSTouchdownM1.Text.Equals("")) && (!lblIntoHurdleKSTouchdownI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblIntoHurdleKSTouchdownI.Text) - Convert.ToSingle(lblIntoHurdleKSTouchdownM1.Text) >= Convert.ToSingle(.02))
                lblIntoHurdleKSTouchdownM1.ForeColor = Color.Red;
            else
                lblIntoHurdleKSTouchdownM1.ForeColor = Color.Black;
        }
        else
        {
            lblIntoHurdleKSTouchdownM1.Text = "";
            lblIntoHurdleKSTouchdownI.Text = "";
        }

        #endregion

        //TrunkTouchdownAngle
        #region[TrunkTouchdownAngle]

        //TrunkTouchdownAngle

        if (!lblStep1TrunkTouchdownAngleI.Text.Equals("") && (!lblStep1TrunkTouchdownAngleM1.Text.Equals("")) && (!lblStep1TrunkTouchdownAngleI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep1TrunkTouchdownAngleI.Text) - Convert.ToInt16(lblStep1TrunkTouchdownAngleM1.Text)) <= Convert.ToInt16(7))
                lblStep1TrunkTouchdownAngleM1.ForeColor = Color.Red;
            else
                lblStep1TrunkTouchdownAngleM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1TrunkTouchdownAngleM1.Text = "";
            lblStep1TrunkTouchdownAngleI.Text = "";
        }

        if (!lblStep2TrunkTouchdownAngleI.Text.Equals("") && (!lblStep2TrunkTouchdownAngleM1.Text.Equals("")) && (!lblStep2TrunkTouchdownAngleI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep2TrunkTouchdownAngleI.Text) - Convert.ToInt16(lblStep2TrunkTouchdownAngleM1.Text)) <= Convert.ToInt16(7))
                lblStep2TrunkTouchdownAngleM1.ForeColor = Color.Red;
            else
                lblStep2TrunkTouchdownAngleM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2TrunkTouchdownAngleM1.Text = "";
            lblStep2TrunkTouchdownAngleI.Text = "";
        }

        if (!lblStep3TrunkTouchdownAngleI.Text.Equals("") && (!lblStep3TrunkTouchdownAngleM1.Text.Equals("")) && (!lblStep3TrunkTouchdownAngleI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep3TrunkTouchdownAngleI.Text) - Convert.ToInt16(lblStep3TrunkTouchdownAngleM1.Text)) <= Convert.ToInt16(7))
                lblStep3TrunkTouchdownAngleM1.ForeColor = Color.Red;
            else
                lblStep3TrunkTouchdownAngleM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep3TrunkTouchdownAngleM1.Text = "";
            lblStep3TrunkTouchdownAngleI.Text = "";
        }

        if (!lblIntoHurdleTrunkTouchdownAngleI.Text.Equals("") && (!lblIntoHurdleTrunkTouchdownAngleM1.Text.Equals("")) && (!lblIntoHurdleTrunkTouchdownAngleI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblIntoHurdleTrunkTouchdownAngleI.Text) - Convert.ToInt16(lblIntoHurdleTrunkTouchdownAngleM1.Text)) <= Convert.ToInt16(7))
                lblIntoHurdleTrunkTouchdownAngleM1.ForeColor = Color.Red;
            else
                lblIntoHurdleTrunkTouchdownAngleM1.ForeColor = Color.Black;
        }
        else
        {
            lblIntoHurdleTrunkTouchdownAngleM1.Text = "";
            lblIntoHurdleTrunkTouchdownAngleI.Text = "";
        }


        #endregion

        //TrunkOffAngle 
        #region[TrunkOffAngle]
        if (!lblStep1TrunkTakeoffAngleI.Text.Equals("") && (!lblStep1TrunkTakeoffAngleM1.Text.Equals("")) && (!lblStep1TrunkTakeoffAngleI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep1TrunkTakeoffAngleI.Text) - Convert.ToInt16(lblStep1TrunkTakeoffAngleM1.Text)) <= Convert.ToInt16(7))
                lblStep1TrunkTakeoffAngleM1.ForeColor = Color.Red;
            else
                lblStep1TrunkTakeoffAngleM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1TrunkTakeoffAngleM1.Text = "";
            lblStep1TrunkTakeoffAngleI.Text = "";
        }

        if (!lblStep2TrunkTakeoffAngleI.Text.Equals("") && (!lblStep2TrunkTakeoffAngleM1.Text.Equals("")) && (!lblStep2TrunkTakeoffAngleI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep2TrunkTakeoffAngleI.Text) - Convert.ToInt16(lblStep2TrunkTakeoffAngleM1.Text)) <= Convert.ToInt16(7))
                lblStep2TrunkTakeoffAngleM1.ForeColor = Color.Red;
            else
                lblStep2TrunkTakeoffAngleM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2TrunkTakeoffAngleM1.Text = "";
            lblStep2TrunkTakeoffAngleI.Text = "";
        }

        if (!lblStep3TrunkTakeoffAngleI.Text.Equals("") && (!lblStep3TrunkTakeoffAngleM1.Text.Equals("")) && (!lblStep3TrunkTakeoffAngleI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep3TrunkTakeoffAngleI.Text) - Convert.ToInt16(lblStep3TrunkTakeoffAngleM1.Text)) <= Convert.ToInt16(7))
                lblStep3TrunkTakeoffAngleM1.ForeColor = Color.Red;
            else
                lblStep3TrunkTakeoffAngleM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep3TrunkTakeoffAngleM1.Text = "";
            lblStep3TrunkTakeoffAngleI.Text = "";
        }
        #endregion

        //UpperLegFullExtension
        #region[UpperLegFullExtension]
        //lblStep1ULFullExtensionI  lblStep1ULAtFullExtensionM1

        if (!lblStep1ULFullExtensionI.Text.Equals("") && (!lblStep1ULAtFullExtensionM1.Text.Equals("")) && (!lblStep1ULFullExtensionI.Text.Equals("0.00")))
        {
            if (Convert.ToInt16(lblStep1ULFullExtensionI.Text) - Convert.ToInt16(lblStep1ULAtFullExtensionM1.Text) <= Convert.ToInt16(-7))
                lblStep1ULAtFullExtensionM1.ForeColor = Color.Red;
            else
                lblStep1ULAtFullExtensionM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1ULAtFullExtensionM1.Text = "";
            lblStep1ULFullExtensionI.Text = "";
        }
        //lblStep2ULAtFullExtensionM1 lblStep2ULAtFullExtensionI
        if (!lblStep2ULAtFullExtensionI.Text.Equals("") && (!lblStep2ULAtFullExtensionM1.Text.Equals("")) && (!lblStep2ULAtFullExtensionI.Text.Equals("0.00")))
        {
            if (Convert.ToInt16(lblStep2ULAtFullExtensionI.Text) - Convert.ToInt16(lblStep2ULAtFullExtensionM1.Text) <= Convert.ToInt16(-7))
                lblStep2ULAtFullExtensionM1.ForeColor = Color.Red;
            else
                lblStep2ULAtFullExtensionM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2ULAtFullExtensionM1.Text = "";
            lblStep2ULAtFullExtensionI.Text = "";
        }
        // lblStep3ULAtFullExtensionI  lblStep3ULAtFullExtensionM1

        if (!lblStep3ULAtFullExtensionI.Text.Equals("") && (!lblStep3ULAtFullExtensionM1.Text.Equals("")) && (!lblStep3ULAtFullExtensionI.Text.Equals("0.00")))
        {
            if (Convert.ToInt16(lblStep3ULAtFullExtensionI.Text) - Convert.ToInt16(lblStep3ULAtFullExtensionM1.Text) <= Convert.ToInt16(-7))
                lblStep3ULAtFullExtensionM1.ForeColor = Color.Red;
            else
                lblStep3ULAtFullExtensionM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep3ULAtFullExtensionM1.Text = "";
            lblStep3ULAtFullExtensionI.Text = "";
        }
        #endregion
        //LowerLegAngleAtTakeOf(For Lower Leg at Takeoff )
        #region[LowerLegAngleAtTakeOf]


        if (!lblStep1LLAtTakeoffI.Text.Equals("") && (!lblStep1LLAtTakeoffM1.Text.Equals("")) && (!lblStep1LLAtTakeoffI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep1LLAtTakeoffI.Text) - Convert.ToSingle(lblStep1LLAtTakeoffM1.Text) >= Convert.ToInt16(7))
                lblStep1LLAtTakeoffM1.ForeColor = Color.Red;
            else
                lblStep1LLAtTakeoffM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1LLAtTakeoffM1.Text = "";
            lblStep1LLAtTakeoffI.Text = "";
        }
        //lblStep2LLAtTakeoffI
        if (!lblStep2LLAtTakeoffI.Text.Equals("") && (!lblStep2LLAtTakeoffM1.Text.Equals("")) && (!lblStep2LLAtTakeoffI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep2LLAtTakeoffI.Text) - Convert.ToSingle(lblStep2LLAtTakeoffM1.Text) >= Convert.ToInt16(7))
                lblStep2LLAtTakeoffM1.ForeColor = Color.Red;
            else
                lblStep2LLAtTakeoffM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2LLAtTakeoffM1.Text = "";
            lblStep2LLAtTakeoffI.Text = "";
        }

        //lblStep3LLAtTakeoffI lblStep3LLAtTakeoffM1
        if (!lblStep3LLAtTakeoffI.Text.Equals("") && (!lblStep3LLAtTakeoffM1.Text.Equals("")) && (!lblStep3LLAtTakeoffI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep3LLAtTakeoffI.Text) - Convert.ToSingle(lblStep3LLAtTakeoffM1.Text) >= Convert.ToInt16(7))
                lblStep3LLAtTakeoffM1.ForeColor = Color.Red;
            else
                lblStep3LLAtTakeoffM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep3LLAtTakeoffM1.Text = "";
            lblStep3LLAtTakeoffI.Text = "";
        }

        #endregion
        //LowerLegFullFlexionAngle  
        #region[LowerLegFullFlexionAngle]
        //lblStep2LLFullAtFlexionM1  lblStep2LLAtFullFlexionI

        if (!lblStep2LLAtFullFlexionI.Text.Equals("") && (!lblStep2LLFullAtFlexionM1.Text.Equals("")) && (!lblStep2LLAtFullFlexionI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep2LLAtFullFlexionI.Text) - Convert.ToInt16(lblStep2LLFullAtFlexionM1.Text)) >= Convert.ToInt16(7))
                lblStep2LLFullAtFlexionM1.ForeColor = Color.Red;
            else
                lblStep2LLFullAtFlexionM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2LLFullAtFlexionM1.Text = "";
            lblStep2LLAtFullFlexionI.Text = "";
        }
        //lblStep3LLAtFullFlexionI lblStep3LLAtFullFlexionM1

        if (!lblStep3LLAtFullFlexionI.Text.Equals("") && (!lblStep3LLAtFullFlexionM1.Text.Equals("")) && (!lblStep3LLAtFullFlexionI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep3LLAtFullFlexionI.Text) - Convert.ToInt16(lblStep3LLAtFullFlexionM1.Text)) >= Convert.ToInt16(7))
                lblStep3LLAtFullFlexionM1.ForeColor = Color.Red;
            else
                lblStep3LLAtFullFlexionM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep3LLAtFullFlexionM1.Text = "";
            lblStep3LLAtFullFlexionI.Text = "";
        }

        #endregion
        //LowerLegAnkleCrossAngle
        #region[LowerLegAnkleCrossAngle]

        //LowerLegAnkleCrossAngle    lblStep2LLAtAngleCrossI   lblStep2LLAtAngleCrossM1

        if (!lblStep2LLAtAngleCrossI.Text.Equals("") && (!lblStep2LLAtAngleCrossM1.Text.Equals("")) && (!lblStep2LLAtAngleCrossI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep2LLAtAngleCrossI.Text) - Convert.ToInt16(lblStep2LLAtAngleCrossM1.Text)) >= Convert.ToInt16(7))
                lblStep2LLAtAngleCrossM1.ForeColor = Color.Red;
            else
                lblStep2LLAtAngleCrossM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2LLAtAngleCrossM1.Text = "";
            lblStep2LLAtAngleCrossI.Text = "";
        }

        if (!lblStep3LLAtAngleCrossI.Text.Equals("") && (!lblStep3LLAtAngleCrossM1.Text.Equals("")) && (!lblStep3LLAtAngleCrossI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep3LLAtAngleCrossI.Text) - Convert.ToInt16(lblStep3LLAtAngleCrossM1.Text)) >= Convert.ToInt16(7))
                lblStep3LLAtAngleCrossM1.ForeColor = Color.Red;
            else
                lblStep3LLAtAngleCrossM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep3LLAtAngleCrossM1.Text = "";
            lblStep3LLAtAngleCrossI.Text = "";
        }

        #endregion
        //UpperLegFullFlexionAngle 
        #region[UpperLegFullFlexionAngle]

        //UpperLegFullFlexionAngle    //lblStep2ULAtFullFlexionM1 lblStep2ULAtFullAtFlexionM1

        if (!lblStep1ULFullFlexionI.Text.Equals("") && (!lblStep1ULFullFlexionM1.Text.Equals("")) && (!lblStep1ULFullFlexionI.Text.Equals("0.00")))
        {
            if (Convert.ToInt16(lblStep1ULFullFlexionI.Text) - Convert.ToInt16(lblStep1ULFullFlexionM1.Text) <= Convert.ToInt16(-7))
                lblStep1ULFullFlexionM1.ForeColor = Color.Red;
            else
                lblStep1ULFullFlexionM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1ULFullFlexionM1.Text = "";
            lblStep1ULFullFlexionI.Text = "";
        }
        //lblStep2ULAtFullFlexionM1 lblStep2ULAtFullFlexionI
        if (!lblStep2ULAtFullFlexionI.Text.Equals("") && (!lblStep2ULAtFullFlexionM1.Text.Equals("")) && (!lblStep2ULAtFullFlexionI.Text.Equals("0.00")))
        {
            if (Convert.ToInt16(lblStep2ULAtFullFlexionI.Text) - Convert.ToInt16(lblStep2ULAtFullFlexionM1.Text) <= Convert.ToInt16(-7))
                lblStep2ULAtFullFlexionM1.ForeColor = Color.Red;
            else
                lblStep2ULAtFullFlexionM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2ULAtFullFlexionM1.Text = "";
            lblStep2ULAtFullFlexionI.Text = "";
        }
        //lblStep3ULAtFullFlexionM1    lblStep3ULAtFullFlexionI.Text 
        if (!lblStep3ULAtFullFlexionI.Text.Equals("") && (!lblStep3ULAtFullFlexionM1.Text.Equals("")) && (!lblStep3ULAtFullFlexionI.Text.Equals("0.00")))
        {
            if (Convert.ToInt16(lblStep3ULAtFullFlexionI.Text) - Convert.ToInt16(lblStep3ULAtFullFlexionM1.Text) <= Convert.ToInt16(-7))
                lblStep3ULAtFullFlexionM1.ForeColor = Color.Red;
            else
                lblStep3ULAtFullFlexionM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep3ULAtFullFlexionM1.Text = "";
            lblStep3ULAtFullFlexionI.Text = "";
        }

        #endregion

        #region[LowerLegAngleAtTouchDownIntoHurdle]

        //LowerLegAngleAtTouchDownIntoHurdle   
        if (!lblIntoHurdleLLTouchdownI.Text.Equals("") && (!lblIntoHurdleLLTouchdownM1.Text.Equals("")) && (!lblIntoHurdleLLTouchdownI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblIntoHurdleLLTouchdownI.Text) - Convert.ToInt16(lblIntoHurdleLLTouchdownM1.Text)) >= Convert.ToInt16(7))
                lblIntoHurdleLLTouchdownM1.ForeColor = Color.Red;
            else
                lblIntoHurdleLLTouchdownM1.ForeColor = Color.Black;
        }
        else
        {
            lblIntoHurdleLLTouchdownM1.Text = "";
            lblIntoHurdleLLTouchdownI.Text = "";
        }
        #endregion

        #endregion[initial model values]

        // #endregion[Initial Model Values]

        //for model_2 data
        #region[Final Model Values]


        //StrideLengthIntoHurdle (For Into as mentioned in the Chart)

        if (!lblHurdleStepIntoF.Text.Equals("") && (!lblHurdleStepIntoM2.Text.Equals("")) && (!lblHurdleStepIntoF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblHurdleStepIntoF.Text) - Convert.ToSingle(lblHurdleStepIntoM2.Text)) >= Convert.ToSingle(.06))
                lblHurdleStepIntoM2.ForeColor = Color.Red;
            else
                lblHurdleStepIntoM2.ForeColor = Color.Black;
        }
        else
        {
            lblHurdleStepIntoM2.Text = "";
            lblHurdleStepIntoF.Text = "";
        }

        //StrideLengthOffHurdle

        if (!lblHurdleStepOffF.Text.Equals("") && (!lblHurdleStepOffM2.Text.Equals("")) && (!lblHurdleStepOffF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblHurdleStepOffF.Text) - Convert.ToSingle(lblHurdleStepOffM2.Text)) >= Convert.ToSingle(.06))
                lblHurdleStepOffM2.ForeColor = Color.Red;
            else
                lblHurdleStepOffM2.ForeColor = Color.Black;
        }
        else
        {
            lblHurdleStepOffM2.Text = "";
            lblHurdleStepOffF.Text = "";
        }

        //Velocity     

        if (!lblHurdleStepVelocityF.Text.Equals("") && (!lblHurdleStepVelocityM2.Text.Equals("")) && (!lblHurdleStepVelocityF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblHurdleStepVelocityF.Text) - Convert.ToSingle(lblHurdleStepVelocityM2.Text) <= Convert.ToSingle(-0.50))
                lblHurdleStepVelocityM2.ForeColor = Color.Red;
            else
                lblHurdleStepVelocityM2.ForeColor = Color.Black;
        }
        else
        {
            lblHurdleStepVelocityM2.Text = "";
            lblHurdleStepVelocityF.Text = "";
        }

        //Ground Time

        if (!lblStep1HSGroundTimeF.Text.Equals("") && (!lblStep1HSGroundTimeM2.Text.Equals("")) && (!lblStep1HSGroundTimeF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep1HSGroundTimeF.Text) - Convert.ToSingle(lblStep1HSGroundTimeM2.Text) >= Convert.ToSingle(.007))
                lblStep1HSGroundTimeM2.ForeColor = System.Drawing.Color.Red;
            else
                lblStep1HSGroundTimeM2.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblStep1HSGroundTimeM2.Text = "";
            lblStep1HSGroundTimeF.Text = "";
            //ForeColor = ColorTranslator.FromHtml("#FFFF80");
        }

        if (!lblStep2HSGroundTimeF.Text.Equals("") && (!lblStep2HSGroundTimeM2.Text.Equals("")) && (!lblStep2HSGroundTimeF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep2HSGroundTimeF.Text) - Convert.ToSingle(lblStep2HSGroundTimeM2.Text) >= Convert.ToSingle(.007))
                lblStep2HSGroundTimeM2.ForeColor = System.Drawing.Color.Red;
            else
                lblStep2HSGroundTimeM2.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblStep2HSGroundTimeM2.Text = "";
            lblStep2HSGroundTimeF.Text = "";
            //ForeColor = ColorTranslator.FromHtml("#FFFF80");
        }

        if (!lblStep3HSGroundTimeF.Text.Equals("") && (!lblStep3HSGroundTimeM2.Text.Equals("")) && (!lblStep3HSGroundTimeF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep3HSGroundTimeF.Text) - Convert.ToSingle(lblStep3HSGroundTimeM2.Text) >= Convert.ToSingle(.007))
                lblStep3HSGroundTimeM2.ForeColor = System.Drawing.Color.Red;
            else
                lblStep3HSGroundTimeM2.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblStep3HSGroundTimeM2.Text = "";
            lblStep3HSGroundTimeF.Text = "";
            //ForeColor = ColorTranslator.FromHtml("#FFFF80");
        }

        //Air time 

        if (!lblStep1HSAirTimeF.Text.Equals("") && (!lblStep1HSAirTimeM2.Text.Equals("")) && (!lblStep1HSAirTimeF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep1HSAirTimeF.Text) - Convert.ToSingle(lblStep1HSAirTimeM2.Text) >= Convert.ToSingle(.007))
                lblStep1HSAirTimeM2.ForeColor = System.Drawing.Color.Red;
            else
                lblStep1HSAirTimeM2.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblStep1HSAirTimeM2.Text = "";
            lblStep1HSAirTimeF.Text = "";
            //ForeColor = ColorTranslator.FromHtml("#FFFF80");
        }

        if (!lblStep2HSAirTimeF.Text.Equals("") && (!lblStep2HSAirTimeM2.Text.Equals("")) && (!lblStep2HSAirTimeF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep2HSAirTimeF.Text) - Convert.ToSingle(lblStep2HSAirTimeM2.Text) >= Convert.ToSingle(.007))
                lblStep2HSAirTimeM2.ForeColor = System.Drawing.Color.Red;
            else
                lblStep2HSAirTimeM2.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblStep2HSAirTimeM2.Text = "";
            lblStep2HSAirTimeF.Text = "";
            //ForeColor = ColorTranslator.FromHtml("#FFFF80");
        }

        if (!lblStep3HSAirTimeF.Text.Equals("") && (!lblStep3HSAirTimeM2.Text.Equals("")) && (!lblStep3HSAirTimeF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep3HSAirTimeF.Text) - Convert.ToSingle(lblStep3HSAirTimeM2.Text) >= Convert.ToSingle(.007))
                lblStep3HSAirTimeM2.ForeColor = System.Drawing.Color.Red;
            else
                lblStep3HSAirTimeM2.ForeColor = System.Drawing.Color.Black;
        }
        else
        {
            lblStep3HSAirTimeM2.Text = "";
            lblStep3HSAirTimeF.Text = "";
            //ForeColor = ColorTranslator.FromHtml("#FFFF80");
        }

        // TimeToUpperLegFullFlexion(for  UlFlexTime  ) 

       // if (!lblStep1UlFlexTimeF.Text.Equals("") && (!lblStep1UlFlexTimeM2.Text.Equals("")) && (!lblStep1UlFlexTimeF.Text.Equals("0.00")))
       // {
       //     if (Convert.ToSingle(lblStep1UlFlexTimeF.Text) - Convert.ToSingle(lblStep1UlFlexTimeM2.Text) <= Convert.ToSingle(-0.01))
       //         lblStep1UlFlexTimeM2.ForeColor = Color.Red;
       //     else
       //         lblStep1UlFlexTimeM2.ForeColor = Color.Black;
       // }
       // else
       // {
       //     lblStep1UlFlexTimeM2.Text = "";
       //     lblStep1UlFlexTimeF.Text = "";
       // }

       // if (!lblStep2UlFlexTimeF.Text.Equals("") && (!lblStep2UlFlexTimeM2.Text.Equals("")) && (!lblStep2UlFlexTimeF.Text.Equals("0.00")))
       // {
       //     if (Convert.ToSingle(lblStep2UlFlexTimeF.Text) - Convert.ToSingle(lblStep2UlFlexTimeM2.Text) <= Convert.ToSingle(-0.01))
       //         lblStep2UlFlexTimeM2.ForeColor = Color.Red;
       //     else
       //         lblStep2UlFlexTimeM2.ForeColor = Color.Black;
       // }
       // else
       // {
       //     lblStep2UlFlexTimeM2.Text = "";
       //     lblStep2UlFlexTimeF.Text = "";
       // }

       // if (!lblStep3UlFlexTimeF.Text.Equals("") && (!lblStep3UlFlexTimeM2.Text.Equals("")) && (!lblStep3UlFlexTimeF.Text.Equals("0.00")))
       // {
       //     if (Convert.ToSingle(lblStep3UlFlexTimeF.Text) - Convert.ToSingle(lblStep3UlFlexTimeM2.Text) <= Convert.ToSingle(-0.01))
       //         lblStep3UlFlexTimeM2.ForeColor = Color.Red;
       //     else
       //         lblStep3UlFlexTimeM2.ForeColor = Color.Black;
       // }
       // else
       // {
       //     lblStep3UlFlexTimeM2.Text = "";
       //     lblStep3UlFlexTimeF.Text = "";
       // }

        //Stride rate

        if (!lblStep1HSStrideRateF.Text.Equals("") && (!lblStep1HSStrideRateM2.Text.Equals("")) && (!lblStep1HSStrideRateF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep1HSStrideRateF.Text) - Convert.ToSingle(lblStep1HSStrideRateM2.Text)) >= Convert.ToSingle(0.1))
                lblStep1HSStrideRateM2.ForeColor = Color.Red;
            else
                lblStep1HSStrideRateM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1HSStrideRateM2.Text = "";
            lblStep1HSStrideRateF.Text = "";
        }

        if (!lblStep2HSStrideRateF.Text.Equals("") && (!lblStep2HSStrideRateM2.Text.Equals("")) && (!lblStep2HSStrideRateF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep2HSStrideRateF.Text) - Convert.ToSingle(lblStep2HSStrideRateM2.Text)) >= Convert.ToSingle(0.1))
                lblStep2HSStrideRateM2.ForeColor = Color.Red;
            else
                lblStep2HSStrideRateM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2HSStrideRateM2.Text = "";
            lblStep2HSStrideRateF.Text = "";
        }

        if (!lblStep3StrideRateF.Text.Equals("") && (!lblStep3StrideRateM2.Text.Equals("")) && (!lblStep3StrideRateF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep3StrideRateF.Text) - Convert.ToSingle(lblStep3StrideRateM2.Text)) >= Convert.ToSingle(0.1))
                lblStep3StrideRateM2.ForeColor = Color.Red;
            else
                lblStep3StrideRateM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep3StrideRateM2.Text = "";
            lblStep3StrideRateF.Text = "";
        }

        //Stride Length

        if (!lblStep1StrideLengthF.Text.Equals("") && (!lblStep3StrideLengthM2.Text.Equals("")) && (!lblStep1StrideLengthF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep1StrideLengthF.Text) - Convert.ToSingle(lblStep1StrideLengthM2.Text)) >= Convert.ToSingle(0.1))
                lblStep3StrideLengthM2.ForeColor = Color.Red;
            else
                lblStep3StrideLengthM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1StrideLengthM2.Text = "";
            lblStep1StrideLengthF.Text = "";
        }

        if (!lblStep2StrideLengthF.Text.Equals("") && (!lblStep2StrideLengthM2.Text.Equals("")) && (!lblStep2StrideLengthF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep2StrideLengthF.Text) - Convert.ToSingle(lblStep2StrideLengthM2.Text)) >= Convert.ToSingle(0.1))
                lblStep2StrideLengthM2.ForeColor = Color.Red;
            else
                lblStep2StrideLengthM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2StrideLengthM2.Text = "";
            lblStep2StrideLengthF.Text = "";
        }

        if (!lblStep3StrideLengthF.Text.Equals("") && (!lblStep3StrideLengthM2.Text.Equals("")) && (!lblStep3StrideLengthF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep3StrideLengthF.Text) - Convert.ToSingle(lblStep3StrideLengthM2.Text)) >= Convert.ToSingle(0.1))
                lblStep3StrideLengthM2.ForeColor = Color.Red;
            else
                lblStep3StrideLengthM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep3StrideLengthM2.Text = "";
            lblStep3StrideLengthF.Text = "";
        }

        //TouchDownDistance

        if (!lblStep1TouchdownDistanceF.Text.Equals("") && (!lblStep1TouchdownDistanceM2.Text.Equals("")) && (!lblStep1TouchdownDistanceF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep1TouchdownDistanceF.Text) - Convert.ToSingle(lblStep1TouchdownDistanceM2.Text) >= Convert.ToSingle(.02))
                lblStep1TouchdownDistanceM2.ForeColor = Color.Red;
            else
                lblStep1TouchdownDistanceM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1TouchdownDistanceM2.Text = "";
            lblStep1TouchdownDistanceF.Text = "";
        }

        if (!lblStep2TouchdownDistanceF.Text.Equals("") && (!lblStep2TouchdownDistanceM2.Text.Equals("")) && (!lblStep2TouchdownDistanceF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep2TouchdownDistanceF.Text) - Convert.ToSingle(lblStep2TouchdownDistanceM2.Text) >= Convert.ToSingle(.02))
                lblStep2TouchdownDistanceM2.ForeColor = Color.Red;
            else
                lblStep2TouchdownDistanceM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2TouchdownDistanceM2.Text = "";
            lblStep2TouchdownDistanceF.Text = "";
        }

        if (!lblStep3TouchdownDistanceF.Text.Equals("") && (!lblStep3TouchdownDistanceM2.Text.Equals("")) && (!lblStep3TouchdownDistanceF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep3TouchdownDistanceF.Text) - Convert.ToSingle(lblStep3TouchdownDistanceM2.Text) >= Convert.ToSingle(.02))
                lblStep3TouchdownDistanceM2.ForeColor = Color.Red;
            else
                lblStep3TouchdownDistanceM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep3TouchdownDistanceM2.Text = "";
            lblStep3TouchdownDistanceF.Text = "";
        }

        if (!lblIntoHurdleTouchdownDistanceF.Text.Equals("") && (!lblIntoHurdleTouchdownDistanceM2.Text.Equals("")) && (!lblIntoHurdleTouchdownDistanceF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblIntoHurdleTouchdownDistanceF.Text) - Convert.ToSingle(lblIntoHurdleTouchdownDistanceM2.Text) >= Convert.ToSingle(.02))
                lblIntoHurdleTouchdownDistanceM2.ForeColor = Color.Red;
            else
                lblIntoHurdleTouchdownDistanceM2.ForeColor = Color.Black;
        }
        else
        {
            lblIntoHurdleTouchdownDistanceM2.Text = "";
            lblIntoHurdleTouchdownDistanceF.Text = "";
        }
        //TouchDownKneeSeperation

        if (!lblStep1KSTouchdownF.Text.Equals("") && (!lblStep1KSTouchdownM2.Text.Equals("")) && (!lblStep1KSTouchdownF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep1KSTouchdownF.Text) - Convert.ToSingle(lblStep1KSTouchdownM2.Text) >= Convert.ToSingle(.02))
                lblStep1KSTouchdownM2.ForeColor = Color.Red;
            else
                lblStep1KSTouchdownM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1KSTouchdownM2.Text = "";
            lblStep1KSTouchdownF.Text = "";
        }

        if (!lblStep2KSAtTouchdownF.Text.Equals("") && (!lblStep2KSAtTouchdownM2.Text.Equals("")) && (!lblStep2KSAtTouchdownF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep2KSAtTouchdownF.Text) - Convert.ToSingle(lblStep2KSAtTouchdownM2.Text) >= Convert.ToSingle(.02))
                lblStep2KSAtTouchdownM2.ForeColor = Color.Red;
            else
                lblStep2KSAtTouchdownM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2KSAtTouchdownM2.Text = "";
            lblStep2KSAtTouchdownF.Text = "";
        }

        if (!lblStep3KSAtTouchdownF.Text.Equals("") && (!lblStep3KSAtTouchdownM2.Text.Equals("")) && (!lblStep3KSAtTouchdownF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep3KSAtTouchdownF.Text) - Convert.ToSingle(lblStep3KSAtTouchdownM2.Text) >= Convert.ToSingle(.02))
                lblStep3KSAtTouchdownM2.ForeColor = Color.Red;
            else
                lblStep3KSAtTouchdownM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep3KSAtTouchdownM2.Text = "";
            lblStep3KSAtTouchdownF.Text = "";
        }

        if (!lblIntoHurdleKSTouchdownF.Text.Equals("") && (!lblIntoHurdleKSTouchdownM2.Text.Equals("")) && (!lblIntoHurdleKSTouchdownF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblIntoHurdleKSTouchdownF.Text) - Convert.ToSingle(lblIntoHurdleKSTouchdownM2.Text) >= Convert.ToSingle(.02))
                lblIntoHurdleKSTouchdownM2.ForeColor = Color.Red;
            else
                lblIntoHurdleKSTouchdownM2.ForeColor = Color.Black;
        }
        else
        {
            lblIntoHurdleKSTouchdownM2.Text = "";
            lblIntoHurdleKSTouchdownF.Text = "";
        }


        //TrunkTouchdownAngle
        #region[TrunkTouchdownAngle]

        //TrunkTouchdownAngle lblStep1TrunkTouchdownAngleI

        if (!lblStep1TrunkTouchdownAngleF.Text.Equals("") && (!lblStep1TrunkTouchdownAngleM2.Text.Equals("")) && (!lblStep1TrunkTouchdownAngleF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep1TrunkTouchdownAngleF.Text) - Convert.ToInt16(lblStep1TrunkTouchdownAngleM2.Text)) <= Convert.ToInt16(7))
                lblStep1TrunkTouchdownAngleM2.ForeColor = Color.Red;
            else
                lblStep1TrunkTouchdownAngleM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1TrunkTouchdownAngleM2.Text = "";
            lblStep1TrunkTouchdownAngleF.Text = "";
        }

        if (!lblStep2TrunkTouchdownAngleF.Text.Equals("") && (!lblStep2TrunkTouchdownAngleM2.Text.Equals("")) && (!lblStep2TrunkTouchdownAngleF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep2TrunkTouchdownAngleF.Text) - Convert.ToInt16(lblStep2TrunkTouchdownAngleM2.Text)) <= Convert.ToInt16(7))
                lblStep2TrunkTouchdownAngleM2.ForeColor = Color.Red;
            else
                lblStep2TrunkTouchdownAngleM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2TrunkTouchdownAngleM2.Text = "";
            lblStep2TrunkTouchdownAngleF.Text = "";
        }

        if (!lblStep3TrunkTouchdownAngleF.Text.Equals("") && (!lblStep3TrunkTouchdownAngleM2.Text.Equals("")) && (!lblStep3TrunkTouchdownAngleF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep3TrunkTouchdownAngleF.Text) - Convert.ToInt16(lblStep3TrunkTouchdownAngleM2.Text)) <= Convert.ToInt16(7))
                lblStep3TrunkTouchdownAngleM2.ForeColor = Color.Red;
            else
                lblStep3TrunkTouchdownAngleM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep3TrunkTouchdownAngleM2.Text = "";
            lblStep3TrunkTouchdownAngleF.Text = "";
        }

        if (!lblIntoHurdleTrunkTouchdownAngleF.Text.Equals("") && (!lblIntoHurdleTrunkTouchdownAngleM2.Text.Equals("")) && (!lblIntoHurdleTrunkTouchdownAngleF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblIntoHurdleTrunkTouchdownAngleF.Text) - Convert.ToInt16(lblIntoHurdleTrunkTouchdownAngleM2.Text)) <= Convert.ToInt16(7))
                lblIntoHurdleTrunkTouchdownAngleM2.ForeColor = Color.Red;
            else
                lblIntoHurdleTrunkTouchdownAngleM2.ForeColor = Color.Black;
        }
        else
        {
            lblIntoHurdleTrunkTouchdownAngleM2.Text = "";
            lblIntoHurdleTrunkTouchdownAngleF.Text = "";
        }


        #endregion

        //TrunkOffAngle lblStep1TrunkTakeoffAngleI
        #region[TrunkOffAngle]
        if (!lblStep1TrunkTakeoffAngleF.Text.Equals("") && (!lblStep1TrunkTakeoffAngleM2.Text.Equals("")) && (!lblStep1TrunkTakeoffAngleF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep1TrunkTakeoffAngleF.Text) - Convert.ToInt16(lblStep1TrunkTakeoffAngleM2.Text)) <= Convert.ToInt16(7))
                lblStep1TrunkTakeoffAngleM2.ForeColor = Color.Red;
            else
                lblStep1TrunkTakeoffAngleM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1TrunkTakeoffAngleM2.Text = "";
            lblStep1TrunkTakeoffAngleF.Text = "";
        }
        

        if (!lblStep2TrunkTakeoffAngleF.Text.Equals("") && (!lblStep2TrunkTakeoffAngleM2.Text.Equals("")) && (!lblStep2TrunkTakeoffAngleF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep2TrunkTakeoffAngleF.Text) - Convert.ToInt16(lblStep2TrunkTakeoffAngleM2.Text)) <= Convert.ToInt16(7))
                lblStep2TrunkTakeoffAngleM2.ForeColor = Color.Red;
            else
                lblStep2TrunkTakeoffAngleM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2TrunkTakeoffAngleM2.Text = "";
            lblStep2TrunkTakeoffAngleF.Text = "";
        }

        if (!lblStep3TrunkTakeoffAngleF.Text.Equals("") && (!lblStep3TrunkTakeoffAngleM2.Text.Equals("")) && (!lblStep3TrunkTakeoffAngleF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep3TrunkTakeoffAngleF.Text) - Convert.ToInt16(lblStep3TrunkTakeoffAngleM2.Text)) <= Convert.ToInt16(7))
                lblStep3TrunkTakeoffAngleM2.ForeColor = Color.Red;
            else
                lblStep3TrunkTakeoffAngleM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep3TrunkTakeoffAngleM2.Text = "";
            lblStep3TrunkTakeoffAngleF.Text = "";
        }
        #endregion



        //UpperLegFullExtension
        if (!lblStep1ULAtFullExtensionF.Text.Equals("") && (!lblStep1ULFullExtensionM2.Text.Equals("")) && (!lblStep1ULAtFullExtensionF.Text.Equals("0.00")))
        {
            if (Convert.ToInt16(lblStep1ULAtFullExtensionF.Text) - Convert.ToInt16(lblStep1ULFullExtensionM2.Text) >= Convert.ToInt16(7))
                lblStep1ULFullExtensionM2.ForeColor = Color.Red;
            else
                lblStep1ULFullExtensionM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1ULFullExtensionM2.Text = "";
            lblStep1ULAtFullExtensionF.Text = "";
        }

        if (!lblStep1ULAtFullExtensionF.Text.Equals("") && (!lblStep2ULAtFullExtensionM2.Text.Equals("")) && (!lblStep1ULAtFullExtensionF.Text.Equals("0.00")))
        {
            if (Convert.ToInt16(lblStep1ULAtFullExtensionF.Text) - Convert.ToInt16(lblStep2ULAtFullExtensionM2.Text) <= Convert.ToInt16(-7))
                lblStep2ULAtFullExtensionM2.ForeColor = Color.Red;
            else
                lblStep2ULAtFullExtensionM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2ULAtFullExtensionM2.Text = "";
            lblStep1ULAtFullExtensionF.Text = "";
        }

        if (!lblStep2ULAtFullExtensionF.Text.Equals("") && (!lblStep2ULAtFullExtensionM2.Text.Equals("")) && (!lblStep2ULAtFullExtensionF.Text.Equals("0.00")))
        {
            if (Convert.ToInt16(lblStep2ULAtFullExtensionF.Text) - Convert.ToInt16(lblStep2ULAtFullExtensionM2.Text) <= Convert.ToInt16(-7))
                lblStep2ULAtFullExtensionM2.ForeColor = Color.Red;
            else
                lblStep2ULAtFullExtensionM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2ULAtFullExtensionM2.Text = "";
            lblStep2ULAtFullExtensionF.Text = "";
        }

        if (!lblStep3ULAtFullExtensionF.Text.Equals("") && (!lblStep3ULAtFullExtensionM2.Text.Equals("")) && (!lblStep3ULAtFullExtensionF.Text.Equals("0.00")))
        {
            if (Convert.ToInt16(lblStep3ULAtFullExtensionF.Text) - Convert.ToInt16(lblStep3ULAtFullExtensionM2.Text) <= Convert.ToInt16(-7))
                lblStep3ULAtFullExtensionM2.ForeColor = Color.Red;
            else
                lblStep3ULAtFullExtensionM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep3ULAtFullExtensionM2.Text = "";
            lblStep3ULAtFullExtensionF.Text = "";
        }

        //LowerLegAngleAtTakeOf   


        if (!lblStep1LLAtTakeoffF.Text.Equals("") && (!lblStep1LLAtTakeoffM2.Text.Equals("")) && (!lblStep1LLAtTakeoffF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep1LLAtTakeoffF.Text) - Convert.ToSingle(lblStep1LLAtTakeoffM2.Text) >= Convert.ToInt16(7))
                lblStep1LLAtTakeoffM2.ForeColor = Color.Red;
            else
                lblStep1LLAtTakeoffM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1LLAtTakeoffM2.Text = "";
            lblStep1LLAtTakeoffF.Text = "";
        }

        if (!lblStep2LLAtTakeoffF.Text.Equals("") && (!lblStep2LLAtTakeoffM2.Text.Equals("")) && (!lblStep2LLAtTakeoffF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep2LLAtTakeoffF.Text) - Convert.ToSingle(lblStep2LLAtTakeoffM2.Text) >= Convert.ToInt16(7))
                lblStep2LLAtTakeoffM2.ForeColor = Color.Red;
            else
                lblStep2LLAtTakeoffM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2LLAtTakeoffM2.Text = "";
            lblStep2LLAtTakeoffF.Text = "";
        }

        if (!lblStep3LLAtTakeoffF.Text.Equals("") && (!lblStep3LLAtTakeoffM2.Text.Equals("")) && (!lblStep3LLAtTakeoffF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep3LLAtTakeoffF.Text) - Convert.ToSingle(lblStep3LLAtTakeoffM2.Text) >= Convert.ToInt16(7))
                lblStep3LLAtTakeoffM2.ForeColor = Color.Red;
            else
                lblStep3LLAtTakeoffM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep3LLAtTakeoffM2.Text = "";
            lblStep3LLAtTakeoffF.Text = "";
        }

        //LowerLegFullFlexionAngle 

        if (!lblStep2LLAtFullFlexionF.Text.Equals("") && (!lblStep2LLAtFullFlexionM2.Text.Equals("")) && (!lblStep2LLAtFullFlexionF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep2LLAtFullFlexionF.Text) - Convert.ToInt16(lblStep2LLAtFullFlexionM2.Text)) >= Convert.ToInt16(7))
                lblStep2LLAtFullFlexionM2.ForeColor = Color.Red;
            else
                lblStep2LLAtFullFlexionM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2LLAtFullFlexionM2.Text = "";
            lblStep2LLAtFullFlexionF.Text = "";
        }

        if (!lblStep3LLAtFullFlexionF.Text.Equals("") && (!lblStep3LLAtFullFlexionM2.Text.Equals("")) && (!lblStep3LLAtFullFlexionF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep3LLAtFullFlexionF.Text) - Convert.ToInt16(lblStep3LLAtFullFlexionM2.Text)) >= Convert.ToInt16(7))
                lblStep3LLAtFullFlexionM2.ForeColor = Color.Red;
            else
                lblStep3LLAtFullFlexionM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep3LLAtFullFlexionM2.Text = "";
            lblStep3LLAtFullFlexionF.Text = "";
        }

        //LowerLegAnkleCrossAngle

        if (!lblStep2LLAtAngleCrossF.Text.Equals("") && (!lblStep2LLAtAngleCrossM2.Text.Equals("")) && (!lblStep2LLAtAngleCrossF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep2LLAtAngleCrossF.Text) - Convert.ToInt16(lblStep2LLAtAngleCrossM2.Text)) >= Convert.ToInt16(7))
                lblStep2LLAtAngleCrossM2.ForeColor = Color.Red;
            else
                lblStep2LLAtAngleCrossM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2LLAtAngleCrossM2.Text = "";
            lblStep2LLAtAngleCrossF.Text = "";
        }

        if (!lblStep3LLAtAngleCrossF.Text.Equals("") && (!lblStep3LLAtAngleCrossM2.Text.Equals("")) && (!lblStep3LLAtAngleCrossF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblStep3LLAtAngleCrossF.Text) - Convert.ToInt16(lblStep3LLAtAngleCrossM2.Text)) >= Convert.ToInt16(7))
                lblStep3LLAtAngleCrossM2.ForeColor = Color.Red;
            else
                lblStep3LLAtAngleCrossM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep3LLAtAngleCrossM2.Text = "";
            lblStep3LLAtAngleCrossF.Text = "";
        }

        //UpperLegFullFlexionAngle

        if (!lblStep1ULFullFlexionF.Text.Equals("") && (!lblStep1ULFullFlexionM2.Text.Equals("")) && (!lblStep1ULFullFlexionF.Text.Equals("0.00")))
        {
            if (Convert.ToInt16(lblStep1ULFullFlexionF.Text) - Convert.ToInt16(lblStep1ULFullFlexionM2.Text) <= Convert.ToInt16(-7))
                lblStep1ULFullFlexionM2.ForeColor = Color.Red;
            else
                lblStep1ULFullFlexionM2.ForeColor = Color.Black;
        }
        else
        {

            lblStep1ULFullFlexionM2.Text = "";
            lblStep1ULFullFlexionF.Text = "";
        }

        if (!lblStep2ULAtFullFlexionF.Text.Equals("") && (!lblStep2ULAtFullFlexionM2.Text.Equals("")) && (!lblStep2ULAtFullFlexionF.Text.Equals("0.00")))
        {
            if (Convert.ToInt16(lblStep2ULAtFullFlexionF.Text) - Convert.ToInt16(lblStep2ULAtFullFlexionM2.Text) <= Convert.ToInt16(-7))
                lblStep2ULAtFullFlexionM2.ForeColor = Color.Red;
            else
                lblStep2ULAtFullFlexionM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2ULAtFullFlexionM2.Text = "";
            lblStep2ULAtFullFlexionF.Text = "";
        }

        if (!lblStep3ULAtFullFlexionF.Text.Equals("") && (!lblStep3ULAtFullFlexionM2.Text.Equals("")) && (!lblStep3ULAtFullFlexionF.Text.Equals("0.00")))
        {
            if (Convert.ToInt16(lblStep3ULAtFullFlexionF.Text) - Convert.ToInt16(lblStep3ULAtFullFlexionM2.Text) <= Convert.ToInt16(-7))
                lblStep3ULAtFullFlexionM2.ForeColor = Color.Red;
            else
                lblStep3ULAtFullFlexionM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep3ULAtFullFlexionM2.Text = "";
            lblStep3ULAtFullFlexionF.Text = "";
        }

        //LowerLegAngleAtTouchDownIntoHurdle

        if (!lblIntoHurdleLLTouchdownF.Text.Equals("") && (!lblIntoHurdleLLTouchdownM2.Text.Equals("")) && (!lblIntoHurdleLLTouchdownF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToInt16(lblIntoHurdleLLTouchdownF.Text) - Convert.ToInt16(lblIntoHurdleLLTouchdownM2.Text)) >= Convert.ToInt16(7))
                lblIntoHurdleLLTouchdownM2.ForeColor = Color.Red;
            else
                lblIntoHurdleLLTouchdownM2.ForeColor = Color.Black;
        }
        else
        {
            lblIntoHurdleLLTouchdownM2.Text = "";
            lblIntoHurdleLLTouchdownF.Text = "";
        }

        #endregion[Final model Values]
        WriteObjectsToPageAjax();
    }

    public void GetAllStartAthleteData(int lessonid)
    {
        ds = sae.GetAllStartAthletesData(lessonid);
        if (ds.Tables[0].Rows.Count > 0)
        {
            if (DropDownList1.SelectedValue != "")
            {
                try
                {
                    int movieid = Convert.ToInt32(DropDownList1.SelectedItem.Value);
                    leftMovie = DataRepository.MovieProvider.GetByMovieId(movieid);
                    string location = sae.SelectLessonlocation(lessonid.ToString());
                    string date = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
                    string LeftSession = date + "-" + location;
                    lblStartLeftMovie.Text = LeftSession;
                }
                catch { }
            }
            lblSetFrontBlockDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetFrontBlockDistance"].ToString());
            lblSetRearBlockDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetRearBlockDistance"].ToString());
            lblSetFrontULAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetFrontULAngle"].ToString());
            lblSetRearULAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetRearULAngle"].ToString());
            lblSetFrontLLAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetFrontLLAngle"].ToString());
            lblSetRearLLAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetRearLLAngle"].ToString());
            lblSetTrunkAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetTrunkAngle"].ToString());
            lblSetCOGDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetCOGDistance"].ToString());

            lblBCRearFootClearanceTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCRearFootClearanceTime"].ToString());
            lblBCFrontFootClearanceTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCFrontFootClearanceTime"].ToString());
            lblBCRearLLAngleTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCRearLLAngleTakeoff"].ToString());
            lblBCFrontLLAngleTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCFrontLLAngleTakeoff"].ToString());
            lblBCTrunkAngleTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCTrunkAngleTakeoff"].ToString());
            lblBCLLAngleACI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCLLAngleAC"].ToString());
            lblBCAirTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCAirTime"].ToString());
            lblBCStrideRateI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BC StrideRate"].ToString());
            lblBCStrideLengthI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BC Stride Length"].ToString());
            lblBCVelocityI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BC Velocity"].ToString());

            lblStep1COGDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1COGDistance"].ToString());
            lblStep1LLAngleTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1LLAngleTakeoff"].ToString());
            lblStep1TrunkAngleTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1TrunkAngleTakeoff"].ToString());
            lblStep1LLAngleACI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1LLAngleAC"].ToString());
            lblStep1GroundTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1GroundTime"].ToString());
            lblStep1AirTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1AirTime"].ToString());
            lblStep1StrideRateI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1 Stride Rate"].ToString());
            lblStep1StrideLengthI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1StrideLength"].ToString());
            lblStep1VelocityI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1 Velocity"].ToString());

            lblStep2COGDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2COGDistance"].ToString());
            lblStep2LLAngleTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2LLAngleTakeoff"].ToString());
            lblStep2TrunkAngleTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2TrunkAngleTakeoff"].ToString());
            lblStep2LLAngleACI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2LLAngleAC"].ToString());
            lblStep2GroundTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2GroundTime"].ToString());
            lblStep2AirTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2AirTime"].ToString());
            lblStep2StrideRateI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2 Stride Rate"].ToString());
            lblStep2StrideLengthI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2StrideLength"].ToString());
            lblStep2VelocityI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2 Velocity"].ToString());

            lblStep3COGDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3COGDistance"].ToString());
            lblTimeTo3mI.Text = Convert.ToString(ds.Tables[0].Rows[0]["TimeTo3m"].ToString());
            lblTimeTo5mI.Text = Convert.ToString(ds.Tables[0].Rows[0]["TimeTo5m"].ToString());
        }
        //model data
        if (ds.Tables[1].Rows.Count > 0)
        {
            lblSetFrontBlockDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetFrontBlockDistance"].ToString());
            lblSetRearBlockDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetRearBlockDistance"].ToString());
            lblSetFrontULAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetFrontULAngle"].ToString());
            lblSetRearULAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetRearULAngle"].ToString());
            lblSetFrontLLAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetFrontLLAngle"].ToString());
            lblSetRearLLAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetRearLLAngle"].ToString());
            lblSetTrunkAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetTrunkAngle"].ToString());
            lblSetCOGDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetCOGDistance"].ToString());

            lblBCRearFootClearanceTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCRearFootClearanceTime"].ToString());
            lblBCFrontFootClearanceTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCFrontFootClearanceTime"].ToString());
            lblBCRearLLAngleTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCRearLLAngleTakeoff"].ToString());
            lblBCFrontLLAngleTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCFrontLLAngleTakeoff"].ToString());
            lblBCTrunkAngleTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCTrunkAngleTakeoff"].ToString());
            lblBCLLAngleACM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCLLAngleAC"].ToString());
            lblBCAirTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCAirTime"].ToString());
            lblBCStrideRateM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BC StrideRate"].ToString());
            lblBCStrideLengthM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCStrideLength"].ToString());
            lblBCVelocityM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BC Velocity"].ToString());

            lblStep1COGDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1COGDistance"].ToString());
            lblStep1LLAngleTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1LLAngleTakeoff"].ToString());
            lblStep1TrunkAngleTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1TrunkAngleTakeoff"].ToString());
            lblStep1LLAngleACM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1LLAngleAC"].ToString());
            lblStep1GroundTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1GroundTime"].ToString());
            lblStep1AirTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1AirTime"].ToString());
            lblStep1StrideRateM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2 Stride Rate"].ToString());
            lblStep1StrideLengthM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1StrideLength"].ToString());
            lblStep1VelocityM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1 Velocity"].ToString());

            lblStep2COGDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2COGDistance"].ToString());
            lblStep2LLAngleTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2LLAngleTakeoff"].ToString());
            lblStep2TrunkAngleTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2TrunkAngleTakeoff"].ToString());
            lblStep2LLAngleACM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2LLAngleAC"].ToString());
            lblStep2GroundTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2GroundTime"].ToString());
            lblStep2AirTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2AirTime"].ToString());
            lblStep2StrideRateM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2 Stride Rate"].ToString());
            lblStep2StrideLengthM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2StrideLength"].ToString());
            lblStep2VelocityM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2 Velocity"].ToString());

            lblStep3COGDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3COGDistance"].ToString());
            lblTimeTo3mM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["TimeTo3m"].ToString());
            lblTimeTo5mM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["TimeTo5m"].ToString());
        }

        //final data
        if (ds.Tables[2].Rows.Count > 0)
        {
            if (DropDownList3.SelectedValue != "")
            {
                try
                {
                    int movieidF = Convert.ToInt32(DropDownList1.SelectedItem.Value);
                    leftMovie = DataRepository.MovieProvider.GetByMovieId(movieidF);
                    string locationF = sae.SelectLessonlocation(lessonid.ToString());
                    string dateF = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
                    string RightSession = dateF + "-" + locationF;
                    lblStartRightMovie.Text = RightSession;
                }
                catch { }
            }
            lblSetFrontBlockDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetFrontBlockDistance"].ToString());
            lblSetRearBlockDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetRearBlockDistance"].ToString());
            lblSetFrontULAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetFrontULAngle"].ToString());
            lblSetRearULAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetRearULAngle"].ToString());
            lblSetFrontLLAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetFrontLLAngle"].ToString());
            lblSetRearLLAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetRearLLAngle"].ToString());
            lblSetTrunkAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetTrunkAngle"].ToString());
            lblSetCOGDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetCOGDistance"].ToString());

            lblBCRearFootClearanceTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCRearFootClearanceTime"].ToString());
            lblBCFrontFootClearanceTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCFrontFootClearanceTime"].ToString());
            lblBCRearLLAngleTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCRearLLAngleTakeoff"].ToString());
            lblBCFrontLLAngleTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCFrontLLAngleTakeoff"].ToString());
            lblBCTrunkAngleTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCTrunkAngleTakeoff"].ToString());
            lblBCLLAngleACF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCLLAngleAC"].ToString());
            lblBCAirTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCAirTime"].ToString());
            lblBCStrideRateF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BC StrideRate"].ToString());
            lblBCStrideLengthF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCStrideLength"].ToString());
            lblBCVelocityF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BC Velocity"].ToString());

            lblStep1COGDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1COGDistance"].ToString());
            lblStep1LLAngleTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1LLAngleTakeoff"].ToString());
            lblStep1TrunkAngleTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1TrunkAngleTakeoff"].ToString());
            lblStep1LLAngleACF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1LLAngleAC"].ToString());
            lblStep1GroundTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1GroundTime"].ToString());
            lblStep1AirTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1AirTime"].ToString());
            lblStep1StrideRateF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2 Stride Rate"].ToString());
            lblStep1StrideLengthF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1StrideLength"].ToString());
            lblStep1VelocityF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1 Velocity"].ToString());

            lblStep2COGDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2COGDistance"].ToString());
            lblStep2LLAngleTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2LLAngleTakeoff"].ToString());
            lblStep2TrunkAngleTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2TrunkAngleTakeoff"].ToString());
            lblStep2LLAngleACF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2LLAngleAC"].ToString());
            lblStep2GroundTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2GroundTime"].ToString());
            lblStep2AirTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2AirTime"].ToString());
            lblStep2StrideRateF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2 Stride Rate"].ToString());
            lblStep2StrideLengthF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2StrideLength"].ToString());
            lblStep2VelocityF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2 Velocity"].ToString());

            lblStep3COGDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3COGDistance"].ToString());
            lblTimeTo3mF.Text = Convert.ToString(ds.Tables[2].Rows[0]["TimeTo3m"].ToString());
            lblTimeTo5mF.Text = Convert.ToString(ds.Tables[2].Rows[0]["TimeTo5m"].ToString());
        }
        //model 2 data
        if (ds.Tables[3].Rows.Count > 0)
        {
            lblSetFrontBlockDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetFrontBlockDistance"].ToString());
            lblSetRearBlockDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetRearBlockDistance"].ToString());
            lblSetFrontULAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetFrontULAngle"].ToString());
            lblSetRearULAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetRearULAngle"].ToString());
            lblSetFrontLLAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetFrontLLAngle"].ToString());
            lblSetRearLLAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetRearLLAngle"].ToString());
            lblSetTrunkAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetTrunkAngle"].ToString());
            lblSetCOGDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetCOGDistance"].ToString());

            lblBCRearFootClearanceTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCRearFootClearanceTime"].ToString());
            lblBCFrontFootClearanceTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCFrontFootClearanceTime"].ToString());
            lblBCRearLLAngleTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCRearLLAngleTakeoff"].ToString());
            lblBCFrontLLAngleTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCFrontLLAngleTakeoff"].ToString());
            lblBCTrunkAngleTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCTrunkAngleTakeoff"].ToString());
            lblBCLLAngleACM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCLLAngleAC"].ToString());
            lblBCAirTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCAirTime"].ToString());
            lblBCStrideRateM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BC StrideRate"].ToString());
            lblBCStrideLengthM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCStrideLength"].ToString());
            lblBCVelocityM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BC Velocity"].ToString());

            lblStep1COGDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1COGDistance"].ToString());
            lblStep1LLAngleTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1LLAngleTakeoff"].ToString());
            lblStep1TrunkAngleTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1TrunkAngleTakeoff"].ToString());
            lblStep1LLAngleACM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1LLAngleAC"].ToString());
            lblStep1GroundTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1GroundTime"].ToString());
            lblStep1AirTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1AirTime"].ToString());
            lblStep1StrideRateM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2 Stride Rate"].ToString());
            lblStep1StrideLengthM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1StrideLength"].ToString());
            lblStep1VelocityM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1 Velocity"].ToString());

            lblStep2COGDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2COGDistance"].ToString());
            lblStep2LLAngleTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2LLAngleTakeoff"].ToString());
            lblStep2TrunkAngleTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2TrunkAngleTakeoff"].ToString());
            lblStep2LLAngleACM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2LLAngleAC"].ToString());
            lblStep2GroundTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2GroundTime"].ToString());
            lblStep2AirTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2AirTime"].ToString());
            lblStep2StrideRateM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2 Stride Rate"].ToString());
            lblStep2StrideLengthM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2StrideLength"].ToString());
            lblStep2VelocityM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2 Velocity"].ToString());

            lblStep3COGDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3COGDistance"].ToString());
            lblTimeTo3mM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["TimeTo3m"].ToString());
            lblTimeTo5mM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["TimeTo5m"].ToString());
        }
        //function calls 
        //initial data

        if (!lblSetFrontBlockDistanceI.Text.Equals("") && (!lblSetFrontBlockDistanceM1.Text.Equals("")) && (!lblSetFrontBlockDistanceI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblSetFrontBlockDistanceI.Text) - Convert.ToSingle(lblSetFrontBlockDistanceM1.Text)) >= Convert.ToSingle(.04))
                lblSetFrontBlockDistanceM1.ForeColor = Color.Red;
            else
                lblSetFrontBlockDistanceM1.ForeColor = Color.Black;
        }
        else
        {
            lblSetFrontBlockDistanceM1.Text = "";
            lblSetFrontBlockDistanceI.Text = "";
        }

        if (!lblSetRearBlockDistanceI.Text.Equals("") && (!lblSetRearBlockDistanceM1.Text.Equals("")) && (!lblSetRearBlockDistanceI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblSetRearBlockDistanceI.Text) - Convert.ToSingle(lblSetRearBlockDistanceM1.Text)) >= Convert.ToSingle(.04))
                lblSetRearBlockDistanceM1.ForeColor = Color.Red;
            else
                lblSetRearBlockDistanceM1.ForeColor = Color.Black;
        }
        else
        {
            lblSetRearBlockDistanceM1.Text = "";
            lblSetRearBlockDistanceI.Text = "";
        }

        if (!lblSetFrontULAngleI.Text.Equals("") && (!lblSetFrontULAngleM1.Text.Equals("")) && (!lblSetFrontULAngleI.Text.Equals("0")))
        {
            if (Math.Abs(Convert.ToSingle(lblSetFrontULAngleI.Text) - Convert.ToSingle(lblSetFrontULAngleM1.Text)) >= Convert.ToInt16(7))
                lblSetFrontULAngleM1.ForeColor = Color.Red;
            else
                lblSetFrontULAngleM1.ForeColor = Color.Black;
        }
        else
        {
            lblSetFrontULAngleM1.Text = "";
            lblSetFrontULAngleI.Text = "";
        }

        if (!lblSetRearULAngleI.Text.Equals("") && (!lblSetRearULAngleM1.Text.Equals("")) && (!lblSetRearULAngleI.Text.Equals("0")))
        {
            if (Math.Abs(Convert.ToSingle(lblSetRearULAngleI.Text) - Convert.ToSingle(lblSetRearULAngleM1.Text)) >= Convert.ToInt16(7))
                lblSetRearULAngleM1.ForeColor = Color.Red;
            else
                lblSetRearULAngleM1.ForeColor = Color.Black;
        }
        else
        {
            lblSetRearULAngleM1.Text = "";
            lblSetRearULAngleI.Text = "";
        }

        if (!lblSetFrontLLAngleI.Text.Equals("") && (!lblSetFrontLLAngleM1.Text.Equals("")) && (!lblSetFrontLLAngleI.Text.Equals("0")))
        {
            if (Math.Abs(Convert.ToSingle(lblSetFrontLLAngleI.Text) - Convert.ToSingle(lblSetFrontLLAngleM1.Text)) >= Convert.ToInt16(7))
                lblSetFrontLLAngleM1.ForeColor = Color.Red;
            else
                lblSetFrontLLAngleM1.ForeColor = Color.Black;
        }
        else
        {
            lblSetFrontLLAngleI.Text = "";
            lblSetFrontLLAngleM1.Text = "";
        }

        if (!lblSetRearLLAngleI.Text.Equals("") && (!lblSetRearLLAngleM1.Text.Equals("")) && (!lblSetRearLLAngleI.Text.Equals("0")))
        {
            if (Math.Abs(Convert.ToSingle(lblSetRearLLAngleI.Text) - Convert.ToSingle(lblSetRearLLAngleM1.Text)) >= Convert.ToInt16(7))
                lblSetRearLLAngleM1.ForeColor = Color.Red;
            else
                lblSetRearLLAngleM1.ForeColor = Color.Black;
        }
        else
        {
            lblSetRearLLAngleM1.Text = "";
            lblSetRearLLAngleI.Text = "";
        }

        if (!lblSetTrunkAngleI.Text.Equals("") && (!lblSetTrunkAngleM1.Text.Equals("")) && (!lblSetTrunkAngleI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblSetTrunkAngleI.Text) - Convert.ToSingle(lblSetTrunkAngleM1.Text)) >= Convert.ToInt16(7))
                lblSetTrunkAngleM1.ForeColor = Color.Red;
            else
                lblSetTrunkAngleM1.ForeColor = Color.Black;
        }
        else
        {
            lblSetTrunkAngleM1.Text = "";
            lblSetTrunkAngleI.Text = "";
        }

        if (!lblStep1COGDistanceI.Text.Equals("") && (!lblStep1COGDistanceM1.Text.Equals("")) && (!lblStep1COGDistanceI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep1COGDistanceI.Text) - Convert.ToSingle(lblStep1COGDistanceM1.Text)) >= Convert.ToSingle(.05))
                lblStep1COGDistanceM1.ForeColor = Color.Red;
            else
                lblStep1COGDistanceM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1COGDistanceM1.Text = "";
            lblStep1COGDistanceI.Text = "";
        }

        if (!lblBCRearFootClearanceTimeI.Text.Equals("") && (!lblBCRearFootClearanceTimeM1.Text.Equals("")) && (!lblBCRearFootClearanceTimeI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblBCRearFootClearanceTimeI.Text) - Convert.ToSingle(lblBCRearFootClearanceTimeM1.Text) >= Convert.ToSingle(.02))
                lblBCRearFootClearanceTimeM1.ForeColor = Color.Red;
            else
                lblBCRearFootClearanceTimeM1.ForeColor = Color.Black;
        }
        else
        {
            lblBCRearFootClearanceTimeM1.Text = "";
            lblBCRearFootClearanceTimeI.Text = "";
        }

        if (!lblBCFrontFootClearanceTimeI.Text.Equals("") && (!lblBCFrontFootClearanceTimeM1.Text.Equals("")) && (!lblBCFrontFootClearanceTimeI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblBCFrontFootClearanceTimeI.Text) - Convert.ToSingle(lblBCFrontFootClearanceTimeM1.Text) >= Convert.ToSingle(.04))
                lblBCFrontFootClearanceTimeM1.ForeColor = Color.Red;
            else
                lblBCFrontFootClearanceTimeM1.ForeColor = Color.Black;

        }
        else
        {
            lblBCFrontFootClearanceTimeM1.Text = "";
            lblBCFrontFootClearanceTimeI.Text = "";
        }

        if (!lblBCRearLLAngleTakeoffI.Text.Equals("") && (!lblBCRearLLAngleTakeoffM1.Text.Equals("")) && (!lblBCRearLLAngleTakeoffI.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblBCRearLLAngleTakeoffI.Text) - Convert.ToInt16(lblBCRearLLAngleTakeoffM1.Text) >= Convert.ToInt16(7))
                lblBCRearLLAngleTakeoffM1.ForeColor = Color.Red;
            else
                lblBCRearLLAngleTakeoffM1.ForeColor = Color.Black;
        }
        else
        {
            lblBCRearLLAngleTakeoffM1.Text = "";
            lblBCRearLLAngleTakeoffI.Text = "";

        }

        if (!lblBCFrontLLAngleTakeoffI.Text.Equals("") && (!lblBCFrontLLAngleTakeoffM1.Text.Equals("")) && (!lblBCRearLLAngleTakeoffI.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblBCFrontLLAngleTakeoffI.Text) - Convert.ToInt16(lblBCFrontLLAngleTakeoffM1.Text) >= Convert.ToInt16(7))
                lblBCFrontLLAngleTakeoffM1.ForeColor = Color.Red;
            else
                lblBCFrontLLAngleTakeoffM1.ForeColor = Color.Black;
        }
        else
        {
            lblBCFrontLLAngleTakeoffM1.Text = "";
            lblBCFrontLLAngleTakeoffI.Text = "";
        }

        if (!lblBCTrunkAngleTakeoffI.Text.Equals("") && (!lblBCTrunkAngleTakeoffM1.Text.Equals("")) && (!lblBCRearLLAngleTakeoffI.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblBCTrunkAngleTakeoffI.Text) - Convert.ToInt16(lblBCTrunkAngleTakeoffM1.Text) >= Convert.ToInt16(7))
                lblBCTrunkAngleTakeoffM1.ForeColor = Color.Red;
            else
                lblBCTrunkAngleTakeoffM1.ForeColor = Color.Black;
        }
        else
        {
            lblBCTrunkAngleTakeoffM1.Text = "";
            lblBCTrunkAngleTakeoffI.Text = "";
        }

        if (!lblBCLLAngleACI.Text.Equals("") && (!lblBCLLAngleACM1.Text.Equals("")) && (!lblBCRearLLAngleTakeoffI.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblBCLLAngleACI.Text) - Convert.ToInt16(lblBCLLAngleACM1.Text) <= Convert.ToInt16(-7))
                lblBCLLAngleACM1.ForeColor = Color.Red;
            else
                lblBCLLAngleACM1.ForeColor = Color.Black;
        }
        else
        {
            lblBCLLAngleACM1.Text = "";
            lblBCLLAngleACI.Text = "";
        }

        if (!lblBCAirTimeI.Text.Equals("") && (!lblBCAirTimeM1.Text.Equals("")) && (!lblBCRearLLAngleTakeoffI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblBCAirTimeI.Text) - Convert.ToSingle(lblBCAirTimeM1.Text) >= Convert.ToSingle(.02))
                lblBCAirTimeM1.ForeColor = Color.Red;
            else
                lblBCAirTimeM1.ForeColor = Color.Black;
        }
        else
        {
            lblBCAirTimeM1.Text = "";
            lblBCAirTimeI.Text = "";
        }
        if (!lblBCStrideRateI.Text.Equals("") && (!lblBCStrideRateM1.Text.Equals("")) && (!lblBCStrideRateI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblBCStrideRateI.Text) - Convert.ToSingle(lblBCStrideRateM1.Text) <= Convert.ToSingle(-0.2))
                lblBCStrideRateM1.ForeColor = Color.Red;
            else
                lblBCStrideRateM1.ForeColor = Color.Black;
        }
        else
        {
            lblBCStrideRateM1.Text = "";
            lblBCStrideRateI.Text = "";
        }

        if (!lblBCStrideLengthI.Text.Equals("") && (!lblBCStrideLengthM1.Text.Equals("")) && (!lblBCStrideLengthI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblBCStrideLengthI.Text) - Convert.ToSingle(lblBCStrideLengthM1.Text) >= Convert.ToSingle(.05))
                lblBCStrideLengthM1.ForeColor = Color.Red;
            else
                lblBCStrideLengthM1.ForeColor = Color.Black;
        }
        else
        {
            lblBCStrideLengthM1.Text = "";
            lblBCStrideLengthI.Text = "";
        }

        if (!lblBCVelocityI.Text.Equals("") && (!lblBCVelocityM1.Text.Equals("")) && (!lblBCVelocityI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblBCVelocityI.Text) - Convert.ToSingle(lblBCVelocityM1.Text) <= Convert.ToSingle(-0.5))
                lblBCVelocityM1.ForeColor = Color.Red;
            else
                lblBCVelocityM1.ForeColor = Color.Black;
        }
        else
        {
            lblBCVelocityM1.Text = "";
            lblBCVelocityI.Text = "";
        }

        if (!lblStep1COGDistanceI.Text.Equals("") && (!lblStep1COGDistanceM1.Text.Equals("")) && (!lblStep1COGDistanceI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep1COGDistanceI.Text) - Convert.ToSingle(lblStep1COGDistanceM1.Text)) >= Convert.ToSingle(.05))
                lblStep1COGDistanceM1.ForeColor = Color.Red;
            else
                lblStep1COGDistanceM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1COGDistanceM1.Text = "";
            lblStep1COGDistanceI.Text = "";
        }
        if (!lblStep1LLAngleTakeoffI.Text.Equals("") && (!lblStep1LLAngleTakeoffM1.Text.Equals("")) && (!lblStep1LLAngleTakeoffI.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblStep1LLAngleTakeoffI.Text) - Convert.ToInt16(lblStep1LLAngleTakeoffM1.Text) >= Convert.ToInt16(7))
                lblStep1LLAngleTakeoffM1.ForeColor = Color.Red;
            else
                lblStep1LLAngleTakeoffM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1LLAngleTakeoffM1.Text = "";
            lblStep1LLAngleTakeoffI.Text = "";
        }

        if (!lblStep1TrunkAngleTakeoffI.Text.Equals("") && (!lblStep1TrunkAngleTakeoffM1.Text.Equals("")) && (!lblStep1TrunkAngleTakeoffI.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblStep1TrunkAngleTakeoffI.Text) - Convert.ToInt16(lblStep1TrunkAngleTakeoffM1.Text) >= Convert.ToInt16(7))
                lblStep1TrunkAngleTakeoffM1.ForeColor = Color.Red;
            else
                lblStep1TrunkAngleTakeoffM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1TrunkAngleTakeoffM1.Text = "";
            lblStep1TrunkAngleTakeoffI.Text = "";
        }


        if (!lblStep1LLAngleACI.Text.Equals("") && (!lblStep1LLAngleACM1.Text.Equals("")) && (!lblStep1LLAngleACI.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblStep1LLAngleACI.Text) - Convert.ToInt16(lblStep1LLAngleACM1.Text) <= Convert.ToInt16(-7))
                lblStep1LLAngleACM1.ForeColor = Color.Red;
            else
                lblStep1LLAngleACM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1LLAngleACM1.Text = "";
            lblStep1LLAngleACI.Text = "";
        }


        if (!lblStep1GroundTimeI.Text.Equals("") && (!lblStep1GroundTimeM1.Text.Equals("")) && (!lblStep1GroundTimeI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblStep1GroundTimeI.Text) - Convert.ToSingle(lblStep1GroundTimeM1.Text) >= Convert.ToSingle(.02))
                lblStep1GroundTimeM1.ForeColor = Color.Red;
            else
                lblStep1GroundTimeM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1GroundTimeM1.Text = "";
            lblStep1GroundTimeI.Text = "";
        }

        if (!lblStep1AirTimeI.Text.Equals("") && (!lblStep1AirTimeM1.Text.Equals("")) && (!lblStep1AirTimeI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblStep1AirTimeI.Text) - Convert.ToSingle(lblStep1AirTimeM1.Text) >= Convert.ToSingle(.02))
                lblStep1AirTimeM1.ForeColor = Color.Red;
            else
                lblStep1AirTimeM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1AirTimeM1.Text = "";
            lblStep1AirTimeI.Text = "";
        }

        if (!lblStep1StrideRateI.Text.Equals("") && (!lblStep1StrideRateM1.Text.Equals("")) && (!lblStep1StrideRateI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblStep1StrideRateI.Text) - Convert.ToSingle(lblStep1StrideRateM1.Text) <= Convert.ToSingle(-0.2))
                lblStep1StrideRateM1.ForeColor = Color.Red;
            else
                lblStep1StrideRateM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1StrideRateM1.Text = "";
            lblStep1StrideRateI.Text = "";
        }

        if (!lblStep1StrideLengthI.Text.Equals("") && (!lblStep1StrideLengthM1.Text.Equals("")) && (!lblStep1StrideLengthI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep1StrideLengthI.Text) - Convert.ToSingle(lblStep1StrideLengthM1.Text) >= Convert.ToSingle(.05))
                lblStep1StrideLengthM1.ForeColor = Color.Red;
            else
                lblStep1StrideLengthM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1StrideLengthM1.Text = "";
            lblStep1StrideLengthI.Text = "";
        }
        if (!lblStep1VelocityI.Text.Equals("") && (!lblStep1VelocityM1.Text.Equals("")) && (!lblStep1VelocityI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep1VelocityI.Text) - Convert.ToSingle(lblStep1VelocityM1.Text) <= Convert.ToSingle(-0.5))
                lblStep1VelocityM1.ForeColor = Color.Red;
            else
                lblStep1VelocityM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep1VelocityM1.Text = "";
            lblStep1VelocityI.Text = "";
        }

        if (!lblStep2COGDistanceI.Text.Equals("") && (!lblStep2COGDistanceM1.Text.Equals("")) && (!lblStep2COGDistanceI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep2COGDistanceI.Text) - Convert.ToSingle(lblStep2COGDistanceM1.Text)) >= Convert.ToSingle(.05))
                lblStep2COGDistanceM1.ForeColor = Color.Red;
            else
                lblStep2COGDistanceM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2COGDistanceM1.Text = "";
            lblStep2COGDistanceI.Text = "";
        }

        if (!lblStep2LLAngleTakeoffI.Text.Equals("") && (!lblStep2LLAngleTakeoffM1.Text.Equals("")) && (!lblStep2LLAngleTakeoffI.Text.Equals("0")))
        {
            if (Convert.ToInt32(lblStep2LLAngleTakeoffI.Text) - Convert.ToInt32(lblStep2LLAngleTakeoffM1.Text) >= Convert.ToInt32(7))
                lblStep2LLAngleTakeoffM1.ForeColor = Color.Red;
            else
                lblStep2LLAngleTakeoffM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2LLAngleTakeoffM1.Text = "";
            lblStep2LLAngleTakeoffI.Text = "";
        }

        if (!lblStep2TrunkAngleTakeoffI.Text.Equals("") && (!lblStep2TrunkAngleTakeoffM1.Text.Equals("")) && (!lblStep2TrunkAngleTakeoffI.Text.Equals("0")))
        {
            if (Convert.ToInt32(lblStep2TrunkAngleTakeoffI.Text) - Convert.ToInt32(lblStep2TrunkAngleTakeoffM1.Text) >= Convert.ToInt32(7))
                lblStep2TrunkAngleTakeoffM1.ForeColor = Color.Red;
            else
                lblStep2TrunkAngleTakeoffM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2TrunkAngleTakeoffM1.Text = "";
            lblStep2TrunkAngleTakeoffI.Text = "";
        }
        if (!lblStep2LLAngleACI.Text.Equals("") && (!lblStep2LLAngleACM1.Text.Equals("")) && (!lblStep2LLAngleACI.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblStep2LLAngleACI.Text) - Convert.ToInt16(lblStep2LLAngleACM1.Text) <= Convert.ToInt16(-7))
                lblStep2LLAngleACM1.ForeColor = Color.Red;
            else
                lblStep2LLAngleACM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2LLAngleACM1.Text = "";
            lblStep2LLAngleACI.Text = "";
        }

        if (!lblStep2GroundTimeI.Text.Equals("") && (!lblStep2GroundTimeM1.Text.Equals("")) && (!lblStep2GroundTimeI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblStep2GroundTimeI.Text) - Convert.ToSingle(lblStep2GroundTimeM1.Text) >= Convert.ToSingle(.02))
                lblStep2GroundTimeM1.ForeColor = Color.Red;
            else
                lblStep2GroundTimeM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2GroundTimeM1.Text = "";
            lblStep2GroundTimeI.Text = "";
        }
        if (!lblStep2AirTimeI.Text.Equals("") && (!lblStep2AirTimeM1.Text.Equals("")) && (!lblStep2AirTimeI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblStep2AirTimeI.Text) - Convert.ToSingle(lblStep2AirTimeM1.Text) >= Convert.ToSingle(.02))
                lblStep2AirTimeM1.ForeColor = Color.Red;
            else
                lblStep2AirTimeM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2AirTimeM1.Text = "";
            lblStep2AirTimeI.Text = "";
        }

        if (!lblStep2StrideRateI.Text.Equals("") && (!lblStep2StrideRateM1.Text.Equals("")) && (!lblStep2StrideRateI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblStep2StrideRateI.Text) - Convert.ToSingle(lblStep2StrideRateM1.Text) <= Convert.ToSingle(-0.2))
                lblStep2StrideRateM1.ForeColor = Color.Red;
            else
                lblStep2StrideRateM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2StrideRateM1.Text = "";
            lblStep2StrideRateI.Text = "";
        }
        if (!lblStep2StrideLengthI.Text.Equals("") && (!lblStep2StrideLengthM1.Text.Equals("")) && (!lblStep2StrideLengthI.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep2StrideLengthI.Text) - Convert.ToSingle(lblStep2StrideLengthM1.Text) >= Convert.ToSingle(.05))
                lblStep2StrideLengthM1.ForeColor = Color.Red;
            else
                lblStep2StrideLengthM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2StrideLengthM1.Text = "";
            lblStep2StrideLengthI.Text = "";
        }
        if (!lblStep2VelocityI.Text.Equals("") && (!lblStep2VelocityM1.Text.Equals("")) && (!lblStep2VelocityI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblStep2VelocityI.Text) - Convert.ToSingle(lblStep2VelocityM1.Text) <= Convert.ToSingle(-0.5))
                lblStep2VelocityM1.ForeColor = Color.Red;
            else
                lblStep2VelocityM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep2VelocityM1.Text = "";
            lblStep2VelocityI.Text = "";
        }
        if (!lblStep3COGDistanceI.Text.Equals("") && (!lblStep3COGDistanceM1.Text.Equals("")) && (!lblStep3COGDistanceI.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep3COGDistanceI.Text) - Convert.ToSingle(lblStep3COGDistanceM1.Text)) >= Convert.ToSingle(.05))
                lblStep3COGDistanceM1.ForeColor = Color.Red;
            else
                lblStep3COGDistanceM1.ForeColor = Color.Black;
        }
        else
        {
            lblStep3COGDistanceM1.Text = "";
            lblStep3COGDistanceI.Text = "";
        }
        if (!lblTimeTo3mI.Text.Equals("") && (!lblTimeTo3mM1.Text.Equals("")) && (!lblTimeTo3mI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblTimeTo3mI.Text) - Convert.ToSingle(lblTimeTo3mM1.Text) >= Convert.ToSingle(0.05))
                lblTimeTo3mM1.ForeColor = Color.Red;
            else
                lblTimeTo3mM1.ForeColor = Color.Black;
        }
        else
        {
            lblTimeTo3mM1.Text = "";
            lblTimeTo3mI.Text = "";
        }
        if (!lblTimeTo5mI.Text.Equals("") && (!lblTimeTo5mM1.Text.Equals("")) && (!lblTimeTo5mI.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblTimeTo5mI.Text) - Convert.ToSingle(lblTimeTo5mM1.Text) >= Convert.ToSingle(0.05))
                lblTimeTo5mM1.ForeColor = Color.Red;
            else
                lblTimeTo5mM1.ForeColor = Color.Black;
        }
        else
        {
            lblTimeTo5mM1.Text = "";
            lblTimeTo5mI.Text = "";
        }


        //for final data

        if (!lblSetFrontBlockDistanceF.Text.Equals("") && (!lblSetFrontBlockDistanceM2.Text.Equals("")) && (!lblSetFrontBlockDistanceF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblSetFrontBlockDistanceF.Text) - Convert.ToSingle(lblSetFrontBlockDistanceM2.Text)) >= Convert.ToSingle(.04))
                lblSetFrontBlockDistanceM2.ForeColor = Color.Red;
            else
                lblSetFrontBlockDistanceM2.ForeColor = Color.Black;
        }
        else
        {
            lblSetFrontBlockDistanceM2.Text = "";
            lblSetFrontBlockDistanceF.Text = "";
        }

        if (!lblSetRearBlockDistanceF.Text.Equals("") && (!lblSetRearBlockDistanceM2.Text.Equals("")) && (!lblSetRearBlockDistanceF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblSetRearBlockDistanceF.Text) - Convert.ToSingle(lblSetRearBlockDistanceM2.Text)) >= Convert.ToSingle(.04))
                lblSetRearBlockDistanceM2.ForeColor = Color.Red;
            else
                lblSetRearBlockDistanceM2.ForeColor = Color.Black;
        }
        else
        {
            lblSetRearBlockDistanceM2.Text = "";
            lblSetRearBlockDistanceF.Text = "";
        }

        if (!lblSetFrontULAngleF.Text.Equals("") && (!lblSetFrontULAngleM2.Text.Equals("")) && (!lblSetFrontULAngleF.Text.Equals("0")))
        {
            if (Math.Abs(Convert.ToSingle(lblSetFrontULAngleF.Text) - Convert.ToSingle(lblSetFrontULAngleM2.Text)) >= Convert.ToInt16(7))
                lblSetFrontULAngleM2.ForeColor = Color.Red;
            else
                lblSetFrontULAngleM2.ForeColor = Color.Black;
        }
        else
        {
            lblSetFrontULAngleM2.Text = "";
            lblSetFrontULAngleF.Text = "";
        }

        if (!lblSetRearULAngleF.Text.Equals("") && (!lblSetRearULAngleM2.Text.Equals("")) && (!lblSetRearULAngleF.Text.Equals("0")))
        {
            if (Math.Abs(Convert.ToSingle(lblSetRearULAngleF.Text) - Convert.ToSingle(lblSetRearULAngleM2.Text)) >= Convert.ToInt16(7))
                lblSetRearULAngleM2.ForeColor = Color.Red;
            else
                lblSetRearULAngleM2.ForeColor = Color.Black;
        }
        else
        {
            lblSetRearULAngleM2.Text = "";
            lblSetRearULAngleF.Text = "";
        }

        if (!lblSetFrontLLAngleF.Text.Equals("") && (!lblSetFrontLLAngleM2.Text.Equals("")) && (!lblSetFrontLLAngleF.Text.Equals("0")))
        {
            if (Math.Abs(Convert.ToSingle(lblSetFrontLLAngleF.Text) - Convert.ToSingle(lblSetFrontLLAngleM2.Text)) >= Convert.ToInt16(7))
                lblSetFrontLLAngleM2.ForeColor = Color.Red;
            else
                lblSetFrontLLAngleM2.ForeColor = Color.Black;
        }
        else
        {
            lblSetFrontLLAngleM2.Text = "";
            lblSetFrontLLAngleF.Text = "";
        }

        if (!lblSetRearLLAngleF.Text.Equals("") && (!lblSetRearLLAngleM2.Text.Equals("")) && (!lblSetRearLLAngleF.Text.Equals("0")))
        {
            if (Math.Abs(Convert.ToSingle(lblSetRearLLAngleF.Text) - Convert.ToSingle(lblSetRearLLAngleM2.Text)) >= Convert.ToInt16(7))
                lblSetRearLLAngleM2.ForeColor = Color.Red;
            else
                lblSetRearLLAngleM2.ForeColor = Color.Black;
        }
        else
        {
            lblSetRearLLAngleM2.Text = "";
            lblSetRearLLAngleF.Text = "";
        }

        if (!lblSetTrunkAngleF.Text.Equals("") && (!lblSetTrunkAngleM2.Text.Equals("")) && (!lblSetTrunkAngleF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblSetTrunkAngleF.Text) - Convert.ToSingle(lblSetTrunkAngleM2.Text)) >= Convert.ToInt16(7))
                lblSetTrunkAngleM2.ForeColor = Color.Red;
            else
                lblSetTrunkAngleM2.ForeColor = Color.Black;
        }
        else
        {
            lblSetTrunkAngleM2.Text = "";
            lblSetTrunkAngleF.Text = "";
        }

        if (!lblSetCOGDistanceF.Text.Equals("") && (!lblSetCOGDistanceM2.Text.Equals("")) && (!lblSetCOGDistanceF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblSetCOGDistanceF.Text) - Convert.ToSingle(lblSetCOGDistanceM2.Text)) >= Convert.ToSingle(.05))
                lblSetCOGDistanceM2.ForeColor = Color.Red;
            else
                lblSetCOGDistanceM2.ForeColor = Color.Black;
        }
        else
        {
            lblSetCOGDistanceM2.Text = "";
            lblSetCOGDistanceF.Text = "";
        }

        if (!lblBCRearFootClearanceTimeF.Text.Equals("") && (!lblBCRearFootClearanceTimeM2.Text.Equals("")) && (!lblBCRearFootClearanceTimeF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblBCRearFootClearanceTimeF.Text) - Convert.ToSingle(lblBCRearFootClearanceTimeM2.Text) >= Convert.ToSingle(.02))
                lblBCRearFootClearanceTimeM2.ForeColor = Color.Red;
            else
                lblBCRearFootClearanceTimeM2.ForeColor = Color.Black;
        }
        else
        {
            lblBCRearFootClearanceTimeM2.Text = "";
            lblBCRearFootClearanceTimeF.Text = "";
        }

        if (!lblBCFrontFootClearanceTimeF.Text.Equals("") && (!lblBCFrontFootClearanceTimeM2.Text.Equals("")) && (!lblBCFrontFootClearanceTimeF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblBCFrontFootClearanceTimeF.Text) - Convert.ToSingle(lblBCFrontFootClearanceTimeM2.Text) >= Convert.ToSingle(.04))
                lblBCFrontFootClearanceTimeM2.ForeColor = Color.Red;
            else
                lblBCFrontFootClearanceTimeM2.ForeColor = Color.Black;
        }
        else
        {
            lblBCFrontFootClearanceTimeM2.Text = "";
            lblBCFrontFootClearanceTimeF.Text = "";
        }

        if (!lblBCRearLLAngleTakeoffF.Text.Equals("") && (!lblBCRearLLAngleTakeoffM2.Text.Equals("")) && (!lblBCRearLLAngleTakeoffF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblBCRearLLAngleTakeoffF.Text) - Convert.ToInt16(lblBCRearLLAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                lblBCRearLLAngleTakeoffM2.ForeColor = Color.Red;
            else
                lblBCRearLLAngleTakeoffM2.ForeColor = Color.Black;
        }
        else
        {
            lblBCRearLLAngleTakeoffM2.Text = "";
            lblBCRearLLAngleTakeoffF.Text = "";
        }

        if (!lblBCFrontLLAngleTakeoffF.Text.Equals("") && (!lblBCFrontLLAngleTakeoffM2.Text.Equals("")) && (!lblBCFrontLLAngleTakeoffF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblBCFrontLLAngleTakeoffF.Text) - Convert.ToInt16(lblBCFrontLLAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                lblBCFrontLLAngleTakeoffM2.ForeColor = Color.Red;
            else
                lblBCFrontLLAngleTakeoffM2.ForeColor = Color.Black;
        }
        else
        {
            lblBCFrontLLAngleTakeoffM2.Text = "";
            lblBCFrontLLAngleTakeoffF.Text = "";
        }

        if (!lblBCTrunkAngleTakeoffF.Text.Equals("") && (!lblBCTrunkAngleTakeoffM2.Text.Equals("")) && (!lblBCTrunkAngleTakeoffF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblBCTrunkAngleTakeoffF.Text) - Convert.ToInt16(lblBCTrunkAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                lblBCTrunkAngleTakeoffM2.ForeColor = Color.Red;
            else
                lblBCTrunkAngleTakeoffM2.ForeColor = Color.Black;
        }
        else
        {
            lblBCTrunkAngleTakeoffM2.Text = "";
            lblBCTrunkAngleTakeoffF.Text = "";
        }

        if (!lblBCLLAngleACF.Text.Equals("") && (!lblBCLLAngleACM2.Text.Equals("")) && (!lblBCLLAngleACF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblBCLLAngleACF.Text) - Convert.ToInt16(lblBCLLAngleACM2.Text) <= Convert.ToInt16(-7))
                lblBCLLAngleACM2.ForeColor = Color.Red;
            else
                lblBCLLAngleACM2.ForeColor = Color.Black;
        }
        else
        {
            lblBCLLAngleACM2.Text = "";
            lblBCLLAngleACF.Text = "";
        }

        if (!lblBCAirTimeF.Text.Equals("") && (!lblBCAirTimeM2.Text.Equals("")) && (!lblBCAirTimeF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblBCAirTimeF.Text) - Convert.ToSingle(lblBCAirTimeM2.Text) >= Convert.ToSingle(.02))
                lblBCAirTimeM2.ForeColor = Color.Red;
            else
                lblBCAirTimeM2.ForeColor = Color.Black;
        }
        else
        {
            lblBCAirTimeM2.Text = "";
            lblBCAirTimeF.Text = "";
        }
        if (!lblBCStrideRateF.Text.Equals("") && (!lblBCStrideRateM2.Text.Equals("")) && (!lblBCStrideRateF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblBCStrideRateF.Text) - Convert.ToSingle(lblBCStrideRateM2.Text) <= Convert.ToSingle(-0.2))
                lblBCStrideRateM2.ForeColor = Color.Red;
            else
                lblBCStrideRateM2.ForeColor = Color.Black;
        }
        else
        {
            lblBCStrideRateM2.Text = "";
            lblBCStrideRateF.Text = "";
        }

        if (!lblBCStrideLengthF.Text.Equals("") && (!lblBCStrideLengthM2.Text.Equals("")) && (!lblBCStrideLengthF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblBCStrideLengthF.Text) - Convert.ToSingle(lblBCStrideLengthM2.Text) >= Convert.ToSingle(.05))
                lblBCStrideLengthM2.ForeColor = Color.Red;
            else
                lblBCStrideLengthM2.ForeColor = Color.Black;
        }
        else
        {
            lblBCStrideLengthM2.Text = "";
            lblBCStrideLengthF.Text = "";
        }

        if (!lblBCVelocityF.Text.Equals("") && (!lblBCVelocityM2.Text.Equals("")) && (!lblBCVelocityF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblBCVelocityF.Text) - Convert.ToSingle(lblBCVelocityM2.Text) <= Convert.ToSingle(-0.5))
                lblBCVelocityM2.ForeColor = Color.Red;
            else
                lblBCVelocityM2.ForeColor = Color.Black;
        }
        else
        {
            lblBCVelocityM2.Text = "";
            lblBCVelocityF.Text = "";
        }

        if (!lblStep1COGDistanceF.Text.Equals("") && (!lblStep1COGDistanceM2.Text.Equals("")) && (!lblStep1COGDistanceF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep1COGDistanceF.Text) - Convert.ToSingle(lblStep1COGDistanceM2.Text)) >= Convert.ToSingle(.05))
                lblStep1COGDistanceM2.ForeColor = Color.Red;
            else
                lblStep1COGDistanceM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1COGDistanceM2.Text = "";
            lblStep1COGDistanceF.Text = "";
        }
        if (!lblStep1LLAngleTakeoffF.Text.Equals("") && (!lblStep1LLAngleTakeoffM2.Text.Equals("")) && (!lblStep1LLAngleTakeoffF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblStep1LLAngleTakeoffF.Text) - Convert.ToInt16(lblStep1LLAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                lblStep1LLAngleTakeoffM2.ForeColor = Color.Red;
            else
                lblStep1LLAngleTakeoffM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1LLAngleTakeoffM2.Text = "";
            lblStep1LLAngleTakeoffF.Text = "";
        }

       


        if (!lblStep1TrunkAngleTakeoffF.Text.Equals("") && (!lblStep1TrunkAngleTakeoffM2.Text.Equals("")) && (!lblStep1TrunkAngleTakeoffF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblStep1TrunkAngleTakeoffF.Text) - Convert.ToInt16(lblStep1TrunkAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                lblStep1TrunkAngleTakeoffM2.ForeColor = Color.Red;
            else
                lblStep1TrunkAngleTakeoffM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1TrunkAngleTakeoffM2.Text = "";
            lblStep1TrunkAngleTakeoffF.Text = "";
        }


        if (!lblStep1LLAngleACF.Text.Equals("") && (!lblStep1LLAngleACM2.Text.Equals("")) && (!lblStep1LLAngleACF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblStep1LLAngleACF.Text) - Convert.ToInt16(lblStep1LLAngleACM2.Text) <= Convert.ToInt16(-7))
                lblStep1LLAngleACM2.ForeColor = Color.Red;
            else
                lblStep1LLAngleACM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1LLAngleACM2.Text = "";
            lblStep1LLAngleACF.Text = "";
        }


        if (!lblStep1GroundTimeF.Text.Equals("") && (!lblStep1GroundTimeM2.Text.Equals("")) && (!lblStep1GroundTimeF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblStep1GroundTimeF.Text) - Convert.ToSingle(lblStep1GroundTimeM2.Text) >= Convert.ToSingle(.02))
                lblStep1GroundTimeM2.ForeColor = Color.Red;
            else
                lblStep1GroundTimeM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1GroundTimeM2.Text = "";
            lblStep1GroundTimeF.Text = "";
        }

        if (!lblStep1AirTimeF.Text.Equals("") && (!lblStep1AirTimeM2.Text.Equals("")) && (!lblStep1AirTimeF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblStep1AirTimeF.Text) - Convert.ToSingle(lblStep1AirTimeM2.Text) >= Convert.ToSingle(.02))
                lblStep1AirTimeM2.ForeColor = Color.Red;
            else
                lblStep1AirTimeM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1AirTimeM2.Text = "";
            lblStep1AirTimeF.Text = "";
        }

        if (!lblStep1StrideRateF.Text.Equals("") && (!lblStep1StrideRateM2.Text.Equals("")) && (!lblStep1StrideRateF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblStep1StrideRateF.Text) - Convert.ToSingle(lblStep1StrideRateM2.Text) <= Convert.ToSingle(-0.2))
                lblStep1StrideRateM2.ForeColor = Color.Red;
            else
                lblStep1StrideRateM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1StrideRateM2.Text = "";
            lblStep1StrideRateF.Text = "";
        }

        if (!lblStep1StrideLengthF.Text.Equals("") && (!lblStep1StrideLengthM2.Text.Equals("")) && (!lblStep1StrideLengthF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep1StrideLengthF.Text) - Convert.ToSingle(lblStep1StrideLengthM2.Text) >= Convert.ToSingle(.05))
                lblStep1StrideLengthM2.ForeColor = Color.Red;
            else
                lblStep1StrideLengthM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1StrideLengthM2.Text = "";
            lblStep1StrideLengthF.Text = "";
        }
        if (!lblStep1VelocityF.Text.Equals("") && (!lblStep1VelocityM2.Text.Equals("")) && (!lblStep1VelocityF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblStep1VelocityF.Text) - Convert.ToSingle(lblStep1VelocityM2.Text) <= Convert.ToSingle(-0.5))
                lblStep1VelocityM2.ForeColor = Color.Red;
            else
                lblStep1VelocityM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep1VelocityM2.Text = "";
            lblStep1VelocityF.Text = "";
        }

        if (!lblStep2COGDistanceF.Text.Equals("") && (!lblStep2COGDistanceM2.Text.Equals("")) && (!lblStep2COGDistanceF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep2COGDistanceF.Text) - Convert.ToSingle(lblStep2COGDistanceM2.Text)) >= Convert.ToSingle(.05))
                lblStep2COGDistanceM2.ForeColor = Color.Red;
            else
                lblStep2COGDistanceM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2COGDistanceM2.Text = "";
            lblStep2COGDistanceF.Text = "";
        }

        if (!lblStep2LLAngleTakeoffF.Text.Equals("") && (!lblStep2LLAngleTakeoffM2.Text.Equals("")) && (!lblStep2LLAngleTakeoffF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblStep2LLAngleTakeoffF.Text) - Convert.ToInt16(lblStep2LLAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                lblStep2LLAngleTakeoffM2.ForeColor = Color.Red;
            else
                lblStep2LLAngleTakeoffM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2LLAngleTakeoffM2.Text = "";
            lblStep2LLAngleTakeoffF.Text = "";
        }

        if (!lblStep2TrunkAngleTakeoffF.Text.Equals("") && (!lblStep2TrunkAngleTakeoffM2.Text.Equals("")) && (!lblStep2TrunkAngleTakeoffF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblStep2TrunkAngleTakeoffF.Text) - Convert.ToInt16(lblStep2TrunkAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                lblStep2TrunkAngleTakeoffM2.ForeColor = Color.Red;
            else
                lblStep2TrunkAngleTakeoffM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2TrunkAngleTakeoffM2.Text = "";
            lblStep2TrunkAngleTakeoffF.Text = "";
        }
        if (!lblStep2LLAngleACF.Text.Equals("") && (!lblStep2LLAngleACM2.Text.Equals("")) && (!lblStep2LLAngleACF.Text.Equals("0")))
        {
            if (Convert.ToInt16(lblStep2LLAngleACF.Text) - Convert.ToInt16(lblStep2LLAngleACM2.Text) <= Convert.ToInt16(-7))
                lblStep2LLAngleACM2.ForeColor = Color.Red;
            else
                lblStep2LLAngleACM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2LLAngleACM2.Text = "";
            lblStep2LLAngleACF.Text = "";
        }

        if (!lblStep2GroundTimeF.Text.Equals("") && (!lblStep2GroundTimeM2.Text.Equals("")) && (!lblStep2GroundTimeF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblStep2GroundTimeF.Text) - Convert.ToSingle(lblStep2GroundTimeM2.Text) >= Convert.ToSingle(.02))
                lblStep2GroundTimeM2.ForeColor = Color.Red;
            else
                lblStep2GroundTimeM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2GroundTimeM2.Text = "";
            lblStep2GroundTimeF.Text = "";
        }
        if (!lblStep2AirTimeF.Text.Equals("") && (!lblStep2AirTimeM2.Text.Equals("")) && (!lblStep2AirTimeF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblStep2AirTimeF.Text) - Convert.ToSingle(lblStep2AirTimeM2.Text) >= Convert.ToSingle(.02))
                lblStep2AirTimeM2.ForeColor = Color.Red;
            else
                lblStep2AirTimeM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2AirTimeM2.Text = "";
            lblStep2AirTimeF.Text = "";
        }

        if (!lblStep2StrideRateF.Text.Equals("") && (!lblStep2StrideRateM2.Text.Equals("")) && (!lblStep2StrideRateF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblStep2AirTimeF.Text) - Convert.ToSingle(lblStep2StrideRateM2.Text) <= Convert.ToSingle(-0.2))
                lblStep2StrideRateM2.ForeColor = Color.Red;
            else
                lblStep2StrideRateM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2StrideRateM2.Text = "";
            lblStep2StrideRateF.Text = "";
        }
        if (!lblStep2StrideLengthF.Text.Equals("") && (!lblStep2StrideLengthM2.Text.Equals("")) && (!lblStep2StrideLengthF.Text.Equals("0.00")))
        {
            if (Convert.ToSingle(lblStep2StrideLengthF.Text) - Convert.ToSingle(lblStep2StrideLengthM2.Text) >= Convert.ToSingle(.05))
                lblStep2StrideLengthM2.ForeColor = Color.Red;
            else
                lblStep2StrideLengthM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2StrideLengthM2.Text = "";
            lblStep2StrideLengthF.Text = "";
        }
        if (!lblStep2VelocityF.Text.Equals("") && (!lblStep2VelocityM2.Text.Equals("")) && (!lblStep2VelocityF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblStep2VelocityF.Text) - Convert.ToSingle(lblStep2VelocityM2.Text) <= Convert.ToSingle(-0.5))
                lblStep2VelocityM2.ForeColor = Color.Red;
            else
                lblStep2VelocityM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep2VelocityM2.Text = "";
            lblStep2VelocityF.Text = "";
        }
        if (!lblStep3COGDistanceF.Text.Equals("") && (!lblStep3COGDistanceM2.Text.Equals("")) && (!lblStep3COGDistanceF.Text.Equals("0.00")))
        {
            if (Math.Abs(Convert.ToSingle(lblStep3COGDistanceF.Text) - Convert.ToSingle(lblStep3COGDistanceM2.Text)) >= Convert.ToSingle(.05))
                lblStep3COGDistanceM2.ForeColor = Color.Red;
            else
                lblStep3COGDistanceM2.ForeColor = Color.Black;
        }
        else
        {
            lblStep3COGDistanceM2.Text = "";
            lblStep3COGDistanceF.Text = "";
        }
        if (!lblTimeTo3mF.Text.Equals("") && (!lblTimeTo3mM2.Text.Equals("")) && (!lblTimeTo3mF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblTimeTo3mF.Text) - Convert.ToSingle(lblTimeTo3mM2.Text) >= Convert.ToSingle(0.05))
                lblTimeTo3mM2.ForeColor = Color.Red;
            else
                lblTimeTo3mM2.ForeColor = Color.Black;
        }
        else
        {
            lblTimeTo3mM2.Text = "";
            lblTimeTo3mF.Text = "";
        }
        if (!lblTimeTo5mF.Text.Equals("") && (!lblTimeTo5mM2.Text.Equals("")) && (!lblTimeTo5mF.Text.Equals("0.000")))
        {
            if (Convert.ToSingle(lblTimeTo5mF.Text) - Convert.ToSingle(lblTimeTo5mM2.Text) >= Convert.ToSingle(0.05))
                lblTimeTo5mM2.ForeColor = Color.Red;
            else
                lblTimeTo5mM2.ForeColor = Color.Black;
        }
        else
        {
            lblTimeTo5mM2.Text = "";
            lblTimeTo5mF.Text = "";
        }



        WriteObjectsToPageAjax();
    }
    public void GetAllHurdleAthleteData(int lessonid)
    {

        ds = sae.GetAllHurdleAthleteData(lessonid);
        try
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                if (DropDownList1.SelectedValue != "")
                {
                    try
                    {
                        int movieid = Convert.ToInt32(DropDownList1.SelectedItem.Value);
                        leftMovie = DataRepository.MovieProvider.GetByMovieId(movieid);
                        string location = sae.SelectLessonlocation(lessonid.ToString());
                        string date = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
                        string LeftSession = date + "-" + location;
                        lblLeftHurdleMovie.Text = LeftSession;
                    }
                    catch { }
                }
                lblGroundTimeIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["GroundTimeInto"].ToString());
                lblGroundTimeOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["GroundTimeOff"]);
                lblAirTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["AirTimeOver"]);
                lblStrideLengthIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["StrideLengthInto"]);
                lblStrideLengthOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["StrideLengthOff"]);
                lblStrideLengthTotalI.Text = Convert.ToString(ds.Tables[0].Rows[0]["StrideLengthTotal"]);
                lblVelocityI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Velocity"]);
                lblTouchdownDistanceIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["COGDistanceInto"]);
                lblTouchdownDistanceOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["COGDistanceOff"]);
                lblUpperLegAngleatTouchdownIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["ULAngleTDInto"]);
                lblUpperLegAngleatTakeoffIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["ULAngleTOInto"]);
                lblUpperLegAngleatTouchdownOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["ULAngleTDOff"]);
                lblUpperLegAngleatTakeoffOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["ULAngleTOOff"]);
                lblLeadLowerLegMinimumAngleIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["LeadLegMinimumAngle"]);
                lblLeadLowerLegAngleatAnkleCrossIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["LeadLegAngleAC"]);
                lblLowerLegAngleatTouchdownOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["LLAngleTDOff"]);
                lblLowerLegAngleatTakeoffOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["LLAngleTOOff"]);
            }
            if (ds.Tables[1].Rows.Count > 0)
            {
                lblGroundTimeIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTimeInto"]);
                lblGroundTimeOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTimeOff"]);
                lblAirTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["AirTimeOver"]);
                lblStrideLengthIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLengthInto"]);
                lblStrideLengthOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLengthOff"]);
                lblStrideLengthTotalM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLengthTotal"]);
                lblVelocityHurdleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Velocity"]);
                lblTouchdownDistanceIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["COGDistanceInto"]);
                lblTouchdownDistanceOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["COGDistanceOff"]);
                lblUpperLegAngleatTouchdownIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULAngleTDInto"]);
                lblUpperLegAngleatTakeoffIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULAngleTOInto"]);
                lblUpperLegAngleatTouchdownOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULAngleTDOff"]);
                lblUpperLegAngleatTakeoffOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULAngleTOOff"]);
                lblLeadLowerLegMinimumAngleIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LeadLegMinimumAngle"]);
                lblLeadLowerLegAngleatAnkleCrossIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LeadLegAngleAC"]);
                lblLowerLegAngleatTouchdownOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleTDOff"]);
                lblLowerLegAngleatTakeoffOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleTOOff"]);
            }
            if (ds.Tables[2].Rows.Count > 0)
            {
                if (DropDownList3.SelectedValue != "")
                {
                    try
                    {
                        int movieidF = Convert.ToInt32(DropDownList1.SelectedItem.Value);
                        leftMovie = DataRepository.MovieProvider.GetByMovieId(movieidF);
                        string locationF = sae.SelectLessonlocation(lessonid.ToString());
                        string dateF = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
                        string RightSession = dateF + "-" + locationF;
                        lblRightHurdleMovie.Text = RightSession;
                    }
                    catch { }
                }
                lblGroundTimeIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["GroundTimeInto"]);
                lblGroundTimeOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["GroundTimeOff"]);
                lblAirTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["AirTimeOver"]);
                lblStrideLengthIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["StrideLengthInto"]);
                lblStrideLengthOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["StrideLengthOff"]);
                lblStrideLengthTotalF.Text = Convert.ToString(ds.Tables[2].Rows[0]["StrideLengthTotal"]);
                lblVelocityHurdleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Velocity"]);
                lblTouchdownDistanceIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["COGDistanceInto"]);
                lblTouchdownDistanceOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["COGDistanceOff"]);
                lblUpperLegAngleatTouchdownIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["ULAngleTDInto"]);
                lblUpperLegAngleatTakeoffIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["ULAngleTOInto"]);
                lblUpperLegAngleatTouchdownOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["ULAngleTDOff"]);
                lblUpperLegAngleatTakeoffOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["ULAngleTOOff"]);
                lblLeadLowerLegMinimumAngleIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["LeadLegMinimumAngle"]);
                lblLeadLowerLegAngleatAnkleCrossIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["LeadLegAngleAC"]);
                lblLowerLegAngleatTouchdownOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["LLAngleTDOff"]);
                lblLowerLegAngleatTakeoffOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["LLAngleTOOff"]);
            }
            if (ds.Tables[3].Rows.Count > 0)
            {
                lblGroundTimeIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTimeInto"]);
                lblGroundTimeOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTimeOff"]);
                lblAirTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["AirTimeOver"]);
                lblStrideLengthIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLengthInto"]);
                lblStrideLengthOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLengthOff"]);
                lblStrideLengthTotalM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLengthTotal"]);
                lblVelocityHurdleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Velocity"]);
                lblTouchdownDistanceIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["COGDistanceInto"]);
                lblTouchdownDistanceOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["COGDistanceOff"]);
                lblUpperLegAngleatTouchdownIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULAngleTDInto"]);
                lblUpperLegAngleatTakeoffIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULAngleTOInto"]);
                lblUpperLegAngleatTouchdownOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULAngleTDOff"]);
                lblUpperLegAngleatTakeoffOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULAngleTOOff"]);
                lblLeadLowerLegMinimumAngleIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LeadLegMinimumAngle"]);
                lblLeadLowerLegAngleatAnkleCrossIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LeadLegAngleAC"]);
                lblLowerLegAngleatTouchdownOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleTDOff"]);
                lblLowerLegAngleatTakeoffOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleTOOff"]);
            }
            if (!lblGroundTimeIntoI.Text.Equals("") && (!lblGroundTimeIntoM1.Text.Equals("")) && (!lblGroundTimeIntoI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblGroundTimeIntoI.Text) - Convert.ToSingle(lblGroundTimeIntoM1.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeIntoM1.ForeColor = Color.Red;
                else
                    lblGroundTimeIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeIntoM1.Text = "";
                lblGroundTimeIntoI.Text = "";
            }

            if (!lblGroundTimeOffI.Text.Equals("") && (!lblGroundTimeOffM1.Text.Equals("")) && (!lblGroundTimeOffI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblGroundTimeOffI.Text) - Convert.ToSingle(lblGroundTimeOffM1.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeOffM1.ForeColor = Color.Red;
                else
                    lblGroundTimeOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeOffM1.Text = "";
                lblGroundTimeOffI.Text = "";
            }
            if (!lblAirTimeI.Text.Equals("") && (!lblAirTimeM1.Text.Equals("")) && (!lblAirTimeI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblAirTimeI.Text) - Convert.ToSingle(lblAirTimeM1.Text) >= Convert.ToSingle(.015))
                    lblAirTimeM1.ForeColor = Color.Red;
                else
                    lblAirTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblAirTimeM1.Text = "";
                lblAirTimeI.Text = "";
            }

            if (!lblStrideLengthIntoI.Text.Equals("") && (!lblStrideLengthIntoM1.Text.Equals("")) && (!lblStrideLengthIntoI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthIntoI.Text) - Convert.ToSingle(lblStrideLengthIntoM1.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthIntoM1.ForeColor = Color.Red;
                else
                    lblStrideLengthIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthIntoM1.Text = "";
                lblStrideLengthIntoI.Text = "";
            }

            if (!lblStrideLengthOffI.Text.Equals("") && (!lblStrideLengthOffM1.Text.Equals("")) && (!lblStrideLengthOffI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthOffI.Text) - Convert.ToSingle(lblStrideLengthOffM1.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthOffM1.ForeColor = Color.Red;
                else
                    lblStrideLengthOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthOffM1.Text = "";
                lblStrideLengthOffI.Text = "";
            }
            if (!lblStrideLengthTotalI.Text.Equals("") && (!lblStrideLengthTotalM1.Text.Equals("")) && (!lblStrideLengthTotalI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthTotalI.Text) - Convert.ToSingle(lblStrideLengthTotalM1.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthTotalM1.ForeColor = Color.Red;
                else
                    lblStrideLengthTotalM1.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthTotalM1.Text = "";
                lblStrideLengthTotalI.Text = "";
            }
            if (!lblVelocityI.Text.Equals("") && (!lblVelocityHurdleM1.Text.Equals("")) && (!lblVelocityI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblVelocityI.Text) - Convert.ToSingle(lblVelocityHurdleM1.Text) <= Convert.ToSingle(-0.65))
                    lblVelocityHurdleM1.ForeColor = Color.Red;
                else
                    lblVelocityHurdleM1.ForeColor = Color.Black;
            }
            else
            {
                lblVelocityHurdleM1.Text = "";
                lblVelocityI.Text = "";
            }
            if (!lblTouchdownDistanceIntoI.Text.Equals("") && (!lblTouchdownDistanceIntoM1.Text.Equals("")) && (!lblTouchdownDistanceIntoI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblTouchdownDistanceIntoI.Text) - Convert.ToSingle(lblTouchdownDistanceIntoM1.Text) >= Convert.ToSingle(.02))
                    lblTouchdownDistanceIntoM1.ForeColor = Color.Red;
                else
                    lblTouchdownDistanceIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblTouchdownDistanceIntoM1.Text = "";
                lblTouchdownDistanceIntoI.Text = "";
            }

            if (!lblTouchdownDistanceOffI.Text.Equals("") && (!lblTouchdownDistanceOffM1.Text.Equals("")) && (!lblTouchdownDistanceOffI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblTouchdownDistanceOffI.Text) - Convert.ToSingle(lblTouchdownDistanceOffM1.Text) >= Convert.ToSingle(.02))
                    lblTouchdownDistanceOffM1.ForeColor = Color.Red;
                else
                    lblTouchdownDistanceOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblTouchdownDistanceOffM1.Text = "";
                lblTouchdownDistanceOffI.Text = "";
            }
            if (!lblUpperLegAngleatTouchdownIntoI.Text.Equals("") && (!lblUpperLegAngleatTouchdownIntoM1.Text.Equals("")) && (!lblUpperLegAngleatTouchdownIntoI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTouchdownIntoI.Text) - Convert.ToInt16(lblUpperLegAngleatTouchdownIntoM1.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTouchdownIntoM1.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTouchdownIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTouchdownIntoM1.Text = "";
                lblUpperLegAngleatTouchdownIntoI.Text = "";
            }
            if (!lblUpperLegAngleatTakeoffIntoI.Text.Equals("") && (!lblUpperLegAngleatTakeoffIntoM1.Text.Equals("")) && (!lblUpperLegAngleatTakeoffIntoI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTakeoffIntoI.Text) - Convert.ToInt16(lblUpperLegAngleatTakeoffIntoM1.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTakeoffIntoM1.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTakeoffIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTakeoffIntoM1.Text = "";
                lblUpperLegAngleatTakeoffIntoI.Text = "";
            }

            if (!lblUpperLegAngleatTouchdownOffI.Text.Equals("") && (!lblUpperLegAngleatTouchdownOffM1.Text.Equals("")) && (!lblUpperLegAngleatTouchdownOffI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTouchdownOffI.Text) - Convert.ToInt16(lblUpperLegAngleatTouchdownOffM1.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTouchdownOffM1.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTouchdownOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTouchdownOffM1.Text = "";
                lblUpperLegAngleatTouchdownOffI.Text = "";
            }
            if (!lblUpperLegAngleatTakeoffOffI.Text.Equals("") && (!lblUpperLegAngleatTakeoffOffM1.Text.Equals("")) && (!lblUpperLegAngleatTakeoffOffI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTakeoffOffI.Text) - Convert.ToInt16(lblUpperLegAngleatTakeoffOffM1.Text) <= Convert.ToInt16(-7))
                    lblUpperLegAngleatTakeoffOffM1.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTakeoffOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTakeoffOffM1.Text = "";
                lblUpperLegAngleatTakeoffOffI.Text = "";
            }
            if (!lblLeadLowerLegMinimumAngleIntoI.Text.Equals("") && (!lblLeadLowerLegMinimumAngleIntoM1.Text.Equals("")) && (!lblLeadLowerLegMinimumAngleIntoI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoI.Text) - Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoM1.Text) <= Convert.ToInt16(-7))
                    lblLeadLowerLegMinimumAngleIntoM1.ForeColor = Color.Red;
                else
                    lblLeadLowerLegMinimumAngleIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegMinimumAngleIntoM1.Text = "";
                lblLeadLowerLegMinimumAngleIntoI.Text = "";
            }
            if (!lblLeadLowerLegAngleatAnkleCrossIntoI.Text.Equals("") && (!lblLeadLowerLegAngleatAnkleCrossIntoM1.Text.Equals("")) && (!lblLeadLowerLegAngleatAnkleCrossIntoI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoI.Text) - Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoM1.Text) <= Convert.ToInt16(-7))
                    lblLeadLowerLegAngleatAnkleCrossIntoM1.ForeColor = Color.Red;
                else
                    lblLeadLowerLegAngleatAnkleCrossIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegAngleatAnkleCrossIntoM1.Text = "";
                lblLeadLowerLegAngleatAnkleCrossIntoI.Text = "";
            }

            if (!lblLowerLegAngleatTouchdownOffI.Text.Equals("") && (!lblLowerLegAngleatTouchdownOffM1.Text.Equals("")) && (!lblLowerLegAngleatTouchdownOffI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblLowerLegAngleatTouchdownOffI.Text) - Convert.ToInt16(lblLowerLegAngleatTouchdownOffM1.Text) <= Convert.ToInt16(-7))
                    lblLowerLegAngleatTouchdownOffM1.ForeColor = Color.Red;
                else
                    lblLowerLegAngleatTouchdownOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleatTouchdownOffM1.Text = "";
                lblLowerLegAngleatTouchdownOffI.Text = "";
            }

            if (!lblLowerLegAngleatTakeoffOffI.Text.Equals("") && (!lblLowerLegAngleatTakeoffOffM1.Text.Equals("")) && (!lblLowerLegAngleatTakeoffOffI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblLowerLegAngleatTakeoffOffI.Text) - Convert.ToInt16(lblLowerLegAngleatTakeoffOffM1.Text) >= Convert.ToInt16(7))
                    lblLowerLegAngleatTakeoffOffM1.ForeColor = Color.Red;
                else
                    lblLowerLegAngleatTakeoffOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleatTakeoffOffM1.Text = "";
                lblLowerLegAngleatTakeoffOffI.Text = "";
            }

            //hurdle current 
            if (!lblGroundTimeIntoF.Text.Equals("") && (!lblGroundTimeIntoM2.Text.Equals("")) && (!lblGroundTimeIntoF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblGroundTimeIntoF.Text) - Convert.ToSingle(lblGroundTimeIntoM2.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeIntoM2.ForeColor = Color.Red;
                else
                    lblGroundTimeIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeIntoM2.Text = "";
                lblGroundTimeIntoF.Text = "";
            }
            if (!lblGroundTimeOffF.Text.Equals("") && (!lblGroundTimeOffM2.Text.Equals("")) && (!lblGroundTimeOffF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblGroundTimeOffF.Text) - Convert.ToSingle(lblGroundTimeOffM2.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeOffM2.ForeColor = Color.Red;
                else
                    lblGroundTimeOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeOffM2.Text = "";
                lblGroundTimeOffF.Text = "";
            }
            if (!lblAirTimeF.Text.Equals("") && (!lblAirTimeM2.Text.Equals("")) && (!lblAirTimeF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblAirTimeF.Text) - Convert.ToSingle(lblAirTimeM2.Text) >= Convert.ToSingle(.015))
                    lblAirTimeM2.ForeColor = Color.Red;
                else
                    lblAirTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblAirTimeM2.Text = "";
                lblAirTimeF.Text = "";
            }

            if (!lblStrideLengthIntoF.Text.Equals("") && (!lblStrideLengthIntoM2.Text.Equals("")) && (!lblStrideLengthIntoF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthIntoF.Text) - Convert.ToSingle(lblStrideLengthIntoM2.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthIntoM2.ForeColor = Color.Red;
                else
                    lblStrideLengthIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthIntoM2.Text = "";
                lblStrideLengthIntoF.Text = "";
            }

            if (!lblStrideLengthOffF.Text.Equals("") && (!lblStrideLengthOffM2.Text.Equals("")) && (!lblStrideLengthOffF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthOffF.Text) - Convert.ToSingle(lblStrideLengthOffM2.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthOffM2.ForeColor = Color.Red;
                else
                    lblStrideLengthOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthOffM2.Text = "";
                lblStrideLengthOffF.Text = "";
            }
            if (!lblStrideLengthTotalF.Text.Equals("") && (!lblStrideLengthTotalM2.Text.Equals("")) && (!lblStrideLengthTotalF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthTotalF.Text) - Convert.ToSingle(lblStrideLengthTotalM2.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthTotalM2.ForeColor = Color.Red;
                else
                    lblStrideLengthTotalM2.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthTotalM2.Text = "";
                lblStrideLengthTotalF.Text = "";
            }
            if (!lblVelocityHurdleF.Text.Equals("") && (!lblVelocityHurdleM2.Text.Equals("")) && (!lblVelocityHurdleF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblVelocityHurdleF.Text) - Convert.ToSingle(lblVelocityHurdleM2.Text) <= Convert.ToSingle(-0.65))
                    lblVelocityHurdleM2.ForeColor = Color.Red;
                else
                    lblVelocityHurdleM2.ForeColor = Color.Black;
            }
            else
            {
                lblVelocityHurdleM2.Text = "";
                lblVelocityHurdleF.Text = "";
            }
            if (!lblTouchdownDistanceIntoF.Text.Equals("") && (!lblTouchdownDistanceIntoM2.Text.Equals("")) && (!lblTouchdownDistanceIntoF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblTouchdownDistanceIntoF.Text) - Convert.ToSingle(lblTouchdownDistanceIntoM2.Text) >= Convert.ToSingle(.02))
                    lblTouchdownDistanceIntoM2.ForeColor = Color.Red;
                else
                    lblTouchdownDistanceIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblTouchdownDistanceIntoM2.Text = "";
                lblTouchdownDistanceIntoF.Text = "";
            }

            if (!lblTouchdownDistanceOffF.Text.Equals("") && (!lblTouchdownDistanceOffM2.Text.Equals("")) && (!lblTouchdownDistanceOffF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblTouchdownDistanceOffF.Text) - Convert.ToSingle(lblTouchdownDistanceOffM2.Text) >= Convert.ToSingle(.02))
                    lblTouchdownDistanceOffM2.ForeColor = Color.Red;
                else
                    lblTouchdownDistanceOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblTouchdownDistanceOffM2.Text = "";
                lblTouchdownDistanceOffF.Text = "";
            }
            if (!lblUpperLegAngleatTouchdownIntoF.Text.Equals("") && (!lblUpperLegAngleatTouchdownIntoM2.Text.Equals("")) && (!lblUpperLegAngleatTouchdownIntoF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTouchdownIntoF.Text) - Convert.ToInt16(lblUpperLegAngleatTouchdownIntoM2.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTouchdownIntoM2.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTouchdownIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTouchdownIntoM2.Text = "";
                lblUpperLegAngleatTouchdownIntoF.Text = "";
            }
            if (!lblUpperLegAngleatTakeoffIntoF.Text.Equals("") && (!lblUpperLegAngleatTakeoffIntoM2.Text.Equals("")) && (!lblUpperLegAngleatTakeoffIntoF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTakeoffIntoF.Text) - Convert.ToInt16(lblUpperLegAngleatTakeoffIntoM2.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTakeoffIntoM2.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTakeoffIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTakeoffIntoM2.Text = "";
                lblUpperLegAngleatTakeoffIntoF.Text = "";
            }

            if (!lblUpperLegAngleatTouchdownOffF.Text.Equals("") && (!lblUpperLegAngleatTouchdownOffM2.Text.Equals("")) && (!lblUpperLegAngleatTouchdownOffF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTouchdownOffF.Text) - Convert.ToInt16(lblUpperLegAngleatTouchdownOffM2.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTouchdownOffM2.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTouchdownOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTouchdownOffM2.Text = "";
                lblUpperLegAngleatTouchdownOffF.Text = "";
            }
            if (!lblUpperLegAngleatTakeoffOffF.Text.Equals("") && (!lblUpperLegAngleatTakeoffOffM2.Text.Equals("")) && (!lblUpperLegAngleatTakeoffOffF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTakeoffOffF.Text) - Convert.ToInt16(lblUpperLegAngleatTakeoffOffM2.Text) <= Convert.ToInt16(-7))
                    lblUpperLegAngleatTakeoffOffM2.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTakeoffOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTakeoffOffM2.Text = "";
                lblUpperLegAngleatTakeoffOffF.Text = "";
            }
            if (!lblLeadLowerLegMinimumAngleIntoF.Text.Equals("") && (!lblLeadLowerLegMinimumAngleIntoM2.Text.Equals("")) && (!lblLeadLowerLegMinimumAngleIntoF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoF.Text) - Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoM2.Text) <= Convert.ToInt16(-7))
                    lblLeadLowerLegMinimumAngleIntoM2.ForeColor = Color.Red;
                else
                    lblLeadLowerLegMinimumAngleIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegMinimumAngleIntoM2.Text = "";
                lblLeadLowerLegMinimumAngleIntoF.Text = "";
            }
            if (!lblLeadLowerLegAngleatAnkleCrossIntoF.Text.Equals("") && (!lblLeadLowerLegAngleatAnkleCrossIntoM2.Text.Equals("")) && (!lblLeadLowerLegAngleatAnkleCrossIntoF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoF.Text) - Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoM2.Text) <= Convert.ToInt16(-7))
                    lblLeadLowerLegAngleatAnkleCrossIntoM2.ForeColor = Color.Red;
                else
                    lblLeadLowerLegAngleatAnkleCrossIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegMinimumAngleIntoM2.Text = "";
                lblLeadLowerLegAngleatAnkleCrossIntoF.Text = "";
            }

            if (!lblLowerLegAngleatTouchdownOffF.Text.Equals("") && (!lblLowerLegAngleatTouchdownOffM2.Text.Equals("")) && (!lblLowerLegAngleatTouchdownOffF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblLowerLegAngleatTouchdownOffF.Text) - Convert.ToInt16(lblLowerLegAngleatTouchdownOffM2.Text) <= Convert.ToInt16(-7))
                    lblLowerLegAngleatTouchdownOffM2.ForeColor = Color.Red;
                else
                    lblLowerLegAngleatTouchdownOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleatTouchdownOffF.Text = "";
                lblLowerLegAngleatTouchdownOffF.Text = "";
            }
            if (!lblLowerLegAngleatTakeoffOffF.Text.Equals("") && (!lblLowerLegAngleatTakeoffOffM2.Text.Equals("")) && (!lblLowerLegAngleatTakeoffOffF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblLowerLegAngleatTakeoffOffF.Text) - Convert.ToInt16(lblLowerLegAngleatTakeoffOffM2.Text) >= Convert.ToInt16(7))
                    lblLowerLegAngleatTakeoffOffM2.ForeColor = Color.Red;
                else
                    lblLowerLegAngleatTakeoffOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleatTakeoffOffM2.Text = "";
                lblLowerLegAngleatTakeoffOffF.Text = "";
            }
        }


        catch (Exception ex)
        {
            ex.Message.ToString();
        }

        WriteObjectsToPageAjax();
    }

    public void GetSprintLeftMovieVariablesforNonTires(int LessonId, string lpath)
    {
        ds = sae.GetAllSprintAthletesData(LessonId);
        if (DropDownList1.SelectedValue != "")
        {
            try
            {
                int movieid = Convert.ToInt32(DropDownList1.SelectedItem.Value);
                leftMovie = DataRepository.MovieProvider.GetByMovieId(movieid);
                string location = sae.SelectLessonlocation(LessonId.ToString());
                string date = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
                string LeftSession = date + "-" + location;
                lblleftmovie.Text = LeftSession;
            }
            catch { }
        }
        if (lpath.Contains("Initial"))
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                lblGroundTimeLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Ground Time Left"].ToString());
                lblGroundTimeRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Ground Time Right"].ToString());
                lblGroundTimeAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Ground Time Average"].ToString());
                lblAirTimeLeftToRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Air Time Left to Right"].ToString());
                lblAirTimeRightToLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Air Time Right to Left"].ToString());
                lblAirTimeAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Air Time Average"].ToString());
                lblTimeToUpperLegFullFlexionLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Time to Upper Leg Full Flexion Left"].ToString());
                lblTimeToUpperLegFullFlexionRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Time to Upper Leg Full Flexion Right"].ToString());
                lblTimeToUpperLegFullFlexionAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Time to Upper Leg Full Flexion Average"].ToString());

                lblStrideRateI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Stride Rate"].ToString());

                lblStrideLengthLeftToRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Stride Length Left to Right"].ToString());
                lblStrideLengthRightToLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Stride Length Right to Left"].ToString());
                lblStrideLengthAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Stride Length Average"].ToString());

                lblVelocity.Text = Convert.ToString(ds.Tables[0].Rows[0]["Velocity"].ToString());

                lblTouchDownDistanceLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Touchdown Distance Left"].ToString());
                lblTouchDownDistanceRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Touchdown Distance Right"].ToString());
                lblTouchDownDistanceAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Touchdown Distance Average"].ToString());

                lblUpperLegFullExtentionAngleLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Extension Angle Left"].ToString());
                lblUpperLegFullExtentionAngleRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Extension Angle Right"].ToString());
                lblUpperLegFullExtentionAngleAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Extension Angle Average"].ToString());

                lblLowerLegAngleAtTakeOfLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Takeoff Left"].ToString());
                lblLowerLegAngleAtTakeOfRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Takeoff Right"].ToString());
                lblLowerLegAngleAtTakeOfAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Takeoff Average"].ToString());

                lblLowerLegFullFlexionAngleLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Full Flexion Angle Left"].ToString());
                lblLowerLegFullFlexionAngleRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Full Flexion Angle Right"].ToString());
                lblLowerLegFullFlexionAngleAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Full Flexion Angle Average"].ToString());

                lblLowerLegAngleAtAnkleCrossLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Ankle Cross Left"].ToString());
                lblLowerLegAngleAtAnkleCrossRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Ankle Cross Right"].ToString());
                lblLowerLegAngleAtAnkleCrossAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Ankle Cross Average"].ToString());

                lblUpperLegFullFlexionAngleLeftI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Flexion Angle Left"].ToString());
                lblUpperLegFullFlexionAngleRightI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Flexion Angle Right"].ToString());
                lblUpperLegFullFlexionAngleAverageI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Flexion Angle Average"].ToString());
            }
            //model data
            if (ds.Tables[1].Rows.Count > 0)
            {
                lblGroundTimeLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTime"].ToString());


                lblGroundTimeRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTime"].ToString());
                lblGroundTimeAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTime"].ToString());


                lblAirTimeLeftToRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["AirTime"].ToString());
                lblAirTimeRightToLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["AirTime"].ToString());
                lblAirTimeAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["AirTime"].ToString());


                lblTimeToUpperLegFullFlexionLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["FullFlexionTime"].ToString());
                lblTimeToUpperLegFullFlexionRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["FullFlexionTime"].ToString());
                lblTimeToUpperLegFullFlexionAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["FullFlexionTime"].ToString());

                lblStrideRateM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Stride Rate"].ToString());

                lblStrideLengthLeftToRighM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLength"].ToString());
                lblStrideLengthRightToLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLength"].ToString());
                lblStrideLengthAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLength"]);

                lblVelocityM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Velocity"].ToString());

                lblTouchDownDistanceLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["COGDistance"].ToString());
                lblTouchDownDistanceRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["COGDistance"].ToString());
                lblTouchDownDistanceAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["COGDistance"].ToString());

                lblUpperLegFullExtentionAngleLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullExtensionAngle"].ToString());
                lblUpperLegFullExtentionAngleRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullExtensionAngle"].ToString());
                lblUpperLegFullExtentionAngleAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullExtensionAngle"].ToString());

                lblLowerLegAngleAtTakeOfLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleTakeoff"].ToString());
                lblLowerLegAngleAtTakeOfRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleTakeoff"].ToString());
                lblLowerLegAngleAtTakeOfAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleTakeoff"].ToString());

                lblLowerLegFullFlexionAngleLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLFullFlexionAngle"].ToString());
                lblLowerLegFullFlexionAngleRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLFullFlexionAngle"].ToString());
                lblLowerLegFullFlexionAngleAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLFullFlexionAngle"].ToString());

                lblLowerLegAngleAtAnkleCrossLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleAC"].ToString());
                lblLowerLegAngleAtAnkleCrossRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleAC"].ToString());
                lblLowerLegAngleAtAnkleCrossAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleAC"].ToString());

                lblUpperLegFullFlexionAngleLeftM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullFlexionAngle"].ToString());
                lblUpperLegFullFlexionAngleRightM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullFlexionAngle"].ToString());
                lblUpperLegFullFlexionAngleAverageM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullFlexionAngle"].ToString());
            }

            #region[Initial values]
            if (!lblGroundTimeLeftI.Text.Equals("") && (!lblGroundTimeAverageM1.Text.Equals("")) && (!lblGroundTimeLeftI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblGroundTimeLeftI.Text) - Convert.ToSingle(lblGroundTimeAverageM1.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeLeftM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblGroundTimeLeftM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblGroundTimeLeftM1.Text = "";
                lblGroundTimeLeftI.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblGroundTimeRightI.Text.Equals("") && (!lblGroundTimeAverageM1.Text.Equals("")) && (!lblGroundTimeRightI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblGroundTimeRightI.Text) - Convert.ToSingle(lblGroundTimeAverageM1.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeRightM1.ForeColor = Color.Red;
                else
                    lblGroundTimeRightM1.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeRightM1.Text = "";
                lblGroundTimeRightI.Text = "";
            }


            if (!lblGroundTimeAverageI.Text.Equals("") && (!lblGroundTimeAverageM1.Text.Equals("")) && (!lblGroundTimeAverageI.Text.Equals("0.000")))
            {
                if (lblGroundTimeLeftM1.ForeColor == Color.Red && lblGroundTimeRightM1.ForeColor == Color.Red)
                    lblGroundTimeAverageM1.ForeColor = Color.Red;
                else
                    lblGroundTimeAverageM1.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeAverageM1.Text = "";
                lblGroundTimeAverageI.Text = "";
            }

            //Air time 
            if (!lblAirTimeLeftToRightI.Text.Equals("") && (!lblAirTimeAverageM1.Text.Equals("")) && (!lblAirTimeAverageI.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblAirTimeLeftToRightI.Text) - Convert.ToSingle(lblAirTimeAverageM1.Text)) >= Convert.ToSingle(.005))
                {
                    if (Convert.ToSingle(lblAirTimeLeftToRightI.Text) > Convert.ToSingle(lblAirTimeAverageM1.Text))
                    {
                        sprintAirTimeLtoRLongI = true;
                        sprintAirTimeLtoRShortI = false;
                    }
                    else
                    {
                        sprintAirTimeLtoRLongI = false;
                        sprintAirTimeLtoRShortI = true;
                    }
                    lblAirTimeLeftToRightM1.ForeColor = Color.Red;
                }
                else
                {
                    sprintAirTimeLtoRShortI = false;
                    sprintAirTimeLtoRLongI = false;
                    lblAirTimeLeftToRightM1.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintAirTimeLtoRShortI = false;
                sprintAirTimeLtoRLongI = false;

                lblAirTimeLeftToRightM1.Text = "";
                lblAirTimeLeftToRightI.Text = "";
            }

            if (!lblAirTimeRightToLeftI.Text.Equals("") && (!lblAirTimeAverageM1.Text.Equals("")) && (!lblAirTimeRightToLeftI.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblAirTimeRightToLeftI.Text) - Convert.ToSingle(lblAirTimeAverageM1.Text)) >= Convert.ToSingle(.005))
                {
                    if (Convert.ToSingle(lblAirTimeRightToLeftI.Text) > Convert.ToSingle(lblAirTimeAverageM1.Text))
                    {
                        sprintAirTimeRtoLLongI = true;
                        sprintAirTimeRtoLShortI = false;

                    }
                    else
                    {
                        sprintAirTimeRtoLLongI = false;
                        sprintAirTimeRtoLShortI = true;
                    }
                    lblAirTimeRightToLeftM1.ForeColor = Color.Red;
                }
                else
                {
                    sprintAirTimeRtoLShortI = false;
                    sprintAirTimeRtoLLongI = false;
                    lblAirTimeRightToLeftM1.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintAirTimeRtoLShortI = false;
                sprintAirTimeRtoLLongI = false;

                lblAirTimeRightToLeftM1.Text = "";
                lblAirTimeRightToLeftI.Text = "";
            }

            if (!lblAirTimeAverageI.Text.Equals("") && (!lblAirTimeAverageM1.Text.Equals("")) && (!lblAirTimeAverageI.Text.Equals("0.000")))
            {
                // if (Math.Abs(Convert.ToSingle(lblAirTimeAverageI.Text) - Convert.ToSingle(lblAirTimeAverageM1.Text)) >= Convert.ToSingle(.005))
                if (sprintAirTimeRtoLShortI && sprintAirTimeLtoRShortI)
                {
                    sprintAirTimeAverageI = true;
                    lblAirTimeAverageM1.ForeColor = Color.Red;

                }
                else if (sprintAirTimeRtoLLongI && sprintAirTimeLtoRLongI)
                {
                    sprintAirTimeAverageI = true;
                    lblAirTimeAverageM1.ForeColor = Color.Red;
                }
                else
                {
                    sprintAirTimeAverageI = false;
                    lblAirTimeAverageM1.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintAirTimeAverageI = false;
                lblAirTimeAverageM1.Text = "";
                lblAirTimeAverageI.Text = "";
            }

            // TimeToUpperLegFullFlexion

            if (!lblTimeToUpperLegFullFlexionLeftI.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM1.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionLeftI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTimeToUpperLegFullFlexionLeftI.Text) - Convert.ToSingle(lblTimeToUpperLegFullFlexionAverageM1.Text) <= Convert.ToSingle(-0.01))
                    lblTimeToUpperLegFullFlexionLeftM1.ForeColor = Color.Red;
                else
                    lblTimeToUpperLegFullFlexionLeftM1.ForeColor = Color.Black;
            }
            else
            {
                lblTimeToUpperLegFullFlexionLeftM1.Text = "";
                lblTimeToUpperLegFullFlexionLeftI.Text = "";
            }


            if (!lblTimeToUpperLegFullFlexionRightI.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM1.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionRightI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTimeToUpperLegFullFlexionRightI.Text) - Convert.ToSingle(lblTimeToUpperLegFullFlexionAverageM1.Text) <= Convert.ToSingle(-0.01))
                    lblTimeToUpperLegFullFlexionRightM1.ForeColor = Color.Red;
                else
                    lblTimeToUpperLegFullFlexionRightM1.ForeColor = Color.Black;
            }
            else
            {
                lblTimeToUpperLegFullFlexionRightM1.Text = "";
                lblTimeToUpperLegFullFlexionRightI.Text = "";
            }

            if (!lblTimeToUpperLegFullFlexionAverageI.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM1.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionAverageI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTimeToUpperLegFullFlexionAverageI.Text) - Convert.ToSingle(lblTimeToUpperLegFullFlexionAverageM1.Text) <= Convert.ToSingle(-0.01))
                    lblTimeToUpperLegFullFlexionAverageM1.ForeColor = Color.Red;
                else
                    lblTimeToUpperLegFullFlexionAverageM1.ForeColor = Color.Black;
            }
            else
            {
                lblTimeToUpperLegFullFlexionAverageM1.Text = "";
                lblTimeToUpperLegFullFlexionAverageI.Text = "";
            }

            //Stride rate

            if (!lblStrideRateI.Text.Equals("") && (!lblStrideRateM1.Text.Equals("")) && (!lblStrideRateI.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideRateI.Text) - Convert.ToSingle(lblStrideRateM1.Text)) >= Convert.ToSingle(0.1))
                    lblStrideRateM1.ForeColor = Color.Red;
                else
                    lblStrideRateM1.ForeColor = Color.Black;
            }
            else
            {
                lblStrideRateM1.Text = "";
                lblStrideRateI.Text = "";
            }

            //Stride length

            #region[stride length]
            if (!lblStrideLengthLeftToRightI.Text.Equals("") && (!lblStrideLengthAverageM1.Text.Equals("")) && (!lblStrideLengthLeftToRightI.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthLeftToRightI.Text) - Convert.ToSingle(lblStrideLengthAverageM1.Text)) >= Convert.ToSingle(0.1))
                {
                    if (Convert.ToSingle(lblStrideLengthLeftToRightI.Text) > Convert.ToSingle(lblStrideLengthAverageM1.Text))
                    {
                        if (sprintAirTimeLtoRLongI)
                        {
                            sprintStrideLengthLtoRShortI = false;
                            sprintStrideLengthLtoRLongI = true;
                            lblStrideLengthLeftToRighM1.ForeColor = Color.Red;
                        }
                        else
                        {
                            sprintStrideLengthLtoRShortI = false;
                            sprintStrideLengthLtoRLongI = false;
                            lblStrideLengthLeftToRighM1.ForeColor = Color.Black;
                        }
                    }
                    else if (sprintAirTimeLtoRShortI)
                    {
                        sprintStrideLengthLtoRShortI = true;
                        sprintStrideLengthLtoRLongI = false;
                        lblStrideLengthLeftToRighM1.ForeColor = Color.Red;
                    }
                    else
                    {
                        sprintStrideLengthLtoRShortI = false;
                        sprintStrideLengthLtoRLongI = false;
                        lblStrideLengthLeftToRighM1.ForeColor = Color.Black;
                    }
                }
                else
                {
                    sprintStrideLengthLtoRShortI = false;
                    sprintStrideLengthLtoRLongI = false;
                    lblStrideLengthLeftToRighM1.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthLtoRShortI = false;
                sprintStrideLengthLtoRLongI = false;
                lblStrideLengthLeftToRighM1.Text = "";
                lblStrideLengthLeftToRightI.Text = "";
            }

            if (!lblStrideLengthRightToLeftI.Text.Equals("") && (!lblStrideLengthAverageM1.Text.Equals("")) && (!lblStrideLengthRightToLeftI.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthRightToLeftI.Text) - Convert.ToSingle(lblStrideLengthAverageM1.Text)) >= Convert.ToSingle(0.1))
                {
                    if (Convert.ToSingle(lblStrideLengthRightToLeftI.Text) > Convert.ToSingle(lblStrideLengthAverageM1.Text))
                    {
                        if (sprintAirTimeRtoLLongI == true)
                        {
                            sprintStrideLengthRtoLShortI = false;
                            sprintStrideLengthRtoLLongI = true;

                            lblStrideLengthRightToLeftM1.ForeColor = Color.Red;
                        }
                        else
                        {
                            sprintStrideLengthRtoLShortI = false;
                            sprintStrideLengthRtoLLongI = false;

                            lblStrideLengthRightToLeftM1.ForeColor = Color.Black;
                        }
                    }
                    else if (sprintAirTimeRtoLShortI)
                    {
                        sprintStrideLengthRtoLShortI = true;
                        sprintStrideLengthRtoLLongI = false;

                        lblStrideLengthRightToLeftM1.ForeColor = Color.Red;
                    }
                    else
                    {
                        sprintStrideLengthRtoLShortI = false;
                        sprintStrideLengthRtoLLongI = false;

                        lblStrideLengthRightToLeftM1.ForeColor = Color.Black;
                    }
                }
                else
                {
                    sprintStrideLengthRtoLShortI = false;
                    sprintStrideLengthRtoLLongI = false;
                    lblStrideLengthRightToLeftM1.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthRtoLShortI = false;
                sprintStrideLengthRtoLLongI = false;
                lblStrideLengthRightToLeftM1.Text = "";
                lblStrideLengthRightToLeftI.Text = "";
            }

            if (!lblStrideLengthAverageI.Text.Equals("") && (!lblStrideLengthAverageM1.Text.Equals("")) && (!lblStrideLengthAverageI.Text.Equals("0.000")))
            {
                if (sprintStrideLengthRtoLShortI == true && sprintStrideLengthLtoRShortI == true)
                {
                    sprintStrideLengthAverageI = true;
                    lblStrideLengthAverageM1.ForeColor = Color.Red;
                }
                else if (sprintStrideLengthRtoLLongI && sprintStrideLengthLtoRLongI)
                {
                    sprintStrideLengthAverageI = true;
                    lblStrideLengthAverageM1.ForeColor = Color.Red;
                }
                else
                {
                    sprintStrideLengthAverageI = false;
                    lblStrideLengthAverageM1.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthAverageI = false;
                lblStrideLengthAverageM1.Text = "";
                lblStrideLengthAverageI.Text = "";
            }
            #endregion[stride length]

            //velocity     

            if (!lblVelocity.Text.Equals("") && (!lblVelocityM1.Text.Equals("")) && (!lblVelocity.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblVelocity.Text) - Convert.ToSingle(lblVelocityM1.Text) <= Convert.ToSingle(-0.65))
                    lblVelocityM1.ForeColor = Color.Red;
                else
                    lblVelocityM1.ForeColor = Color.Black;
            }
            else
            {
                lblVelocityM1.Text = "";
                lblVelocity.Text = "";
            }

            //TouchDownDistance

            if (!lblTouchDownDistanceLeftI.Text.Equals("") && (!lblTouchDownDistanceAverageM1.Text.Equals("")) && (!lblTouchDownDistanceLeftI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTouchDownDistanceLeftI.Text) - Convert.ToSingle(lblTouchDownDistanceAverageM1.Text) >= Convert.ToSingle(.02))
                    lblTouchDownDistanceLeftM1.ForeColor = Color.Red;
                else
                    lblTouchDownDistanceLeftM1.ForeColor = Color.Black;
            }
            else
            {
                lblTouchDownDistanceLeftM1.Text = "";
                lblTouchDownDistanceLeftI.Text = "";
            }

            if (!lblTouchDownDistanceRightI.Text.Equals("") && (!lblTouchDownDistanceAverageM1.Text.Equals("")) && (!lblTouchDownDistanceRightI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTouchDownDistanceRightI.Text) - Convert.ToSingle(lblTouchDownDistanceAverageM1.Text) >= Convert.ToSingle(.02))
                    lblTouchDownDistanceRightM1.ForeColor = Color.Red;
                else
                    lblTouchDownDistanceRightM1.ForeColor = Color.Black;
            }
            else
            {
                lblTouchDownDistanceRightM1.Text = "";
                lblTouchDownDistanceRightI.Text = "";
            }

            if (!lblTouchDownDistanceAverageI.Text.Equals("") && (!lblTouchDownDistanceAverageM1.Text.Equals("")) && (!lblTouchDownDistanceAverageI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTouchDownDistanceAverageI.Text) - Convert.ToSingle(lblTouchDownDistanceAverageM1.Text) >= Convert.ToSingle(.02))
                    lblTouchDownDistanceAverageM1.ForeColor = Color.Red;
                else
                    lblTouchDownDistanceAverageM1.ForeColor = Color.Black;
            }
            else
            {
                lblTouchDownDistanceAverageM1.Text = "";
                lblTouchDownDistanceAverageI.Text = "";
            }

            if (!lblUpperLegFullExtentionAngleLeftI.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullExtentionAngleLeftI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullExtentionAngleLeftI.Text) - Convert.ToInt16(lblUpperLegFullExtentionAngleAverageM1.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullExtentionAngleLeftM1.ForeColor = Color.Red;
                else
                    lblUpperLegFullExtentionAngleLeftM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullExtentionAngleLeftM1.Text = "";
                lblUpperLegFullExtentionAngleLeftI.Text = "";
            }

            if (!lblUpperLegFullExtentionAngleRightI.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullExtentionAngleRightI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullExtentionAngleRightI.Text) - Convert.ToInt16(lblUpperLegFullExtentionAngleAverageM1.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullExtentionAngleRightM1.ForeColor = Color.Red;
                else
                    lblUpperLegFullExtentionAngleRightM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullExtentionAngleRightM1.Text = "";
                lblUpperLegFullExtentionAngleRightI.Text = "";
            }

            if (!lblUpperLegFullExtentionAngleAverageI.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullExtentionAngleAverageI.Text.Equals("0")))
            {
                if (lblUpperLegFullExtentionAngleLeftM1.ForeColor == Color.Red && lblUpperLegFullExtentionAngleRightM1.ForeColor == Color.Red)
                    lblUpperLegFullExtentionAngleAverageM1.ForeColor = Color.Red;
                else
                    lblUpperLegFullExtentionAngleAverageM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullExtentionAngleAverageM1.Text = "";
                lblUpperLegFullExtentionAngleAverageI.Text = "";
            }

            //LowerLegAngleAtTakeOf

            if (!lblLowerLegAngleAtTakeOfLeftI.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfLeftI.Text.Equals("0")))
            {
                if (Convert.ToSingle(lblLowerLegAngleAtTakeOfLeftI.Text) - Convert.ToSingle(lblLowerLegAngleAtTakeOfAverageM1.Text) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtTakeOfLeftM1.ForeColor = Color.Red;
                else
                    lblLowerLegAngleAtTakeOfLeftM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleAtTakeOfLeftM1.Text = "";
                lblLowerLegAngleAtTakeOfLeftI.Text = "";
            }

            if (!lblLowerLegAngleAtTakeOfRightI.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfRightI.Text.Equals("0")))
            {
                if (Convert.ToSingle(lblLowerLegAngleAtTakeOfRightI.Text) - Convert.ToSingle(lblLowerLegAngleAtTakeOfAverageM1.Text) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtTakeOfRightM1.ForeColor = Color.Red;
                else
                    lblLowerLegAngleAtTakeOfRightM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleAtTakeOfRightM1.Text = "";
                lblLowerLegAngleAtTakeOfRightI.Text = "";
            }

            if (!lblLowerLegAngleAtTakeOfAverageI.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfAverageI.Text.Equals("0")))
            {
                if (lblLowerLegAngleAtTakeOfLeftM1.ForeColor == Color.Red && lblLowerLegAngleAtTakeOfRightM1.ForeColor == Color.Red)
                    lblLowerLegAngleAtTakeOfAverageM1.ForeColor = Color.Red;
                else
                    lblLowerLegAngleAtTakeOfAverageM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleAtTakeOfAverageM1.Text = "";
                lblLowerLegAngleAtTakeOfAverageI.Text = "";
            }

            //LowerLegFullFlexionAngle

            if (!lblLowerLegFullFlexionAngleLeftI.Text.Equals("") && (!lblLowerLegFullFlexionAngleLeftM1.Text.Equals("")) && (!lblLowerLegFullFlexionAngleLeftI.Text.Equals("0")))
            {
                if (Math.Abs(Convert.ToInt16(lblLowerLegFullFlexionAngleLeftI.Text) - Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM1.Text)) >= Convert.ToInt16(7))
                    lblLowerLegFullFlexionAngleLeftM1.ForeColor = Color.Red;
                else
                    lblLowerLegFullFlexionAngleLeftM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegFullFlexionAngleLeftM1.Text = "";
                lblLowerLegFullFlexionAngleLeftI.Text = "";
            }

            if (!lblLowerLegFullFlexionAngleRightI.Text.Equals("") && (!lblLowerLegFullFlexionAngleRightM1.Text.Equals("")) && (!lblLowerLegFullFlexionAngleRightI.Text.Equals("0")))
            {
                if (Math.Abs(Convert.ToInt16(lblLowerLegFullFlexionAngleRightI.Text) - Convert.ToInt16(lblLowerLegFullFlexionAngleRightM1.Text)) >= Convert.ToInt16(7))
                    lblLowerLegFullFlexionAngleRightM1.ForeColor = Color.Red;
                else
                    lblLowerLegFullFlexionAngleRightM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegFullFlexionAngleRightM1.Text = "";
                lblLowerLegFullFlexionAngleRightI.Text = "";
            }

            if (!lblLowerLegFullFlexionAngleAverageI.Text.Equals("") && (!lblLowerLegFullFlexionAngleAverageM1.Text.Equals("")) && (!lblLowerLegFullFlexionAngleAverageI.Text.Equals("0")))
            {
                if (lblLowerLegFullFlexionAngleLeftM1.ForeColor == Color.Red && lblLowerLegFullFlexionAngleRightM1.ForeColor == Color.Red)
                {
                    if ((Convert.ToInt16(lblLowerLegFullFlexionAngleLeftI.Text) > Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM1.Text)) && (Convert.ToInt16(lblLowerLegFullFlexionAngleRightI.Text) > Convert.ToInt16(lblLowerLegFullFlexionAngleRightM1.Text)))
                        lblLowerLegFullFlexionAngleAverageM1.ForeColor = Color.Red;
                    else
                    {
                        if ((Convert.ToInt16(lblLowerLegFullFlexionAngleLeftI.Text) < Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM1.Text)) && (Convert.ToInt16(lblLowerLegFullFlexionAngleRightI.Text) < Convert.ToInt16(lblLowerLegFullFlexionAngleRightM1.Text)))
                            lblLowerLegFullFlexionAngleAverageM1.ForeColor = Color.Red;
                        else
                            lblLowerLegFullFlexionAngleAverageM1.ForeColor = Color.Black;
                    }
                }
                else
                    lblLowerLegFullFlexionAngleAverageM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegFullFlexionAngleAverageM1.Text = "";
                lblLowerLegFullFlexionAngleAverageI.Text = "";
            }

            if (!lblLowerLegAngleAtAnkleCrossLeftI.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossLeftI.Text.Equals("0")))
            {
                if (Math.Abs(Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftI.Text) - Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtAnkleCrossLeftM1.ForeColor = Color.Red;
                else
                    lblLowerLegAngleAtAnkleCrossLeftM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleAtAnkleCrossLeftM1.Text = "";
                lblLowerLegAngleAtAnkleCrossLeftI.Text = "";
            }

            if (!lblLowerLegAngleAtAnkleCrossRightI.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossRightI.Text.Equals("0")))
            {
                if (Math.Abs(Convert.ToInt16(lblLowerLegAngleAtAnkleCrossRightI.Text) - Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtAnkleCrossRightM1.ForeColor = Color.Red;
                else
                    lblLowerLegAngleAtAnkleCrossRightM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleAtAnkleCrossRightM1.Text = "";
                lblLowerLegAngleAtAnkleCrossRightI.Text = "";
            }

            if (!lblLowerLegAngleAtAnkleCrossAverageI.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossAverageI.Text.Equals("0")))
            {
                if (lblLowerLegAngleAtAnkleCrossLeftM1.ForeColor == Color.Red && lblLowerLegAngleAtAnkleCrossRightM1.ForeColor == Color.Red)
                {
                    if ((Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftI.Text) > Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)) && (Convert.ToInt16(lblLowerLegAngleAtAnkleCrossRightI.Text) > Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)))
                        lblLowerLegAngleAtAnkleCrossAverageM1.ForeColor = Color.Red;
                    else
                    {
                        if ((Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftI.Text) < Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)) && (Convert.ToInt16(lblLowerLegAngleAtAnkleCrossRightI.Text) < Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)))
                            lblLowerLegAngleAtAnkleCrossAverageM1.ForeColor = Color.Red;
                        else
                            lblLowerLegAngleAtAnkleCrossAverageM1.ForeColor = Color.Black;
                    }
                }
                else
                    lblLowerLegAngleAtAnkleCrossAverageM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleAtAnkleCrossAverageM1.Text = "";
                lblLowerLegAngleAtAnkleCrossAverageI.Text = "";
            }

            if (!lblUpperLegFullFlexionAngleLeftI.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullFlexionAngleLeftI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullFlexionAngleLeftI.Text) - Convert.ToInt16(lblUpperLegFullFlexionAngleAverageM1.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullFlexionAngleLeftM1.ForeColor = Color.Red;
                else
                    lblUpperLegFullFlexionAngleLeftM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullFlexionAngleLeftM1.Text = "";
                lblUpperLegFullFlexionAngleLeftI.Text = "";
            }

            if (!lblUpperLegFullFlexionAngleRightI.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullFlexionAngleRightI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullFlexionAngleRightI.Text) - Convert.ToInt16(lblUpperLegFullFlexionAngleAverageM1.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullFlexionAngleRightM1.ForeColor = Color.Red;
                else
                    lblUpperLegFullFlexionAngleRightM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullFlexionAngleRightM1.Text = "";
                lblUpperLegFullFlexionAngleRightI.Text = "";
            }

            if (!lblUpperLegFullFlexionAngleAverageI.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullFlexionAngleAverageI.Text.Equals("0")))
            {
                if (lblUpperLegFullFlexionAngleLeftM1.ForeColor == Color.Red && lblUpperLegFullFlexionAngleRightM1.ForeColor == Color.Red)
                    lblUpperLegFullFlexionAngleAverageM1.ForeColor = Color.Red;
                else
                    lblUpperLegFullFlexionAngleAverageM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullFlexionAngleAverageM1.Text = "";
                lblUpperLegFullFlexionAngleAverageI.Text = "";
            }

            #endregion[Initial values]
        }
        else if (lpath.Contains("Current"))
        {
            if (ds.Tables[2].Rows.Count > 0)
            {
                lblGroundTimeLeftI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Ground Time Left"].ToString());
                lblGroundTimeRightI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Ground Time Right"].ToString());

                lblGroundTimeAverageI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Ground Time Average"].ToString());

                lblAirTimeLeftToRightI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Air Time Left to Right"].ToString());
                lblAirTimeRightToLeftI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Air Time Right to Left"].ToString());
                lblAirTimeAverageI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Air Time Average"].ToString());
                lblTimeToUpperLegFullFlexionLeftI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Time to Upper Leg Full Flexion Left"].ToString());
                lblTimeToUpperLegFullFlexionRightI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Time to Upper Leg Full Flexion Right"].ToString());
                lblTimeToUpperLegFullFlexionAverageI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Time to Upper Leg Full Flexion Average"].ToString());

                lblStrideRateI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Stride Rate"].ToString());

                lblStrideLengthLeftToRightI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Stride Length Left to Right"].ToString());
                lblStrideLengthRightToLeftI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Stride Length Right to Left"].ToString());
                lblStrideLengthAverageI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Stride Length Average"].ToString());

                lblVelocity.Text = Convert.ToString(ds.Tables[2].Rows[0]["Velocity"].ToString());

                lblTouchDownDistanceLeftI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Touchdown Distance Left"].ToString());
                lblTouchDownDistanceRightI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Touchdown Distance Right"].ToString());
                lblTouchDownDistanceAverageI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Touchdown Distance Average"].ToString());

                lblUpperLegFullExtentionAngleLeftI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Extension Angle Left"].ToString());
                lblUpperLegFullExtentionAngleRightI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Extension Angle Right"].ToString());
                lblUpperLegFullExtentionAngleAverageI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Extension Angle Average"].ToString());

                lblLowerLegAngleAtTakeOfLeftI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Takeoff Left"].ToString());
                lblLowerLegAngleAtTakeOfRightI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Takeoff Right"].ToString());
                lblLowerLegAngleAtTakeOfAverageI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Takeoff Average"].ToString());

                lblLowerLegFullFlexionAngleLeftI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Full Flexion Angle Left"].ToString());
                lblLowerLegFullFlexionAngleRightI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Full Flexion Angle Right"].ToString());
                lblLowerLegFullFlexionAngleAverageI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Full Flexion Angle Average"].ToString());

                lblLowerLegAngleAtAnkleCrossLeftI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Ankle Cross Left"].ToString());
                lblLowerLegAngleAtAnkleCrossRightI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Ankle Cross Right"].ToString());
                lblLowerLegAngleAtAnkleCrossAverageI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Ankle Cross Average"].ToString());

                lblUpperLegFullFlexionAngleLeftI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Flexion Angle Left"].ToString());
                lblUpperLegFullFlexionAngleRightI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Flexion Angle Right"].ToString());
                lblUpperLegFullFlexionAngleAverageI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Flexion Angle Average"].ToString());
                //  WriteObjectsToPageAjax();

            }
            if (ds.Tables[3].Rows.Count > 0)
            {
                lblGroundTimeLeftM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTime"].ToString());


                lblGroundTimeRightM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTime"].ToString());
                lblGroundTimeAverageM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTime"].ToString());


                lblAirTimeLeftToRightM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["AirTime"].ToString());
                lblAirTimeRightToLeftM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["AirTime"].ToString());
                lblAirTimeAverageM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["AirTime"].ToString());


                lblTimeToUpperLegFullFlexionLeftM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["FullFlexionTime"].ToString());
                lblTimeToUpperLegFullFlexionRightM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["FullFlexionTime"].ToString());
                lblTimeToUpperLegFullFlexionAverageM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["FullFlexionTime"].ToString());

                lblStrideRateM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Stride Rate"].ToString());

                lblStrideLengthLeftToRighM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLength"].ToString());
                lblStrideLengthRightToLeftM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLength"].ToString());
                lblStrideLengthAverageM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLength"]);

                lblVelocityM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Velocity"].ToString());

                lblTouchDownDistanceLeftM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["COGDistance"].ToString());
                lblTouchDownDistanceRightM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["COGDistance"].ToString());
                lblTouchDownDistanceAverageM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["COGDistance"].ToString());

                lblUpperLegFullExtentionAngleLeftM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullExtensionAngle"].ToString());
                lblUpperLegFullExtentionAngleRightM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullExtensionAngle"].ToString());
                lblUpperLegFullExtentionAngleAverageM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullExtensionAngle"].ToString());

                lblLowerLegAngleAtTakeOfLeftM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleTakeoff"].ToString());
                lblLowerLegAngleAtTakeOfRightM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleTakeoff"].ToString());
                lblLowerLegAngleAtTakeOfAverageM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleTakeoff"].ToString());

                lblLowerLegFullFlexionAngleLeftM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLFullFlexionAngle"].ToString());
                lblLowerLegFullFlexionAngleRightM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLFullFlexionAngle"].ToString());
                lblLowerLegFullFlexionAngleAverageM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLFullFlexionAngle"].ToString());

                lblLowerLegAngleAtAnkleCrossLeftM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleAC"].ToString());
                lblLowerLegAngleAtAnkleCrossRightM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleAC"].ToString());
                lblLowerLegAngleAtAnkleCrossAverageM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleAC"].ToString());

                lblUpperLegFullFlexionAngleLeftM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullFlexionAngle"].ToString());
                lblUpperLegFullFlexionAngleRightM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullFlexionAngle"].ToString());
                lblUpperLegFullFlexionAngleAverageM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullFlexionAngle"].ToString());

            }
            #region[current values]
            if (!lblGroundTimeLeftI.Text.Equals("") && (!lblGroundTimeAverageM1.Text.Equals("")) && (!lblGroundTimeLeftI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblGroundTimeLeftI.Text) - Convert.ToSingle(lblGroundTimeAverageM1.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeLeftM1.ForeColor = Color.Red;
                else
                    lblGroundTimeLeftM1.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeLeftM1.Text = "";
                lblGroundTimeLeftI.Text = "";
            }

            if (!lblGroundTimeRightI.Text.Equals("") && (!lblGroundTimeAverageM1.Text.Equals("")) && (!lblGroundTimeRightI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblGroundTimeRightI.Text) - Convert.ToSingle(lblGroundTimeAverageM1.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeRightM1.ForeColor = Color.Red;
                else
                    lblGroundTimeRightM1.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeRightM1.Text = "";
                lblGroundTimeRightI.Text = "";
            }

            if (!lblGroundTimeAverageI.Text.Equals("") && (!lblGroundTimeAverageM1.Text.Equals("")) && (!lblGroundTimeAverageI.Text.Equals("0.000")))
            {
                if (lblGroundTimeLeftM1.ForeColor == Color.Red && lblGroundTimeRightM1.ForeColor == Color.Red)
                    lblGroundTimeAverageM1.ForeColor = Color.Red;
                else
                    lblGroundTimeAverageM1.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeAverageM1.Text = "";
                lblGroundTimeAverageI.Text = "";
            }

            //Air time 

            #region[air time]
            if (!lblAirTimeLeftToRightI.Text.Equals("") && (!lblAirTimeAverageM1.Text.Equals("")) && (!lblAirTimeAverageI.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblAirTimeLeftToRightI.Text) - Convert.ToSingle(lblAirTimeAverageM1.Text)) >= Convert.ToSingle(.005))
                {
                    if (Convert.ToSingle(lblAirTimeLeftToRightI.Text) > Convert.ToSingle(lblAirTimeAverageM1.Text))
                    {
                        sprintAirTimeLtoRLongI = true;
                        sprintAirTimeLtoRShortI = false;

                    }
                    else
                    {
                        sprintAirTimeLtoRLongI = false;
                        sprintAirTimeLtoRShortI = true;
                    }
                    lblAirTimeLeftToRightM1.ForeColor = Color.Red;
                }
                else
                {
                    sprintAirTimeLtoRShortI = false;
                    sprintAirTimeLtoRLongI = false;
                    lblAirTimeLeftToRightM1.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintAirTimeLtoRShortI = false;
                sprintAirTimeLtoRLongI = false;

                lblAirTimeLeftToRightM1.Text = "";
                lblAirTimeLeftToRightI.Text = "";
            }

            if (!lblAirTimeRightToLeftI.Text.Equals("") && (!lblAirTimeAverageM1.Text.Equals("")) && (!lblAirTimeRightToLeftI.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblAirTimeRightToLeftI.Text) - Convert.ToSingle(lblAirTimeAverageM1.Text)) >= Convert.ToSingle(.005))
                {
                    if (Convert.ToSingle(lblAirTimeRightToLeftI.Text) > Convert.ToSingle(lblAirTimeAverageM1.Text))
                    {
                        sprintAirTimeRtoLLongI = true;
                        sprintAirTimeRtoLShortI = false;
                    }
                    else
                    {
                        sprintAirTimeRtoLLongI = false;
                        sprintAirTimeRtoLShortI = true;
                    }
                    lblAirTimeRightToLeftM1.ForeColor = Color.Red;
                }
                else
                {
                    sprintAirTimeRtoLShortI = false;
                    sprintAirTimeRtoLLongI = false;
                    lblAirTimeRightToLeftM1.ForeColor = Color.Black;

                }
            }
            else
            {
                sprintAirTimeRtoLShortI = false;
                sprintAirTimeRtoLLongI = false;

                lblAirTimeRightToLeftM1.Text = "";
                lblAirTimeRightToLeftI.Text = "";
            }

            if (!lblAirTimeAverageI.Text.Equals("") && (!lblAirTimeAverageM1.Text.Equals("")) && (!lblAirTimeAverageI.Text.Equals("0.000")))
            {
                // if (Math.Abs(Convert.ToSingle(lblAirTimeAverageI.Text) - Convert.ToSingle(lblAirTimeAverageM1.Text)) >= Convert.ToSingle(.005))
                if (sprintAirTimeRtoLShortI && sprintAirTimeLtoRShortI)
                {
                    sprintAirTimeAverageI = true;
                    lblAirTimeAverageM1.ForeColor = Color.Red;
                }
                else if (sprintAirTimeRtoLLongI && sprintAirTimeLtoRLongI)
                {
                    sprintAirTimeAverageI = true;
                    lblAirTimeAverageM1.ForeColor = Color.Red;
                }
                else
                {
                    sprintAirTimeAverageI = false;
                    lblAirTimeAverageM1.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintAirTimeAverageI = false;
                lblAirTimeAverageM1.Text = "";
                lblAirTimeAverageI.Text = "";
            }
            #endregion[air time]

            //TimeToUpperLegFullFlexion

            if (!lblTimeToUpperLegFullFlexionLeftI.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM1.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionLeftI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTimeToUpperLegFullFlexionLeftI.Text) - Convert.ToSingle(lblTimeToUpperLegFullFlexionAverageM1.Text) <= Convert.ToSingle(-0.01))
                    lblTimeToUpperLegFullFlexionLeftM1.ForeColor = Color.Red;
                else
                    lblTimeToUpperLegFullFlexionLeftM1.ForeColor = Color.Black;
            }
            else
            {
                lblTimeToUpperLegFullFlexionLeftM1.Text = "";
                lblTimeToUpperLegFullFlexionLeftI.Text = "";
            }

            if (!lblTimeToUpperLegFullFlexionRightI.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM1.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionRightI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTimeToUpperLegFullFlexionRightI.Text) - Convert.ToSingle(lblTimeToUpperLegFullFlexionAverageM1.Text) <= Convert.ToSingle(-0.01))
                    lblTimeToUpperLegFullFlexionRightM1.ForeColor = Color.Red;
                else
                    lblTimeToUpperLegFullFlexionRightM1.ForeColor = Color.Black;
            }
            else
            {
                lblTimeToUpperLegFullFlexionRightM1.Text = "";
                lblTimeToUpperLegFullFlexionRightI.Text = "";
            }

            if (!lblTimeToUpperLegFullFlexionAverageI.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM1.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionAverageI.Text.Equals("0.000")))
            {
                if (lblTimeToUpperLegFullFlexionLeftM1.ForeColor == Color.Red && lblTimeToUpperLegFullFlexionRightM1.ForeColor == Color.Red)
                    lblTimeToUpperLegFullFlexionAverageM1.ForeColor = Color.Red;
                else
                    lblTimeToUpperLegFullFlexionAverageM1.ForeColor = Color.Black;
            }
            else
            {
                lblTimeToUpperLegFullFlexionAverageM1.Text = "";
                lblTimeToUpperLegFullFlexionAverageI.Text = "";
            }


            if (!lblStrideRateI.Text.Equals("") && (!lblStrideRateM1.Text.Equals("")) && (!lblStrideRateI.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideRateI.Text) - Convert.ToSingle(lblStrideRateM1.Text)) >= Convert.ToSingle(0.1))
                    lblStrideRateM1.ForeColor = Color.Red;
                else
                    lblStrideRateM1.ForeColor = Color.Black;
            }
            else
            {
                lblStrideRateM1.Text = "";
                lblStrideRateI.Text = "";
            }

            //stride length

            #region[stride length]
            if (!lblStrideLengthLeftToRightI.Text.Equals("") && (!lblStrideLengthAverageM1.Text.Equals("")) && (!lblStrideLengthLeftToRightI.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthLeftToRightI.Text) - Convert.ToSingle(lblStrideLengthAverageM1.Text)) >= Convert.ToSingle(0.1))
                {
                    if (Convert.ToSingle(lblStrideLengthLeftToRightI.Text) > Convert.ToSingle(lblStrideLengthAverageM1.Text))
                    {
                        if (sprintAirTimeLtoRLongI)
                        {
                            sprintStrideLengthLtoRShortI = false;
                            sprintStrideLengthLtoRLongI = true;
                            lblStrideLengthLeftToRighM1.ForeColor = Color.Red;
                        }
                        else
                        {
                            sprintStrideLengthLtoRShortI = false;
                            sprintStrideLengthLtoRLongI = false;
                            lblStrideLengthLeftToRighM1.ForeColor = Color.Black;
                        }
                    }
                    else if (sprintAirTimeLtoRShortI)
                    {
                        sprintStrideLengthLtoRShortI = true;
                        sprintStrideLengthLtoRLongI = false;
                        lblStrideLengthLeftToRighM1.ForeColor = Color.Red;
                    }
                    else
                    {
                        sprintStrideLengthLtoRShortI = false;
                        sprintStrideLengthLtoRLongI = false;
                        lblStrideLengthLeftToRighM1.ForeColor = Color.Black;
                    }
                }
                else
                {
                    sprintStrideLengthLtoRShortI = false;
                    sprintStrideLengthLtoRLongI = false;
                    lblStrideLengthLeftToRighM1.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthLtoRShortI = false;
                sprintStrideLengthLtoRLongI = false;
                lblStrideLengthLeftToRighM1.Text = "";
                lblStrideLengthLeftToRightI.Text = "";
            }

            if (!lblStrideLengthRightToLeftI.Text.Equals("") && (!lblStrideLengthAverageM1.Text.Equals("")) && (!lblStrideLengthRightToLeftI.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthRightToLeftI.Text) - Convert.ToSingle(lblStrideLengthAverageM1.Text)) >= Convert.ToSingle(0.1))
                {
                    if (Convert.ToSingle(lblStrideLengthRightToLeftI.Text) > Convert.ToSingle(lblStrideLengthAverageM1.Text))
                    {
                        if (sprintAirTimeRtoLLongI == true)
                        {
                            sprintStrideLengthRtoLShortI = false;
                            sprintStrideLengthRtoLLongI = true;

                            lblStrideLengthRightToLeftM1.ForeColor = Color.Red;
                        }
                        else
                        {
                            sprintStrideLengthRtoLShortI = false;
                            sprintStrideLengthRtoLLongI = false;

                            lblStrideLengthRightToLeftM1.ForeColor = Color.Black;
                        }
                    }
                    else if (sprintAirTimeRtoLShortI)
                    {
                        sprintStrideLengthRtoLShortI = true;
                        sprintStrideLengthRtoLLongI = false;

                        lblStrideLengthRightToLeftM1.ForeColor = Color.Red;
                    }
                    else
                    {
                        sprintStrideLengthRtoLShortI = false;
                        sprintStrideLengthRtoLLongI = false;

                        lblStrideLengthRightToLeftM1.ForeColor = Color.Black;
                    }
                }
                else
                {
                    sprintStrideLengthRtoLShortI = false;
                    sprintStrideLengthRtoLLongI = false;
                    lblStrideLengthRightToLeftM1.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthRtoLShortI = false;
                sprintStrideLengthRtoLLongI = false;
                lblStrideLengthRightToLeftM1.Text = "";
                lblStrideLengthRightToLeftI.Text = "";
            }

            if (!lblStrideLengthAverageI.Text.Equals("") && (!lblStrideLengthAverageM1.Text.Equals("")) && (!lblStrideLengthAverageI.Text.Equals("0.000")))
            {
                if (sprintStrideLengthRtoLShortI == true && sprintStrideLengthLtoRShortI == true)
                {
                    sprintStrideLengthAverageI = true;
                    lblStrideLengthAverageM1.ForeColor = Color.Red;
                }
                else if (sprintStrideLengthRtoLLongI && sprintStrideLengthLtoRLongI)
                {
                    sprintStrideLengthAverageI = true;
                    lblStrideLengthAverageM1.ForeColor = Color.Red;
                }
                else
                {
                    sprintStrideLengthAverageI = false;
                    lblStrideLengthAverageM1.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthAverageI = false;
                lblStrideLengthAverageM1.Text = "";
                lblStrideLengthAverageI.Text = "";
            }
            #endregion[stride length]

            //velocity     

            if (!lblVelocity.Text.Equals("") && (!lblVelocityM1.Text.Equals("")) && (!lblVelocity.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblVelocity.Text) - Convert.ToSingle(lblVelocityM1.Text) <= Convert.ToSingle(-0.65))
                    lblVelocityM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblVelocityM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblVelocityM1.Text = "";
                lblVelocity.Text = "";
            }

            //touch down distance

            if (!lblTouchDownDistanceLeftI.Text.Equals("") && (!lblTouchDownDistanceAverageM1.Text.Equals("")) && (!lblTouchDownDistanceLeftI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTouchDownDistanceLeftI.Text) - Convert.ToSingle(lblTouchDownDistanceAverageM1.Text) >= Convert.ToSingle(.02))
                    lblTouchDownDistanceLeftM1.ForeColor = Color.Red;
                else
                    lblTouchDownDistanceLeftM1.ForeColor = Color.Black;
            }
            else
            {
                lblTouchDownDistanceLeftM1.Text = "";
                lblTouchDownDistanceLeftI.Text = "";
            }

            if (!lblTouchDownDistanceRightI.Text.Equals("") && (!lblTouchDownDistanceAverageM1.Text.Equals("")) && (!lblTouchDownDistanceRightI.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTouchDownDistanceRightI.Text) - Convert.ToSingle(lblTouchDownDistanceAverageM1.Text) >= Convert.ToSingle(.02))
                    lblTouchDownDistanceRightM1.ForeColor = Color.Red;
                else
                    lblTouchDownDistanceRightM1.ForeColor = Color.Black;
            }
            else
            {
                lblTouchDownDistanceRightM1.Text = "";
                lblTouchDownDistanceRightI.Text = "";
            }

            if (!lblTouchDownDistanceAverageI.Text.Equals("") && (!lblTouchDownDistanceAverageM1.Text.Equals("")) && (!lblTouchDownDistanceAverageI.Text.Equals("0.000")))
            {
                if (lblTouchDownDistanceLeftM1.ForeColor == Color.Red && lblTouchDownDistanceRightM1.ForeColor == Color.Red)
                    lblTouchDownDistanceAverageM1.ForeColor = Color.Red;
                else
                    lblTouchDownDistanceAverageM1.ForeColor = Color.Black;
            }
            else
            {
                lblTouchDownDistanceAverageM1.Text = "";
                lblTouchDownDistanceAverageI.Text = "";
            }

            //upper leg full extension angle

            if (!lblUpperLegFullExtentionAngleLeftI.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullExtentionAngleLeftI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullExtentionAngleLeftI.Text) - Convert.ToInt16(lblUpperLegFullExtentionAngleAverageM1.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullExtentionAngleLeftM1.ForeColor = Color.Red;
                else
                    lblUpperLegFullExtentionAngleLeftM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullExtentionAngleLeftM1.Text = "";
                lblUpperLegFullExtentionAngleLeftI.Text = "";
            }

            if (!lblUpperLegFullExtentionAngleRightI.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullExtentionAngleRightI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullExtentionAngleRightI.Text) - Convert.ToInt16(lblUpperLegFullExtentionAngleAverageM1.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullExtentionAngleRightM1.ForeColor = Color.Red;
                else
                    lblUpperLegFullExtentionAngleRightM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullExtentionAngleRightM1.Text = "";
                lblUpperLegFullExtentionAngleRightI.Text = "";
            }

            if (!lblUpperLegFullExtentionAngleAverageI.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullExtentionAngleAverageI.Text.Equals("0")))
            {
                if (lblUpperLegFullExtentionAngleLeftM1.ForeColor == Color.Red && lblUpperLegFullExtentionAngleRightM1.ForeColor == Color.Red)
                    lblUpperLegFullExtentionAngleAverageM1.ForeColor = Color.Red;
                else
                    lblUpperLegFullExtentionAngleAverageM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullExtentionAngleAverageM1.Text = "";
                lblUpperLegFullExtentionAngleAverageI.Text = "";
            }

            //LowerLegAngleAtTakeOf

            if (!lblLowerLegAngleAtTakeOfLeftI.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfLeftI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblLowerLegAngleAtTakeOfLeftI.Text) - Convert.ToInt16(lblLowerLegAngleAtTakeOfAverageM1.Text) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtTakeOfLeftM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblLowerLegAngleAtTakeOfLeftM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblLowerLegAngleAtTakeOfLeftI.Text = "";
                lblLowerLegAngleAtTakeOfLeftM1.Text = "";
            }

            if (!lblLowerLegAngleAtTakeOfRightI.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfRightI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblLowerLegAngleAtTakeOfRightI.Text) - Convert.ToInt16(lblLowerLegAngleAtTakeOfAverageM1.Text) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtTakeOfRightM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblLowerLegAngleAtTakeOfRightM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblLowerLegAngleAtTakeOfRightI.Text = "";
                lblLowerLegAngleAtTakeOfRightM1.Text = "";
            }

            if (!lblLowerLegAngleAtTakeOfAverageI.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfAverageI.Text.Equals("0")))
            {
                if (lblLowerLegAngleAtTakeOfLeftM1.ForeColor == Color.Red && lblLowerLegAngleAtTakeOfRightM1.ForeColor == Color.Red)
                    lblLowerLegAngleAtTakeOfAverageM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblLowerLegAngleAtTakeOfAverageM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblLowerLegAngleAtTakeOfAverageI.Text = "";
                lblLowerLegAngleAtTakeOfAverageM1.Text = "";
            }

            //LowerLegFullFlexionAngle

            if (!lblLowerLegFullFlexionAngleLeftI.Text.Equals("") && (!lblLowerLegFullFlexionAngleLeftM1.Text.Equals("")) && (!lblLowerLegFullFlexionAngleLeftI.Text.Equals("0")))
            {
                if (Math.Abs(Convert.ToInt16(lblLowerLegFullFlexionAngleLeftI.Text) - Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM1.Text)) >= Convert.ToInt16(7))
                    lblLowerLegFullFlexionAngleLeftM1.ForeColor = Color.Red;
                else
                    lblLowerLegFullFlexionAngleLeftM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegFullFlexionAngleLeftI.Text = "";
                lblLowerLegFullFlexionAngleLeftM1.Text = "";
            }

            if (!lblLowerLegFullFlexionAngleRightI.Text.Equals("") && (!lblLowerLegFullFlexionAngleRightM1.Text.Equals("")) && (!lblLowerLegFullFlexionAngleRightI.Text.Equals("0")))
            {
                if (Math.Abs(Convert.ToInt16(lblLowerLegFullFlexionAngleRightI.Text) - Convert.ToInt16(lblLowerLegFullFlexionAngleRightM1.Text)) >= Convert.ToInt16(7))
                    lblLowerLegFullFlexionAngleRightM1.ForeColor = Color.Red;
                else
                    lblLowerLegFullFlexionAngleRightM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegFullFlexionAngleRightI.Text = "";
                lblLowerLegFullFlexionAngleRightM1.Text = "";
            }

            if (!lblLowerLegFullFlexionAngleAverageI.Text.Equals("") && (!lblLowerLegFullFlexionAngleAverageM1.Text.Equals("")) && (!lblLowerLegFullFlexionAngleAverageI.Text.Equals("0")))
            {
                if (lblLowerLegFullFlexionAngleLeftM1.ForeColor == Color.Red && lblLowerLegFullFlexionAngleRightM1.ForeColor == Color.Red)
                {
                    if ((Convert.ToInt16(lblLowerLegFullFlexionAngleLeftI.Text) > Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM1.Text)) && (Convert.ToInt16(lblLowerLegFullFlexionAngleRightI.Text) > Convert.ToInt16(lblLowerLegFullFlexionAngleRightM1.Text)))
                        lblLowerLegFullFlexionAngleAverageM1.ForeColor = Color.Red;
                    else
                    {
                        if ((Convert.ToInt16(lblLowerLegFullFlexionAngleLeftI.Text) < Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM1.Text)) && (Convert.ToInt16(lblLowerLegFullFlexionAngleRightI.Text) < Convert.ToInt16(lblLowerLegFullFlexionAngleRightM1.Text)))
                            lblLowerLegFullFlexionAngleAverageM1.ForeColor = Color.Red;
                        else
                            lblLowerLegFullFlexionAngleAverageM1.ForeColor = Color.Black;
                    }
                }
                else
                    lblLowerLegFullFlexionAngleAverageM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegFullFlexionAngleAverageI.Text = "";
                lblLowerLegFullFlexionAngleAverageM1.Text = "";
            }

            //LowerLegAngleAtAnkleCross

            if (!lblLowerLegAngleAtAnkleCrossLeftI.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossLeftI.Text.Equals("0")))
            {
                if (Math.Abs(Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftI.Text) - Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtAnkleCrossLeftM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblLowerLegAngleAtAnkleCrossLeftM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblLowerLegAngleAtAnkleCrossLeftI.Text = "";
                lblLowerLegAngleAtAnkleCrossLeftM1.Text = "";
            }

            if (!lblLowerLegAngleAtAnkleCrossRightI.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossRightI.Text.Equals("0")))
            {
                if (Math.Abs(Convert.ToSingle(lblLowerLegAngleAtAnkleCrossRightI.Text) - Convert.ToSingle(lblLowerLegAngleAtAnkleCrossAverageM1.Text)) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtAnkleCrossRightM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblLowerLegAngleAtAnkleCrossRightM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblLowerLegAngleAtAnkleCrossRightI.Text = "";
                lblLowerLegAngleAtAnkleCrossRightM1.Text = "";
            }

            if (!lblLowerLegAngleAtAnkleCrossAverageI.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM1.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossAverageI.Text.Equals("0")))
            {
                if (lblLowerLegAngleAtAnkleCrossLeftM1.ForeColor == Color.Red && lblLowerLegAngleAtAnkleCrossRightM1.ForeColor == Color.Red)
                {
                    if ((Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftI.Text) > Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)) && (Convert.ToInt16(lblLowerLegAngleAtAnkleCrossRightI.Text) > Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)))
                        lblLowerLegAngleAtAnkleCrossAverageM1.ForeColor = Color.Red;
                    else
                    {
                        if ((Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftI.Text) < Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)) && (Convert.ToInt16(lblLowerLegAngleAtAnkleCrossRightI.Text) < Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM1.Text)))
                            lblLowerLegAngleAtAnkleCrossAverageM1.ForeColor = Color.Red;
                        else
                            lblLowerLegAngleAtAnkleCrossAverageM1.ForeColor = Color.Black;
                    }
                }
                else
                    lblLowerLegAngleAtAnkleCrossAverageM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleAtAnkleCrossAverageI.Text = "";
                lblLowerLegAngleAtAnkleCrossAverageM1.Text = "";
            }

            //UpperLegFullFlexionAngle

            if (!lblUpperLegFullFlexionAngleLeftI.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullFlexionAngleLeftI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullFlexionAngleLeftI.Text) - Convert.ToInt16(lblUpperLegFullFlexionAngleAverageM1.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullFlexionAngleLeftM1.ForeColor = Color.Red;
                else
                    lblUpperLegFullFlexionAngleLeftM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullFlexionAngleLeftI.Text = "";
                lblUpperLegFullFlexionAngleLeftM1.Text = "";
            }

            if (!lblUpperLegFullFlexionAngleRightI.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullFlexionAngleRightI.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullFlexionAngleRightI.Text) - Convert.ToInt16(lblUpperLegFullFlexionAngleAverageM1.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullFlexionAngleRightM1.ForeColor = Color.Red;
                else
                    lblUpperLegFullFlexionAngleRightM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullFlexionAngleRightI.Text = "";
                lblUpperLegFullFlexionAngleRightM1.Text = "";
            }

            if (!lblUpperLegFullFlexionAngleAverageI.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM1.Text.Equals("")) && (!lblUpperLegFullFlexionAngleAverageI.Text.Equals("0")))
            {
                if (lblUpperLegFullFlexionAngleLeftM1.ForeColor == Color.Red && lblUpperLegFullFlexionAngleRightM1.ForeColor == Color.Red)
                    lblUpperLegFullFlexionAngleAverageM1.ForeColor = Color.Red;
                else
                    lblUpperLegFullFlexionAngleAverageM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullFlexionAngleAverageI.Text = "";
                lblUpperLegFullFlexionAngleAverageM1.Text = "";
            }
            #endregion[current values]
        }

        //  WriteObjectsToPageAjax();
    }
    public void GetSprintRightMovieVariablesforNonTires(int LessonId, string rpath)
    {
        ds = sae.GetAllSprintAthletesData(LessonId);
        if (DropDownList3.SelectedValue != "")
        {
            try
            {
                int movieidR = Convert.ToInt32(DropDownList3.SelectedItem.Value);
                rightMovie = DataRepository.MovieProvider.GetByMovieId(movieidR);
                string locationR = sae.SelectLessonlocation(LessonId.ToString());
                string dateR = rightMovie.DateRecorded.Month.ToString() + "/" + rightMovie.DateRecorded.Day.ToString() + "/" + rightMovie.DateRecorded.Year.ToString();
                string RightSession = dateR + "-" + locationR;
                lblRightMovie.Text = RightSession;
            }
            catch { }
        }
        if (rpath.Contains("Initial"))
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                lblGroundTimeLeftF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Ground Time Left"].ToString());
                lblGroundTimeRightF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Ground Time Right"].ToString());
                lblGroundTimeAverageF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Ground Time Average"].ToString());

                lblAirTimeLeftToRightF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Air Time Left to Right"].ToString());
                lblAirTimeRightToLeftF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Air Time Right to Left"].ToString());
                lblAirTimeAverageF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Air Time Average"].ToString());

                lblTimeToUpperLegFullFlexionLeftF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Time to Upper Leg Full Flexion Left"].ToString());
                lblTimeToUpperLegFullFlexionRightF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Time to Upper Leg Full Flexion Right"].ToString());
                lblTimeToUpperLegFullFlexionAverageF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Time to Upper Leg Full Flexion Average"].ToString());

                lblStrideRateF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Stride Rate"].ToString());

                lblStrideLengthLeftToRighF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Stride Length Left to Right"].ToString());
                lblStrideLengthRightToLeftF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Stride Length Right to Left"].ToString());
                lblStrideLengthAverageF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Stride Length Average"].ToString());

                lblVelocityF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Velocity"].ToString());

                lblTouchDownDistanceLeftF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Touchdown Distance Left"].ToString());
                lblTouchDownDistanceRightF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Touchdown Distance Right"].ToString());
                lblTouchDownDistanceAverageF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Touchdown Distance Average"].ToString());

                lblUpperLegFullExtentionAngleLeftF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Extension Angle Left"].ToString());
                lblUpperLegFullExtentionAngleRightF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Extension Angle Right"].ToString());
                lblUpperLegFullExtentionAngleAverageF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Extension Angle Average"].ToString());

                lblLowerLegAngleAtTakeOfLeftF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Takeoff Left"].ToString());
                lblLowerLegAngleAtTakeOfRightF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Takeoff Right"].ToString());
                lblLowerLegAngleAtTakeOfAverageF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Takeoff Average"].ToString());

                lblLowerLegFullFlexionAngleLeftF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Full Flexion Angle Left"].ToString());
                lblLowerLegFullFlexionAngleRightF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Full Flexion Angle Right"].ToString());
                lblLowerLegFullFlexionAngleAverageF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Full Flexion Angle Average"].ToString());

                lblLowerLegAngleAtAnkleCrossLeftF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Ankle Cross Left"].ToString());
                lblLowerLegAngleAtAnkleCrossRightF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Ankle Cross Right"].ToString());
                lblLowerLegAngleAtAnkleCrossAverageF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Lower Leg Angle at Ankle Cross Average"].ToString());

                lblUpperLegFullFlexionAngleLeftF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Flexion Angle Left"].ToString());
                lblUpperLegFullFlexionAngleRightF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Flexion Angle Right"].ToString());
                lblUpperLegFullFlexionAngleAverageF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Upper Leg Full Flexion Angle Average"].ToString());
            }
            if (ds.Tables[1].Rows.Count > 0)
            {
                //model_2 data

                lblGroundTimeLeftM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTime"].ToString());
                lblGroundTimeRightM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTime"].ToString());
                lblGroundTimeAverageM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTime"].ToString());

                lblAirTimeLeftToRightM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["AirTime"].ToString());
                lblAirTimeRightToLeftM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["AirTime"].ToString());
                lblAirTimeAverageM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["AirTime"].ToString());

                lblTimeToUpperLegFullFlexionLeftM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["FullFlexionTime"].ToString());
                lblTimeToUpperLegFullFlexionRightM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["FullFlexionTime"].ToString());
                lblTimeToUpperLegFullFlexionAverageM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["FullFlexionTime"].ToString());

                lblStrideRateM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Stride Rate"].ToString());

                lblStrideLengthLeftToRighM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLength"].ToString());
                lblStrideLengthRightToLeftM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLength"].ToString());
                lblStrideLengthAverageM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLength"].ToString());

                lblVelocityM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Velocity"].ToString());

                lblTouchDownDistanceLeftM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["COGDistance"].ToString());
                lblTouchDownDistanceRightM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["COGDistance"].ToString());
                lblTouchDownDistanceAverageM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["COGDistance"].ToString());

                lblUpperLegFullExtentionAngleLeftM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullExtensionAngle"].ToString());
                lblUpperLegFullExtentionAngleRightM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullExtensionAngle"].ToString());
                lblUpperLegFullExtentionAngleAverageM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullExtensionAngle"].ToString());

                lblLowerLegAngleAtTakeOfLeftM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleTakeoff"].ToString());
                lblLowerLegAngleAtTakeOfRightM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleTakeoff"].ToString());
                lblLowerLegAngleAtTakeOfAverageM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleTakeoff"].ToString());

                lblLowerLegFullFlexionAngleLeftM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLFullFlexionAngle"].ToString());
                lblLowerLegFullFlexionAngleRightM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLFullFlexionAngle"].ToString());
                lblLowerLegFullFlexionAngleAverageM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLFullFlexionAngle"].ToString());

                lblLowerLegAngleAtAnkleCrossLeftM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleAC"].ToString());
                lblLowerLegAngleAtAnkleCrossRightM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleAC"].ToString());
                lblLowerLegAngleAtAnkleCrossAverageM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleAC"].ToString());

                lblUpperLegFullFlexionAngleLeftM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullFlexionAngle"].ToString());
                lblUpperLegFullFlexionAngleRightM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullFlexionAngle"].ToString());
                lblUpperLegFullFlexionAngleAverageM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULFullFlexionAngle"].ToString());
            }
            #region[Initial Values]
            if (!lblGroundTimeLeftF.Text.Equals("") && (!lblGroundTimeAverageM1.Text.Equals("")) && (!lblGroundTimeLeftF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblGroundTimeLeftF.Text) - Convert.ToSingle(lblGroundTimeAverageM1.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeLeftM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblGroundTimeLeftM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblGroundTimeLeftM2.Text = "";
                lblGroundTimeLeftF.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblGroundTimeRightF.Text.Equals("") && (!lblGroundTimeAverageM2.Text.Equals("")) && (!lblGroundTimeRightF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblGroundTimeRightF.Text) - Convert.ToSingle(lblGroundTimeAverageM2.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeRightM2.ForeColor = Color.Red;
                else
                    lblGroundTimeRightM2.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeRightM2.Text = "";
                lblGroundTimeRightF.Text = "";
            }

            if (!lblGroundTimeAverageF.Text.Equals("") && (!lblGroundTimeAverageM2.Text.Equals("")) && (!lblGroundTimeAverageF.Text.Equals("0.000")))
            {
                if (lblGroundTimeLeftM2.ForeColor == Color.Red && lblGroundTimeRightM2.ForeColor == Color.Red)
                    lblGroundTimeAverageM2.ForeColor = Color.Red;
                else
                    lblGroundTimeAverageM2.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeAverageM2.Text = "";
                lblGroundTimeAverageF.Text = "";
            }

            //Air time 

            #region[air time]
            if (!lblAirTimeLeftToRightF.Text.Equals("") && (!lblAirTimeAverageM2.Text.Equals("")) && (!lblAirTimeAverageF.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblAirTimeLeftToRightF.Text) - Convert.ToSingle(lblAirTimeAverageM2.Text)) >= Convert.ToSingle(.005))
                {
                    if (Convert.ToSingle(lblAirTimeLeftToRightF.Text) > Convert.ToSingle(lblAirTimeAverageM2.Text))
                    {
                        sprintAirTimeLtoRLongF = true;
                        sprintAirTimeLtoRShortF = false;
                    }
                    else
                    {
                        sprintAirTimeLtoRLongF = false;
                        sprintAirTimeLtoRShortF = true;
                    }
                    lblAirTimeLeftToRightM2.ForeColor = Color.Red;
                }
                else
                {
                    sprintAirTimeLtoRShortF = false;
                    sprintAirTimeLtoRLongF = false;
                    lblAirTimeLeftToRightM2.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintAirTimeLtoRShortF = false;
                sprintAirTimeLtoRLongF = false;

                lblAirTimeLeftToRightM2.Text = "";
                lblAirTimeLeftToRightF.Text = "";
            }

            if (!lblAirTimeRightToLeftF.Text.Equals("") && (!lblAirTimeAverageM2.Text.Equals("")) && (!lblAirTimeRightToLeftF.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblAirTimeRightToLeftF.Text) - Convert.ToSingle(lblAirTimeAverageM2.Text)) >= Convert.ToSingle(.005))
                {
                    if (Convert.ToSingle(lblAirTimeRightToLeftF.Text) > Convert.ToSingle(lblAirTimeAverageM2.Text))
                    {
                        sprintAirTimeRtoLLongF = true;
                        sprintAirTimeRtoLShortF = false;

                    }
                    else
                    {
                        sprintAirTimeRtoLLongF = false;
                        sprintAirTimeRtoLShortF = true;
                    }
                    lblAirTimeRightToLeftM2.ForeColor = Color.Red;
                }
                else
                {
                    sprintAirTimeRtoLShortF = false;
                    sprintAirTimeRtoLLongF = false;
                    lblAirTimeRightToLeftM2.ForeColor = Color.Black;

                }
            }
            else
            {
                sprintAirTimeRtoLShortF = false;
                sprintAirTimeRtoLLongF = false;

                lblAirTimeRightToLeftM2.Text = "";
                lblAirTimeRightToLeftF.Text = "";
            }

            if (!lblAirTimeAverageF.Text.Equals("") && (!lblAirTimeAverageM2.Text.Equals("")) && (!lblAirTimeAverageF.Text.Equals("0.000")))
            {
                // if (Math.Abs(Convert.ToSingle(lblAirTimeAverageF.Text) - Convert.ToSingle(lblAirTimeAverageM2.Text)) >= Convert.ToSingle(.005))
                if (sprintAirTimeRtoLShortF && sprintAirTimeLtoRShortF)
                {
                    sprintAirTimeAverageF = true;
                    lblAirTimeAverageM2.ForeColor = Color.Red;

                }
                else if (sprintAirTimeRtoLLongF && sprintAirTimeLtoRLongF)
                {
                    sprintAirTimeAverageF = true;
                    lblAirTimeAverageM2.ForeColor = Color.Red;
                }
                else
                {
                    sprintAirTimeAverageF = false;
                    lblAirTimeAverageM2.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintAirTimeAverageF = false;
                lblAirTimeAverageM2.Text = "";
                lblAirTimeAverageF.Text = "";
            }
            #endregion[air time]

            // TimeToUpperLegFullFlexion

            if (!lblTimeToUpperLegFullFlexionLeftF.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM2.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionLeftF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTimeToUpperLegFullFlexionLeftF.Text) - Convert.ToSingle(lblTimeToUpperLegFullFlexionAverageM2.Text) <= Convert.ToSingle(-0.01))
                    lblTimeToUpperLegFullFlexionLeftM2.ForeColor = Color.Red;
                else
                    lblTimeToUpperLegFullFlexionLeftM2.ForeColor = Color.Black;
            }
            else
            {
                lblTimeToUpperLegFullFlexionLeftM2.Text = "";
                lblTimeToUpperLegFullFlexionLeftF.Text = "";
            }

            if (!lblTimeToUpperLegFullFlexionRightF.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM2.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionRightF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTimeToUpperLegFullFlexionRightF.Text) - Convert.ToSingle(lblTimeToUpperLegFullFlexionAverageM2.Text) <= Convert.ToSingle(-0.01))
                    lblTimeToUpperLegFullFlexionRightM2.ForeColor = Color.Red;
                else
                    lblTimeToUpperLegFullFlexionRightM2.ForeColor = Color.Black;
            }
            else
            {
                lblTimeToUpperLegFullFlexionRightM2.Text = "";
                lblTimeToUpperLegFullFlexionRightF.Text = "";
            }

            if (!lblTimeToUpperLegFullFlexionAverageF.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM2.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionAverageF.Text.Equals("0.000")))
            {
                if (lblTimeToUpperLegFullFlexionLeftM2.ForeColor == Color.Red && lblTimeToUpperLegFullFlexionRightM2.ForeColor == Color.Red)
                    lblTimeToUpperLegFullFlexionAverageM2.ForeColor = Color.Red;
                else
                    lblTimeToUpperLegFullFlexionAverageM2.ForeColor = Color.Black;
            }
            else
            {
                lblTimeToUpperLegFullFlexionAverageM2.Text = "";
                lblTimeToUpperLegFullFlexionAverageF.Text = "";
            }

            //Stride rate

            if (!lblStrideRateF.Text.Equals("") && (!lblStrideRateM2.Text.Equals("")) && (!lblStrideRateF.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideRateF.Text) - Convert.ToSingle(lblStrideRateM2.Text)) >= Convert.ToSingle(0.1))
                    lblStrideRateM2.ForeColor = Color.Red;
                else
                    lblStrideRateM2.ForeColor = Color.Black;
            }
            else
            {
                lblStrideRateM2.Text = "";
                lblStrideRateF.Text = "";
            }

            //Stride length
            #region[stride length]
            if (!lblStrideLengthLeftToRighF.Text.Equals("") && (!lblStrideLengthAverageM2.Text.Equals("")) && (!lblStrideLengthLeftToRighF.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthLeftToRighF.Text) - Convert.ToSingle(lblStrideLengthAverageM2.Text)) >= Convert.ToSingle(0.1))
                {
                    if (Convert.ToSingle(lblStrideLengthLeftToRighF.Text) > Convert.ToSingle(lblStrideLengthAverageM2.Text))
                    {
                        if (sprintAirTimeLtoRLongF)
                        {
                            sprintStrideLengthLtoRShortF = false;
                            sprintStrideLengthLtoRLongF = true;
                            lblStrideLengthLeftToRighM2.ForeColor = Color.Red;
                        }
                        else
                        {
                            sprintStrideLengthLtoRShortF = false;
                            sprintStrideLengthLtoRLongF = false;
                            lblStrideLengthLeftToRighM2.ForeColor = Color.Black;
                        }
                    }
                    else if (sprintAirTimeLtoRShortF)
                    {
                        sprintStrideLengthLtoRShortF = true;
                        sprintStrideLengthLtoRLongF = false;
                        lblStrideLengthLeftToRighM2.ForeColor = Color.Red;
                    }
                    else
                    {
                        sprintStrideLengthLtoRShortF = false;
                        sprintStrideLengthLtoRLongF = false;
                        lblStrideLengthLeftToRighM2.ForeColor = Color.Black;
                    }
                }
                else
                {
                    sprintStrideLengthLtoRShortF = false;
                    sprintStrideLengthLtoRLongF = false;
                    lblStrideLengthLeftToRighM2.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthLtoRShortF = false;
                sprintStrideLengthLtoRLongF = false;
                lblStrideLengthLeftToRighM2.Text = "";
                lblStrideLengthLeftToRighF.Text = "";
            }

            if (!lblStrideLengthRightToLeftF.Text.Equals("") && (!lblStrideLengthAverageM2.Text.Equals("")) && (!lblStrideLengthRightToLeftF.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthRightToLeftF.Text) - Convert.ToSingle(lblStrideLengthAverageM2.Text)) >= Convert.ToSingle(0.1))
                {
                    if (Convert.ToSingle(lblStrideLengthRightToLeftF.Text) > Convert.ToSingle(lblStrideLengthAverageM2.Text))
                    {
                        if (sprintAirTimeRtoLLongF == true)
                        {
                            sprintStrideLengthRtoLShortF = false;
                            sprintStrideLengthRtoLLongF = true;

                            lblStrideLengthRightToLeftM2.ForeColor = Color.Red;
                        }
                        else
                        {
                            sprintStrideLengthRtoLShortF = false;
                            sprintStrideLengthRtoLLongF = false;

                            lblStrideLengthRightToLeftM2.ForeColor = Color.Black;
                        }
                    }
                    else if (sprintAirTimeRtoLShortF)
                    {
                        sprintStrideLengthRtoLShortF = true;
                        sprintStrideLengthRtoLLongF = false;

                        lblStrideLengthRightToLeftM2.ForeColor = Color.Red;
                    }
                    else
                    {
                        sprintStrideLengthRtoLShortF = false;
                        sprintStrideLengthRtoLLongF = false;

                        lblStrideLengthRightToLeftM2.ForeColor = Color.Black;
                    }
                }
                else
                {
                    sprintStrideLengthRtoLShortF = false;
                    sprintStrideLengthRtoLLongF = false;
                    lblStrideLengthRightToLeftM2.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthRtoLShortF = false;
                sprintStrideLengthRtoLLongF = false;
                lblStrideLengthRightToLeftM2.Text = "";
                lblStrideLengthRightToLeftF.Text = "";
            }

            if (!lblStrideLengthAverageF.Text.Equals("") && (!lblStrideLengthAverageM2.Text.Equals("")) && (!lblStrideLengthAverageF.Text.Equals("0.000")))
            {
                if (sprintStrideLengthRtoLShortF == true && sprintStrideLengthLtoRShortF == true)
                {
                    sprintStrideLengthAverageF = true;
                    lblStrideLengthAverageM2.ForeColor = Color.Red;
                }
                else if (sprintStrideLengthRtoLLongF && sprintStrideLengthLtoRLongF)
                {
                    sprintStrideLengthAverageF = true;
                    lblStrideLengthAverageM2.ForeColor = Color.Red;
                }
                else
                {
                    sprintStrideLengthAverageF = false;
                    lblStrideLengthAverageM2.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthAverageF = false;
                lblStrideLengthAverageM2.Text = "";
                lblStrideLengthAverageF.Text = "";
            }
            #endregion[stride length]

            //velocity     

            if (!lblVelocityF.Text.Equals("") && (!lblVelocityM2.Text.Equals("")) && (!lblVelocityF.Text.Equals("0.000")))//Check This (lblVelocity or lblVelocityF)
            {
                if (Convert.ToSingle(lblVelocityF.Text) - Convert.ToSingle(lblVelocityM2.Text) <= Convert.ToSingle(-0.65))//Check This (lblVelocity or lblVelocityF)
                    lblVelocityM2.ForeColor = Color.Red;
                else
                    lblVelocityM2.ForeColor = Color.Black;
            }
            else
            {
                lblVelocityM2.Text = "";
                lblVelocityF.Text = "";
            }

            //TouchDownDistance

            if (!lblTouchDownDistanceLeftF.Text.Equals("") && (!lblTouchDownDistanceAverageM2.Text.Equals("")) && (!lblTouchDownDistanceLeftF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTouchDownDistanceLeftF.Text) - Convert.ToSingle(lblTouchDownDistanceAverageM2.Text) >= Convert.ToSingle(.02))
                    lblTouchDownDistanceLeftM2.ForeColor = Color.Red;
                else
                    lblTouchDownDistanceLeftM2.ForeColor = Color.Black;
            }
            else
            {
                lblTouchDownDistanceLeftM2.Text = "";
                lblTouchDownDistanceLeftF.Text = "";
            }

            if (!lblTouchDownDistanceRightF.Text.Equals("") && (!lblTouchDownDistanceAverageM2.Text.Equals("")) && (!lblTouchDownDistanceRightF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTouchDownDistanceRightF.Text) - Convert.ToSingle(lblTouchDownDistanceAverageM2.Text) >= Convert.ToSingle(.02))
                    lblTouchDownDistanceRightM2.ForeColor = Color.Red;
                else
                    lblTouchDownDistanceRightM2.ForeColor = Color.Black;
            }
            else
            {
                lblTouchDownDistanceRightM2.Text = "";
                lblTouchDownDistanceRightF.Text = "";
            }

            if (!lblTouchDownDistanceAverageF.Text.Equals("") && (!lblTouchDownDistanceAverageM2.Text.Equals("")) && (!lblTouchDownDistanceAverageF.Text.Equals("0.000")))
            {
                if (lblTouchDownDistanceLeftM2.ForeColor == Color.Red && lblTouchDownDistanceRightM2.ForeColor == Color.Red)
                    lblTouchDownDistanceAverageM2.ForeColor = Color.Red;
                else
                    lblTouchDownDistanceAverageM2.ForeColor = Color.Black;
            }
            else
            {
                lblTouchDownDistanceAverageM2.Text = "";
                lblTouchDownDistanceAverageF.Text = "";
            }

            if (!lblUpperLegFullExtentionAngleLeftF.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullExtentionAngleLeftF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullExtentionAngleLeftF.Text) - Convert.ToInt16(lblUpperLegFullExtentionAngleAverageM2.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullExtentionAngleLeftM2.ForeColor = Color.Red;
                else
                    lblUpperLegFullExtentionAngleLeftM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullExtentionAngleLeftM2.Text = "";
                lblUpperLegFullExtentionAngleLeftF.Text = "";
            }

            if (!lblUpperLegFullExtentionAngleRightF.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullExtentionAngleRightF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullExtentionAngleRightF.Text) - Convert.ToInt16(lblUpperLegFullExtentionAngleAverageM2.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullExtentionAngleRightM2.ForeColor = Color.Red;
                else
                    lblUpperLegFullExtentionAngleRightM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullExtentionAngleRightM2.Text = "";
                lblUpperLegFullExtentionAngleRightF.Text = "";
            }

            if (!lblUpperLegFullExtentionAngleAverageF.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullExtentionAngleAverageF.Text.Equals("0")))
            {
                if (lblUpperLegFullExtentionAngleLeftM2.ForeColor == Color.Red && lblUpperLegFullExtentionAngleRightM2.ForeColor == Color.Red)
                    lblUpperLegFullExtentionAngleAverageM2.ForeColor = Color.Red;
                else
                    lblUpperLegFullExtentionAngleAverageM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullExtentionAngleAverageM2.Text = "";
                lblUpperLegFullExtentionAngleAverageF.Text = "";
            }

            //LowerLegAngleAtTakeOf

            if (!lblLowerLegAngleAtTakeOfLeftF.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfLeftF.Text.Equals("0")))
            {
                if (Convert.ToSingle(lblLowerLegAngleAtTakeOfLeftF.Text) - Convert.ToSingle(lblLowerLegAngleAtTakeOfAverageM2.Text) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtTakeOfLeftM2.ForeColor = Color.Red;
                else
                    lblLowerLegAngleAtTakeOfLeftM2.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleAtTakeOfLeftM2.Text = "";
                lblLowerLegAngleAtTakeOfLeftF.Text = "";
            }

            if (!lblLowerLegAngleAtTakeOfRightF.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfRightF.Text.Equals("0")))
            {
                if (Convert.ToSingle(lblLowerLegAngleAtTakeOfRightF.Text) - Convert.ToSingle(lblLowerLegAngleAtTakeOfAverageM2.Text) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtTakeOfRightM2.ForeColor = Color.Red;
                else
                    lblLowerLegAngleAtTakeOfRightM2.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleAtTakeOfRightM2.Text = "";
                lblLowerLegAngleAtTakeOfRightF.Text = "";
            }

            if (!lblLowerLegAngleAtTakeOfAverageF.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfAverageF.Text.Equals("0")))
            {
                if (lblLowerLegAngleAtTakeOfLeftM2.ForeColor == Color.Red && lblLowerLegAngleAtTakeOfRightM2.ForeColor == Color.Red)
                    lblLowerLegAngleAtTakeOfAverageM2.ForeColor = Color.Red;
                else
                    lblLowerLegAngleAtTakeOfAverageM2.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleAtTakeOfAverageM2.Text = "";
                lblLowerLegAngleAtTakeOfAverageF.Text = "";
            }

            //LowerLegFullFlexionAngle

            if (!lblLowerLegFullFlexionAngleLeftF.Text.Equals("") && (!lblLowerLegFullFlexionAngleLeftM2.Text.Equals("")) && (!lblLowerLegFullFlexionAngleLeftF.Text.Equals("0")))
            {
                if (Math.Abs(Convert.ToInt16(lblLowerLegFullFlexionAngleLeftF.Text) - Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM2.Text)) >= Convert.ToInt16(7))

                    lblLowerLegFullFlexionAngleLeftM2.ForeColor = Color.Red;
                else
                    lblLowerLegFullFlexionAngleLeftM2.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegFullFlexionAngleLeftM2.Text = "";
                lblLowerLegFullFlexionAngleLeftF.Text = "";
            }

            if (!lblLowerLegFullFlexionAngleRightF.Text.Equals("") && (!lblLowerLegFullFlexionAngleRightM2.Text.Equals("")) && (!lblLowerLegFullFlexionAngleRightF.Text.Equals("0")))
            {
                if (Math.Abs(Convert.ToInt16(lblLowerLegFullFlexionAngleRightF.Text) - Convert.ToInt16(lblLowerLegFullFlexionAngleRightM2.Text)) >= Convert.ToInt16(7))
                    lblLowerLegFullFlexionAngleRightM2.ForeColor = Color.Red;
                else
                    lblLowerLegFullFlexionAngleRightM2.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegFullFlexionAngleRightM2.Text = "";
                lblLowerLegFullFlexionAngleRightF.Text = "";
            }

            if (!lblLowerLegFullFlexionAngleAverageF.Text.Equals("") && (!lblLowerLegFullFlexionAngleAverageM2.Text.Equals("")) && (!lblLowerLegFullFlexionAngleAverageF.Text.Equals("0")))
            {
                if (lblLowerLegFullFlexionAngleLeftM2.ForeColor == Color.Red && lblLowerLegFullFlexionAngleRightM2.ForeColor == Color.Red)
                {
                    if ((Convert.ToInt16(lblLowerLegFullFlexionAngleLeftF.Text) > Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM2.Text)) && (Convert.ToInt16(lblLowerLegFullFlexionAngleRightF.Text) > Convert.ToInt16(lblLowerLegFullFlexionAngleRightM2.Text)))
                        lblLowerLegFullFlexionAngleAverageM2.ForeColor = Color.Red;
                    else
                    {
                        if ((Convert.ToInt16(lblLowerLegFullFlexionAngleLeftF.Text) < Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM2.Text)) && (Convert.ToInt16(lblLowerLegFullFlexionAngleRightF.Text) < Convert.ToInt16(lblLowerLegFullFlexionAngleRightM2.Text)))
                            lblLowerLegFullFlexionAngleAverageM2.ForeColor = Color.Red;
                        else
                            lblLowerLegFullFlexionAngleAverageM2.ForeColor = Color.Black;
                    }
                }
                else
                    lblLowerLegFullFlexionAngleAverageM2.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegFullFlexionAngleAverageM2.Text = "";
                lblLowerLegFullFlexionAngleAverageF.Text = "";
            }

            if (!lblLowerLegAngleAtAnkleCrossLeftF.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossLeftF.Text.Equals("0")))
            {

                if (Math.Abs(Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftF.Text) - Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtAnkleCrossLeftM2.ForeColor = Color.Red;
                else
                    lblLowerLegAngleAtAnkleCrossLeftM2.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleAtAnkleCrossLeftM2.Text = "";
                lblLowerLegAngleAtAnkleCrossLeftF.Text = "";
            }


            if (!lblLowerLegAngleAtAnkleCrossRightF.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossRightF.Text.Equals("0")))
            {
                if (Math.Abs(Convert.ToInt16(lblLowerLegAngleAtAnkleCrossRightF.Text) - Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtAnkleCrossRightM2.ForeColor = Color.Red;
                else
                    lblLowerLegAngleAtAnkleCrossRightM2.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleAtAnkleCrossRightM2.Text = "";
                lblLowerLegAngleAtAnkleCrossRightF.Text = "";
            }

            if (!lblLowerLegAngleAtAnkleCrossAverageF.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossAverageF.Text.Equals("0")))
            {
                if (lblLowerLegAngleAtAnkleCrossLeftM2.ForeColor == Color.Red && lblLowerLegAngleAtAnkleCrossRightM2.ForeColor == Color.Red)
                {
                    if ((Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftF.Text) > Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)) && (Convert.ToInt16(lblLowerLegAngleAtAnkleCrossRightF.Text) > Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)))
                        lblLowerLegAngleAtAnkleCrossAverageM2.ForeColor = Color.Red;
                    else
                    {
                        if ((Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftF.Text) < Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)) && (Convert.ToInt16(lblLowerLegAngleAtAnkleCrossRightF.Text) < Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)))
                            lblLowerLegAngleAtAnkleCrossAverageM2.ForeColor = Color.Red;
                        else
                            lblLowerLegAngleAtAnkleCrossAverageM2.ForeColor = Color.Black;
                    }
                }
                else
                    lblLowerLegAngleAtAnkleCrossAverageM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblLowerLegAngleAtAnkleCrossAverageM2.Text = "";
                lblLowerLegAngleAtAnkleCrossAverageF.Text = "";
            }

            if (!lblUpperLegFullFlexionAngleLeftF.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullFlexionAngleLeftF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullFlexionAngleLeftF.Text) - Convert.ToInt16(lblUpperLegFullFlexionAngleAverageM2.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullFlexionAngleLeftM2.ForeColor = Color.Red;
                else
                    lblUpperLegFullFlexionAngleLeftM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullFlexionAngleLeftM2.Text = "";
                lblUpperLegFullFlexionAngleLeftF.Text = "";
            }

            if (!lblUpperLegFullFlexionAngleRightF.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullFlexionAngleRightF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullFlexionAngleRightF.Text) - Convert.ToInt16(lblUpperLegFullFlexionAngleAverageM2.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullFlexionAngleRightM2.ForeColor = Color.Red;
                else
                    lblUpperLegFullFlexionAngleRightM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullFlexionAngleRightM2.Text = "";
                lblUpperLegFullFlexionAngleRightF.Text = "";
            }

            if (!lblUpperLegFullFlexionAngleAverageF.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullFlexionAngleAverageF.Text.Equals("0")))
            {
                if (lblUpperLegFullFlexionAngleLeftM2.ForeColor == Color.Red && lblUpperLegFullFlexionAngleRightM2.ForeColor == Color.Red)
                    lblUpperLegFullFlexionAngleAverageM2.ForeColor = Color.Red;
                else
                    lblUpperLegFullFlexionAngleAverageM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullFlexionAngleAverageM2.Text = "";
                lblUpperLegFullFlexionAngleAverageF.Text = "";
            }

            #endregion[Initial values]

        }
        else if (rpath.Contains("Current"))
        {
            if (ds.Tables[2].Rows.Count > 0)
            {
                lblGroundTimeLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Ground Time Left"].ToString());
                lblGroundTimeRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Ground Time Right"].ToString());
                lblGroundTimeAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Ground Time Average"].ToString());

                lblAirTimeLeftToRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Air Time Left to Right"].ToString());
                lblAirTimeRightToLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Air Time Right to Left"].ToString());
                lblAirTimeAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Air Time Average"].ToString());

                lblTimeToUpperLegFullFlexionLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Time to Upper Leg Full Flexion Left"].ToString());
                lblTimeToUpperLegFullFlexionRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Time to Upper Leg Full Flexion Right"].ToString());
                lblTimeToUpperLegFullFlexionAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Time to Upper Leg Full Flexion Average"].ToString());

                lblStrideRateF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Stride Rate"].ToString());

                lblStrideLengthLeftToRighF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Stride Length Left to Right"].ToString());
                lblStrideLengthRightToLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Stride Length Right to Left"].ToString());
                lblStrideLengthAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Stride Length Average"].ToString());

                lblVelocityF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Velocity"].ToString());

                lblTouchDownDistanceLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Touchdown Distance Left"].ToString());
                lblTouchDownDistanceRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Touchdown Distance Right"].ToString());
                lblTouchDownDistanceAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Touchdown Distance Average"].ToString());

                lblUpperLegFullExtentionAngleLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Extension Angle Left"].ToString());
                lblUpperLegFullExtentionAngleRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Extension Angle Right"].ToString());
                lblUpperLegFullExtentionAngleAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Extension Angle Average"].ToString());

                lblLowerLegAngleAtTakeOfLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Takeoff Left"].ToString());
                lblLowerLegAngleAtTakeOfRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Takeoff Right"].ToString());
                lblLowerLegAngleAtTakeOfAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Takeoff Average"].ToString());

                lblLowerLegFullFlexionAngleLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Full Flexion Angle Left"].ToString());
                lblLowerLegFullFlexionAngleRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Full Flexion Angle Right"].ToString());
                lblLowerLegFullFlexionAngleAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Full Flexion Angle Average"].ToString());

                lblLowerLegAngleAtAnkleCrossLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Ankle Cross Left"].ToString());
                lblLowerLegAngleAtAnkleCrossRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Ankle Cross Right"].ToString());
                lblLowerLegAngleAtAnkleCrossAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Lower Leg Angle at Ankle Cross Average"].ToString());

                lblUpperLegFullFlexionAngleLeftF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Flexion Angle Left"].ToString());
                lblUpperLegFullFlexionAngleRightF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Flexion Angle Right"].ToString());
                lblUpperLegFullFlexionAngleAverageF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Upper Leg Full Flexion Angle Average"].ToString());
            }
            //model 2 data 
            if (ds.Tables[3].Rows.Count > 0)
            {
                lblGroundTimeLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTime"].ToString());
                lblGroundTimeRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTime"].ToString());
                lblGroundTimeAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTime"].ToString());

                lblAirTimeLeftToRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["AirTime"].ToString());
                lblAirTimeRightToLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["AirTime"].ToString());
                lblAirTimeAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["AirTime"].ToString());

                lblTimeToUpperLegFullFlexionLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["FullFlexionTime"].ToString());
                lblTimeToUpperLegFullFlexionRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["FullFlexionTime"].ToString());
                lblTimeToUpperLegFullFlexionAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["FullFlexionTime"].ToString());

                lblStrideRateM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Stride Rate"].ToString());

                lblStrideLengthLeftToRighM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLength"].ToString());
                lblStrideLengthRightToLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLength"].ToString());
                lblStrideLengthAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLength"].ToString());

                lblVelocityM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Velocity"].ToString());

                lblTouchDownDistanceLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["COGDistance"].ToString());
                lblTouchDownDistanceRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["COGDistance"].ToString());
                lblTouchDownDistanceAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["COGDistance"].ToString());

                lblUpperLegFullExtentionAngleLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullExtensionAngle"].ToString());
                lblUpperLegFullExtentionAngleRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullExtensionAngle"].ToString());
                lblUpperLegFullExtentionAngleAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullExtensionAngle"].ToString());

                lblLowerLegAngleAtTakeOfLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleTakeoff"].ToString());
                lblLowerLegAngleAtTakeOfRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleTakeoff"].ToString());
                lblLowerLegAngleAtTakeOfAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleTakeoff"].ToString());

                lblLowerLegFullFlexionAngleLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLFullFlexionAngle"].ToString());
                lblLowerLegFullFlexionAngleRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLFullFlexionAngle"].ToString());
                lblLowerLegFullFlexionAngleAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLFullFlexionAngle"].ToString());

                lblLowerLegAngleAtAnkleCrossLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleAC"].ToString());
                lblLowerLegAngleAtAnkleCrossRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleAC"].ToString());
                lblLowerLegAngleAtAnkleCrossAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleAC"].ToString());

                lblUpperLegFullFlexionAngleLeftM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullFlexionAngle"].ToString());
                lblUpperLegFullFlexionAngleRightM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullFlexionAngle"].ToString());
                lblUpperLegFullFlexionAngleAverageM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULFullFlexionAngle"].ToString());
            }
            #region[Current values]
            if (!lblGroundTimeLeftF.Text.Equals("") && (!lblGroundTimeAverageM2.Text.Equals("")) && (!lblGroundTimeLeftF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblGroundTimeLeftF.Text) - Convert.ToSingle(lblGroundTimeAverageM2.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeLeftM2.ForeColor = Color.Red;
                else
                    lblGroundTimeLeftM2.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeLeftM2.Text = "";
                lblGroundTimeLeftF.Text = "";
            }
            if (!lblGroundTimeRightF.Text.Equals("") && (!lblGroundTimeAverageM2.Text.Equals("")) && (!lblGroundTimeRightF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblGroundTimeRightF.Text) - Convert.ToSingle(lblGroundTimeAverageM2.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeRightM2.ForeColor = Color.Red;

                else
                    lblGroundTimeRightM2.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeRightM2.Text = "";
                lblGroundTimeRightF.Text = "";
            }
            if (!lblGroundTimeAverageF.Text.Equals("") && (!lblGroundTimeAverageM2.Text.Equals("")) && (!lblGroundTimeAverageF.Text.Equals("0.000")))
            {
                if (lblGroundTimeLeftM2.ForeColor == Color.Red && lblGroundTimeRightM2.ForeColor == Color.Red)
                    lblGroundTimeAverageM2.ForeColor = Color.Red;
                else
                    lblGroundTimeAverageM2.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeAverageM2.Text = "";
                lblGroundTimeAverageF.Text = "";
            }

            //Air time 

            #region[air time]
            if (!lblAirTimeLeftToRightF.Text.Equals("") && (!lblAirTimeAverageM2.Text.Equals("")) && (!lblAirTimeAverageF.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblAirTimeLeftToRightF.Text) - Convert.ToSingle(lblAirTimeAverageM2.Text)) >= Convert.ToSingle(.005))
                {
                    if (Convert.ToSingle(lblAirTimeLeftToRightF.Text) > Convert.ToSingle(lblAirTimeAverageM2.Text))
                    {
                        sprintAirTimeLtoRLongF = true;
                        sprintAirTimeLtoRShortF = false;
                    }
                    else
                    {
                        sprintAirTimeLtoRLongF = false;
                        sprintAirTimeLtoRShortF = true;
                    }
                    lblAirTimeLeftToRightM2.ForeColor = Color.Red;
                }
                else
                {
                    sprintAirTimeLtoRShortF = false;
                    sprintAirTimeLtoRLongF = false;
                    lblAirTimeLeftToRightM2.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintAirTimeLtoRShortF = false;
                sprintAirTimeLtoRLongF = false;

                lblAirTimeLeftToRightM2.Text = "";
                lblAirTimeLeftToRightF.Text = "";
            }

            if (!lblAirTimeRightToLeftF.Text.Equals("") && (!lblAirTimeAverageM2.Text.Equals("")) && (!lblAirTimeRightToLeftF.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblAirTimeRightToLeftF.Text) - Convert.ToSingle(lblAirTimeAverageM2.Text)) >= Convert.ToSingle(.005))
                {
                    if (Convert.ToSingle(lblAirTimeRightToLeftF.Text) > Convert.ToSingle(lblAirTimeAverageM2.Text))
                    {
                        sprintAirTimeRtoLLongF = true;
                        sprintAirTimeRtoLShortF = false;
                    }
                    else
                    {
                        sprintAirTimeRtoLLongF = false;
                        sprintAirTimeRtoLShortF = true;
                    }
                    lblAirTimeRightToLeftM2.ForeColor = Color.Red;
                }
                else
                {
                    sprintAirTimeRtoLShortF = false;
                    sprintAirTimeRtoLLongF = false;
                    lblAirTimeRightToLeftM2.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintAirTimeRtoLShortF = false;
                sprintAirTimeRtoLLongF = false;

                lblAirTimeRightToLeftM2.Text = "";
                lblAirTimeRightToLeftF.Text = "";
            }

            if (!lblAirTimeAverageF.Text.Equals("") && (!lblAirTimeAverageM2.Text.Equals("")) && (!lblAirTimeAverageF.Text.Equals("0.000")))
            {
                // if (Math.Abs(Convert.ToSingle(lblAirTimeAverageF.Text) - Convert.ToSingle(lblAirTimeAverageM2.Text)) >= Convert.ToSingle(.005))
                if (sprintAirTimeRtoLShortF && sprintAirTimeLtoRShortF)
                {
                    sprintAirTimeAverageF = true;
                    lblAirTimeAverageM2.ForeColor = Color.Red;

                }
                else if (sprintAirTimeRtoLLongF && sprintAirTimeLtoRLongF)
                {
                    sprintAirTimeAverageF = true;
                    lblAirTimeAverageM2.ForeColor = Color.Red;
                }
                else
                {
                    sprintAirTimeAverageF = false;
                    lblAirTimeAverageM2.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintAirTimeAverageF = false;
                lblAirTimeAverageM2.Text = "";
                lblAirTimeAverageF.Text = "";
            }
            #endregion[air time]

            //TimeToUpperLegFullFlexion

            if (!lblTimeToUpperLegFullFlexionLeftF.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM2.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionLeftF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTimeToUpperLegFullFlexionLeftF.Text) - Convert.ToSingle(lblTimeToUpperLegFullFlexionAverageM2.Text) <= Convert.ToSingle(-0.01))
                    lblTimeToUpperLegFullFlexionLeftM2.ForeColor = Color.Red;
                else
                    lblTimeToUpperLegFullFlexionLeftM2.ForeColor = Color.Black;
            }
            else
            {
                lblTimeToUpperLegFullFlexionLeftM2.Text = "";
                lblTimeToUpperLegFullFlexionLeftF.Text = "";
            }

            if (!lblTimeToUpperLegFullFlexionRightF.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM2.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionRightF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTimeToUpperLegFullFlexionRightF.Text) - Convert.ToSingle(lblTimeToUpperLegFullFlexionAverageM2.Text) <= Convert.ToSingle(-0.01))
                    lblTimeToUpperLegFullFlexionRightM2.ForeColor = Color.Red;
                else
                    lblTimeToUpperLegFullFlexionRightM2.ForeColor = Color.Black;
            }
            else
            {
                lblTimeToUpperLegFullFlexionRightM2.Text = "";
                lblTimeToUpperLegFullFlexionRightF.Text = "";
            }

            if (!lblTimeToUpperLegFullFlexionAverageF.Text.Equals("") && (!lblTimeToUpperLegFullFlexionAverageM2.Text.Equals("")) && (!lblTimeToUpperLegFullFlexionAverageF.Text.Equals("0.000")))
            {
                if (lblTimeToUpperLegFullFlexionLeftM2.ForeColor == Color.Red && lblTimeToUpperLegFullFlexionRightM2.ForeColor == Color.Red)
                    lblTimeToUpperLegFullFlexionAverageM2.ForeColor = Color.Red;
                else
                    lblTimeToUpperLegFullFlexionAverageM2.ForeColor = Color.Black;
            }
            else
            {
                lblTimeToUpperLegFullFlexionAverageM2.Text = "";
                lblTimeToUpperLegFullFlexionAverageF.Text = "";
            }

            if (!lblStrideRateF.Text.Equals("") && (!lblStrideRateM2.Text.Equals("")) && (!lblStrideRateF.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideRateF.Text) - Convert.ToSingle(lblStrideRateM2.Text)) >= Convert.ToSingle(0.1))
                    lblStrideRateM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblStrideRateM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStrideRateM2.Text = "";
                lblStrideRateF.Text = "";
            }

            //stride length

            #region[stride length]
            if (!lblStrideLengthLeftToRighF.Text.Equals("") && (!lblStrideLengthAverageM2.Text.Equals("")) && (!lblStrideLengthLeftToRighF.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthLeftToRighF.Text) - Convert.ToSingle(lblStrideLengthAverageM2.Text)) >= Convert.ToSingle(0.1))
                {
                    if (Convert.ToSingle(lblStrideLengthLeftToRighF.Text) > Convert.ToSingle(lblStrideLengthAverageM2.Text))
                    {
                        if (sprintAirTimeLtoRLongF)
                        {
                            sprintStrideLengthLtoRShortF = false;
                            sprintStrideLengthLtoRLongF = true;
                            lblStrideLengthLeftToRighM2.ForeColor = Color.Red;
                        }
                        else
                        {
                            sprintStrideLengthLtoRShortF = false;
                            sprintStrideLengthLtoRLongF = false;
                            lblStrideLengthLeftToRighM2.ForeColor = Color.Black;
                        }
                    }
                    else if (sprintAirTimeLtoRShortF)
                    {
                        sprintStrideLengthLtoRShortF = true;
                        sprintStrideLengthLtoRLongF = false;
                        lblStrideLengthLeftToRighM2.ForeColor = Color.Red;
                    }
                    else
                    {
                        sprintStrideLengthLtoRShortF = false;
                        sprintStrideLengthLtoRLongF = false;
                        lblStrideLengthLeftToRighM2.ForeColor = Color.Black;
                    }
                }
                else
                {
                    sprintStrideLengthLtoRShortF = false;
                    sprintStrideLengthLtoRLongF = false;
                    lblStrideLengthLeftToRighM2.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthLtoRShortF = false;
                sprintStrideLengthLtoRLongF = false;
                lblStrideLengthLeftToRighM2.Text = "";
                lblStrideLengthLeftToRighF.Text = "";
            }

            if (!lblStrideLengthRightToLeftF.Text.Equals("") && (!lblStrideLengthAverageM2.Text.Equals("")) && (!lblStrideLengthRightToLeftF.Text.Equals("0.000")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthRightToLeftF.Text) - Convert.ToSingle(lblStrideLengthAverageM2.Text)) >= Convert.ToSingle(0.1))
                {
                    if (Convert.ToSingle(lblStrideLengthRightToLeftF.Text) > Convert.ToSingle(lblStrideLengthAverageM2.Text))
                    {
                        if (sprintAirTimeRtoLLongF == true)
                        {
                            sprintStrideLengthRtoLShortF = false;
                            sprintStrideLengthRtoLLongF = true;

                            lblStrideLengthRightToLeftM2.ForeColor = Color.Red;
                        }
                        else
                        {
                            sprintStrideLengthRtoLShortF = false;
                            sprintStrideLengthRtoLLongF = false;

                            lblStrideLengthRightToLeftM2.ForeColor = Color.Black;
                        }
                    }
                    else if (sprintAirTimeRtoLShortF)
                    {
                        sprintStrideLengthRtoLShortF = true;
                        sprintStrideLengthRtoLLongF = false;

                        lblStrideLengthRightToLeftM2.ForeColor = Color.Red;
                    }
                    else
                    {
                        sprintStrideLengthRtoLShortF = false;
                        sprintStrideLengthRtoLLongF = false;

                        lblStrideLengthRightToLeftM2.ForeColor = Color.Black;
                    }
                }
                else
                {
                    sprintStrideLengthRtoLShortF = false;
                    sprintStrideLengthRtoLLongF = false;
                    lblStrideLengthRightToLeftM2.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthRtoLShortF = false;
                sprintStrideLengthRtoLLongF = false;
                lblStrideLengthRightToLeftM2.Text = "";
                lblStrideLengthRightToLeftF.Text = "";
            }

            if (!lblStrideLengthAverageF.Text.Equals("") && (!lblStrideLengthAverageM2.Text.Equals("")) && (!lblStrideLengthAverageF.Text.Equals("0.000")))
            {
                if (sprintStrideLengthRtoLShortF == true && sprintStrideLengthLtoRShortF == true)
                {
                    sprintStrideLengthAverageF = true;
                    lblStrideLengthAverageM2.ForeColor = Color.Red;
                }
                else if (sprintStrideLengthRtoLLongF && sprintStrideLengthLtoRLongF)
                {
                    sprintStrideLengthAverageF = true;
                    lblStrideLengthAverageM2.ForeColor = Color.Red;
                }
                else
                {
                    sprintStrideLengthAverageF = false;
                    lblStrideLengthAverageM2.ForeColor = Color.Black;
                }
            }
            else
            {
                sprintStrideLengthAverageF = false;
                lblStrideLengthAverageM2.Text = "";
                lblStrideLengthAverageF.Text = "";
            }
            #endregion[stride length]

            if (!lblVelocityF.Text.Equals("") && (!lblVelocityM2.Text.Equals("")) && (!lblVelocityF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblVelocityF.Text) - Convert.ToSingle(lblVelocityM2.Text) <= Convert.ToSingle(-0.65))
                    lblVelocityM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblVelocityM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblVelocityM2.Text = "";
                lblVelocityF.Text = "";
            }

            //touch down distance

            if (!lblTouchDownDistanceLeftF.Text.Equals("") && (!lblTouchDownDistanceAverageM2.Text.Equals("")) && (!lblTouchDownDistanceLeftF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTouchDownDistanceLeftF.Text) - Convert.ToSingle(lblTouchDownDistanceAverageM2.Text) >= Convert.ToSingle(.02))
                    lblTouchDownDistanceLeftM2.ForeColor = Color.Red;
                else
                    lblTouchDownDistanceLeftM2.ForeColor = Color.Black;
            }
            else
            {
                lblTouchDownDistanceLeftM2.Text = "";
                lblTouchDownDistanceLeftF.Text = "";
            }

            if (!lblTouchDownDistanceRightF.Text.Equals("") && (!lblTouchDownDistanceAverageM2.Text.Equals("")) && (!lblTouchDownDistanceRightF.Text.Equals("0.000")))
            {
                if (Convert.ToSingle(lblTouchDownDistanceRightF.Text) - Convert.ToSingle(lblTouchDownDistanceAverageM2.Text) >= Convert.ToSingle(.02))
                    lblTouchDownDistanceRightM2.ForeColor = Color.Red;
                else
                    lblTouchDownDistanceRightM2.ForeColor = Color.Black;
            }
            else
            {
                lblTouchDownDistanceRightM2.Text = "";
                lblTouchDownDistanceRightF.Text = "";
            }

            if (!lblTouchDownDistanceAverageF.Text.Equals("") && (!lblTouchDownDistanceAverageM2.Text.Equals("")) && (!lblTouchDownDistanceAverageF.Text.Equals("0.000")))
            {
                if (lblTouchDownDistanceLeftM2.ForeColor == Color.Red && lblTouchDownDistanceRightM2.ForeColor == Color.Red)
                    lblTouchDownDistanceAverageM2.ForeColor = Color.Red;
                else
                    lblTouchDownDistanceAverageM2.ForeColor = Color.Black;
            }
            else
            {
                lblTouchDownDistanceAverageM2.Text = "";
                lblTouchDownDistanceAverageF.Text = "";
            }

            //upper leg full extension angle

            if (!lblUpperLegFullExtentionAngleLeftF.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullExtentionAngleLeftF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullExtentionAngleLeftF.Text) - Convert.ToInt16(lblUpperLegFullExtentionAngleAverageM2.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullExtentionAngleLeftM2.ForeColor = Color.Red;
                else
                    lblUpperLegFullExtentionAngleLeftM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullExtentionAngleLeftM2.Text = "";
                lblUpperLegFullExtentionAngleLeftF.Text = "";
            }

            if (!lblUpperLegFullExtentionAngleRightF.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullExtentionAngleRightF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullExtentionAngleRightF.Text) - Convert.ToInt16(lblUpperLegFullExtentionAngleAverageM2.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullExtentionAngleRightM2.ForeColor = Color.Red;
                else
                    lblUpperLegFullExtentionAngleRightM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullExtentionAngleRightM2.Text = "";
                lblUpperLegFullExtentionAngleRightF.Text = "";
            }

            if (!lblUpperLegFullExtentionAngleAverageF.Text.Equals("") && (!lblUpperLegFullExtentionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullExtentionAngleAverageF.Text.Equals("0")))
            {
                if (lblUpperLegFullExtentionAngleLeftM2.ForeColor == Color.Red && lblUpperLegFullExtentionAngleRightM2.ForeColor == Color.Red)
                    lblUpperLegFullExtentionAngleAverageM2.ForeColor = Color.Red;
                else
                    lblUpperLegFullExtentionAngleAverageM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullExtentionAngleAverageM2.Text = "";
                lblUpperLegFullExtentionAngleAverageF.Text = "";
            }

            //LowerLegAngleAtTakeOf

            if (!lblLowerLegAngleAtTakeOfLeftF.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfLeftF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblLowerLegAngleAtTakeOfLeftF.Text) - Convert.ToInt16(lblLowerLegAngleAtTakeOfAverageM2.Text) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtTakeOfLeftM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblLowerLegAngleAtTakeOfLeftM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblLowerLegAngleAtTakeOfLeftF.Text = "";
                lblLowerLegAngleAtTakeOfLeftM2.Text = "";
            }

            if (!lblLowerLegAngleAtTakeOfRightF.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfRightF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblLowerLegAngleAtTakeOfRightF.Text) - Convert.ToInt16(lblLowerLegAngleAtTakeOfAverageM2.Text) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtTakeOfRightM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblLowerLegAngleAtTakeOfRightM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblLowerLegAngleAtTakeOfRightF.Text = "";
                lblLowerLegAngleAtTakeOfRightM2.Text = "";
            }

            if (!lblLowerLegAngleAtTakeOfAverageF.Text.Equals("") && (!lblLowerLegAngleAtTakeOfAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtTakeOfAverageF.Text.Equals("0")))
            {
                if (lblLowerLegAngleAtTakeOfLeftM2.ForeColor == Color.Red && lblLowerLegAngleAtTakeOfRightM2.ForeColor == Color.Red)
                    lblLowerLegAngleAtTakeOfAverageM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblLowerLegAngleAtTakeOfAverageM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblLowerLegAngleAtTakeOfAverageF.Text = "";
                lblLowerLegAngleAtTakeOfAverageM2.Text = "";
            }

            //LowerLegFullFlexionAngle

            if (!lblLowerLegFullFlexionAngleLeftF.Text.Equals("") && (!lblLowerLegFullFlexionAngleLeftM2.Text.Equals("")) && (!lblLowerLegFullFlexionAngleLeftF.Text.Equals("0")))
            {
                if (Math.Abs(Convert.ToInt16(lblLowerLegFullFlexionAngleLeftF.Text) - Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM2.Text)) >= Convert.ToInt16(7))
                    lblLowerLegFullFlexionAngleLeftM2.ForeColor = Color.Red;
                else
                    lblLowerLegFullFlexionAngleLeftM2.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegFullFlexionAngleLeftF.Text = "";
                lblLowerLegFullFlexionAngleLeftM2.Text = "";
            }

            if (!lblLowerLegFullFlexionAngleRightF.Text.Equals("") && (!lblLowerLegFullFlexionAngleRightM2.Text.Equals("")) && (!lblLowerLegFullFlexionAngleRightF.Text.Equals("0")))
            {
                if (Math.Abs(Convert.ToInt16(lblLowerLegFullFlexionAngleRightF.Text) - Convert.ToInt16(lblLowerLegFullFlexionAngleRightM2.Text)) >= Convert.ToInt16(7))
                    lblLowerLegFullFlexionAngleRightM2.ForeColor = Color.Red;
                else
                    lblLowerLegFullFlexionAngleRightM2.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegFullFlexionAngleRightF.Text = "";
                lblLowerLegFullFlexionAngleRightM2.Text = "";
            }

            if (!lblLowerLegFullFlexionAngleAverageF.Text.Equals("") && (!lblLowerLegFullFlexionAngleAverageM2.Text.Equals("")) && (!lblLowerLegFullFlexionAngleAverageF.Text.Equals("0")))
            {
                if (lblLowerLegFullFlexionAngleLeftM2.ForeColor == Color.Red && lblLowerLegFullFlexionAngleRightM2.ForeColor == Color.Red)
                {
                    if ((Convert.ToInt16(lblLowerLegFullFlexionAngleLeftF.Text) > Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM2.Text)) && (Convert.ToInt16(lblLowerLegFullFlexionAngleRightF.Text) > Convert.ToInt16(lblLowerLegFullFlexionAngleRightM2.Text)))
                        lblLowerLegFullFlexionAngleAverageM2.ForeColor = Color.Red;
                    else
                    {
                        if ((Convert.ToInt16(lblLowerLegFullFlexionAngleLeftF.Text) < Convert.ToInt16(lblLowerLegFullFlexionAngleLeftM2.Text)) && (Convert.ToInt16(lblLowerLegFullFlexionAngleRightF.Text) < Convert.ToInt16(lblLowerLegFullFlexionAngleRightM2.Text)))
                            lblLowerLegFullFlexionAngleAverageM2.ForeColor = Color.Red;
                        else
                            lblLowerLegFullFlexionAngleAverageM2.ForeColor = Color.Black;
                    }
                }
                else
                    lblLowerLegFullFlexionAngleAverageM2.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegFullFlexionAngleAverageF.Text = "";
                lblLowerLegFullFlexionAngleAverageM2.Text = "";
            }

            //LowerLegAngleAtAnkleCross

            if (!lblLowerLegAngleAtAnkleCrossLeftF.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossLeftF.Text.Equals("0")))
            {
                if (Math.Abs(Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftF.Text) - Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtAnkleCrossLeftM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblLowerLegAngleAtAnkleCrossLeftM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblLowerLegAngleAtAnkleCrossLeftF.Text = "";
                lblLowerLegAngleAtAnkleCrossLeftM2.Text = "";
            }

            if (!lblLowerLegAngleAtAnkleCrossRightF.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossRightF.Text.Equals("0")))
            {
                if (Math.Abs(Convert.ToSingle(lblLowerLegAngleAtAnkleCrossRightF.Text) - Convert.ToSingle(lblLowerLegAngleAtAnkleCrossAverageM2.Text)) >= Convert.ToInt16(7))
                    lblLowerLegAngleAtAnkleCrossRightM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblLowerLegAngleAtAnkleCrossRightM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblLowerLegAngleAtAnkleCrossRightF.Text = "";
                lblLowerLegAngleAtAnkleCrossRightM2.Text = "";
            }

            if (!lblLowerLegAngleAtAnkleCrossAverageF.Text.Equals("") && (!lblLowerLegAngleAtAnkleCrossAverageM2.Text.Equals("")) && (!lblLowerLegAngleAtAnkleCrossAverageF.Text.Equals("0")))
            {
                if (lblLowerLegAngleAtAnkleCrossLeftM2.ForeColor == Color.Red && lblLowerLegAngleAtAnkleCrossRightM2.ForeColor == Color.Red)
                {
                    if ((Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftF.Text) > Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)) && (Convert.ToInt16(lblLowerLegAngleAtAnkleCrossRightF.Text) > Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)))
                        lblLowerLegAngleAtAnkleCrossAverageM2.ForeColor = Color.Red;
                    else
                    {
                        if ((Convert.ToInt16(lblLowerLegAngleAtAnkleCrossLeftF.Text) < Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)) && (Convert.ToInt16(lblLowerLegAngleAtAnkleCrossRightF.Text) < Convert.ToInt16(lblLowerLegAngleAtAnkleCrossAverageM2.Text)))
                            lblLowerLegAngleAtAnkleCrossAverageM2.ForeColor = Color.Red;
                        else
                            lblLowerLegAngleAtAnkleCrossAverageM2.ForeColor = Color.Black;
                    }
                }
                else
                    lblLowerLegAngleAtAnkleCrossAverageM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblLowerLegAngleAtAnkleCrossAverageF.Text = "";
                lblLowerLegAngleAtAnkleCrossAverageM2.Text = "";
            }

            //UpperLegFullFlexionAngle

            if (!lblUpperLegFullFlexionAngleLeftF.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullFlexionAngleLeftF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullFlexionAngleLeftF.Text) - Convert.ToInt16(lblUpperLegFullFlexionAngleAverageM2.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullFlexionAngleLeftM2.ForeColor = Color.Red;
                else
                    lblUpperLegFullFlexionAngleLeftM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullFlexionAngleLeftF.Text = "";
                lblUpperLegFullFlexionAngleLeftM2.Text = "";
            }
            if (!lblUpperLegFullFlexionAngleRightF.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullFlexionAngleRightF.Text.Equals("0")))
            {
                if (Convert.ToInt16(lblUpperLegFullFlexionAngleRightF.Text) - Convert.ToInt16(lblUpperLegFullFlexionAngleAverageM2.Text) <= Convert.ToInt16(-7))
                    lblUpperLegFullFlexionAngleRightM2.ForeColor = Color.Red;
                else
                    lblUpperLegFullFlexionAngleRightM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullFlexionAngleRightF.Text = "";
                lblUpperLegFullFlexionAngleRightM2.Text = "";
            }

            if (!lblUpperLegFullFlexionAngleAverageF.Text.Equals("") && (!lblUpperLegFullFlexionAngleAverageM2.Text.Equals("")) && (!lblUpperLegFullFlexionAngleAverageF.Text.Equals("0")))
            {
                if (lblUpperLegFullFlexionAngleLeftM2.ForeColor == Color.Red && lblUpperLegFullFlexionAngleRightM2.ForeColor == Color.Red)
                    lblUpperLegFullFlexionAngleAverageM2.ForeColor = Color.Red;
                else
                    lblUpperLegFullFlexionAngleAverageM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegFullFlexionAngleAverageF.Text = "";
                lblUpperLegFullFlexionAngleAverageM2.Text = "";
            }

            #endregion[Current values]
        }

        //   WriteObjectsToPageAjax();
    }

    //check later(Initial and Model(M1)  ) 
    public void GetHurdleStepsLeftMovieVariablesforNonTires(int LessonId, string lpath)
    {
        ds = sae.GetAllHurdleStepsAthletesData(LessonId);
        if (DropDownList1.SelectedValue != "")
        {
            try
            {
                int movieid = Convert.ToInt32(DropDownList1.SelectedItem.Value);
                leftMovie = DataRepository.MovieProvider.GetByMovieId(movieid);
                string location = sae.SelectLessonlocation(LessonId.ToString());
                string date = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
                string LeftSession = date + "-" + location;
                lblleftmovie.Text = LeftSession;
            }
            catch { }
        }
        if (lpath.Contains("Initial"))
        {
            if (ds.Tables[0].Rows.Count > 0)
            {   //initial Data 

                lblHurdleStepBetweenI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetDistanceBetweenHurdleSteps"].ToString());
                lblHurdleStepIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetDistanceIntoHurdleSteps"].ToString());
                lblHurdleStepOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetDistanceOffHurdleSteps"].ToString());
                lblHurdleStepVelocityI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Velocity"].ToString());

                lblStep1HSGroundTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1GroundTime"].ToString());
                lblStep1HSAirTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1AirTime"].ToString());

                //lblStep1UlFlexTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1UlFlexTime"].ToString());
                lblStep1HSStrideRateI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1 Stride Rate "].ToString());
                lblStep1HSStrideLengthI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1StrideLength"].ToString());
                lblStep1TouchdownDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1TouchdownDistance"].ToString());

                lblStep1KSTouchdownI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1KneeSeperationatTouchdown"].ToString());
                lblStep1TrunkTouchdownAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1TrunkTouchdownAngle"].ToString());
                lblStep1TrunkTakeoffAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1TrunkTakeoffAngle"].ToString());

                lblStep1ULFullExtensionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1ULAtFullExtension"].ToString());
                lblStep1LLAtTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1LLAtTakeoff"].ToString());

                lblStep1ULFullFlexionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1ULAtFullFlexion"].ToString());
                lblStep2HSGroundTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2GroundTime"].ToString());
                lblStep2HSAirTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2AirTime"].ToString());
                //lblStep2UlFlexTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2UlFlexTime"].ToString());//chk

                lblStep2HSStrideRateI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep2HSStrideLengthI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2StrideLength"].ToString());
                lblStep2TouchdownDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2TouchdownDistance"].ToString());

                lblStep2KSAtTouchdownI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2KneeSeperationatTouchdown"].ToString());
                lblStep2TrunkTouchdownAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2TrunkTouchdownAngle"].ToString());
                lblStep2TrunkTakeoffAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2TrunkTakeoffAngle"].ToString());


                lblStep2TrunkTouchdownAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1TrunkTouchdownAngle"].ToString());
                lblStep2TrunkTakeoffAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1TrunkTakeoffAngle"].ToString());

                lblStep2ULAtFullExtensionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2ULAtFullExtension"].ToString());
                lblStep2LLAtTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2LLAtTakeoff"].ToString());

                lblStep2LLAtFullFlexionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2LLAtFullFlexion"].ToString());
                lblStep2LLAtAngleCrossI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2LLAtatAnkleCross"].ToString());
                lblStep2ULAtFullFlexionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2ULAtFullFlexion"].ToString());

                lblStep3HSGroundTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3GroundTime"].ToString());
                lblStep3HSAirTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3AirTime"].ToString());
                //lblStep3UlFlexTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3UlFlexTime"].ToString());//chk
                lblStep3StrideRateI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3 Stride Rate"].ToString());

                lblStep3StrideLengthI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3StrideLength"].ToString());
                lblStep3TouchdownDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3TouchdownDistance"].ToString());

                lblStep3KSAtTouchdownI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3KneeSeperationatTouchdown"].ToString());
                lblStep3TrunkTouchdownAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3TrunkTouchdownAngle"].ToString());
                lblStep3TrunkTakeoffAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3TrunkTakeoffAngle"].ToString());




                lblStep3ULAtFullExtensionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3ULAtFullExtension"].ToString());
                lblStep3LLAtTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3LLAtTakeoff"].ToString());
                lblStep3LLAtFullFlexionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3LLAtFullFlexion"].ToString());

                lblStep3LLAtAngleCrossI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3LLAtatAnkleCross"].ToString());
                lblStep3ULAtFullFlexionI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3ULAtFullFlexion"].ToString());

                lblIntoHurdleTouchdownDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetTouchdownDistanceIntoTheHurdle"].ToString());
                lblIntoHurdleKSTouchdownI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetKneeSeperationatTouchdownIntoTheHurdle"].ToString());
                lblIntoHurdleTrunkTouchdownAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetTrunkTouchdownAngleIntoTheHurdle"].ToString());
                lblIntoHurdleLLTouchdownI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetLLAtTouchdownIntoTheHurdle"].ToString());

            }
            //model data
            if (ds.Tables[1].Rows.Count > 0)
            {
                lblHurdleStepBetweenM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetDistanceBetweenHurdleSteps"].ToString());
                lblHurdleStepIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetDistanceIntoHurdleSteps"].ToString());
                lblHurdleStepOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetDistanceOffHurdleSteps"].ToString());

                lblHurdleStepVelocityM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Velocity"].ToString());
                lblStep1HSGroundTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1GroundTime"].ToString());
                lblStep1HSAirTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1AirTime"].ToString());
                //lblStep1UlFlexTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1UlFlexTime"].ToString());//chk Step1UlFlexTime

                lblStep1HSStrideRateM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1 Stride Rate"].ToString());
                lblStep1HSStrideLengthM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1StrideLength"].ToString());
                lblStep1TouchdownDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1TouchdownDistance"].ToString());


                lblStep1KSTouchdownM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1KneeSeperationatTouchdown"].ToString());
                lblStep1TrunkTouchdownAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1TrunkTouchdownAngle"].ToString());
                lblStep1TrunkTakeoffAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1TrunkTakeoffAngle"].ToString());


                lblStep1ULAtFullExtensionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1ULAtFullExtension"].ToString());
                lblStep1LLAtTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1LLAtTakeoff"].ToString());
                lblStep1ULFullFlexionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1ULAtFullFlexion"].ToString());

                lblStep2HSGroundTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2GroundTime"].ToString());
                lblStep2HSAirTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2AirTime"].ToString());
                //lblStep2UlFlexTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2UlFlexTime"].ToString());

                lblStep2HSStrideRateM1.Text = Convert.ToString(ds.Tables[1].Rows[0][" Step2 Stride Rate"].ToString());
                lblStepHS2StrideLengthM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2StrideLength"].ToString());
                lblStep2TouchdownDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2TouchdownDistance"].ToString());

                lblStep2KSAtTouchdownM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2KneeSeperationatTouchdown"].ToString());
                lblStep2TrunkTouchdownAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2TrunkTouchdownAngle"].ToString());
                lblStep2TrunkTakeoffAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2TrunkTakeoffAngle"].ToString());


                lblStep2ULAtFullExtensionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2ULAtFullExtension"].ToString());
                lblStep2LLAtTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2LLAtTakeoff"].ToString());

                lblStep2LLFullAtFlexionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2LLAtFullFlexion"].ToString());
                lblStep2LLAtAngleCrossM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2LLAtatAnkleCross"].ToString());
                lblStep2ULAtFullFlexionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2ULAtFullFlexion"].ToString());

                lblStep3HSGroundTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3GroundTime"].ToString());
                lblStep3HSAirTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3AirTime"].ToString());
                //lblStep3UlFlexTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3UlFlexTime"].ToString());//chk

                lblStep3StrideRateM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3 Stride Rate"].ToString());
                lblStep3StrideLengthM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3StrideLength"].ToString());
                lblStep3TouchdownDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3TouchdownDistance"].ToString());

                lblStep3KSAtTouchdownM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3KneeSeperationatTouchdown"].ToString());
                lblStep3TrunkTouchdownAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3TrunkTouchdownAngle"].ToString());
                lblStep3TrunkTakeoffAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3TrunkTakeoffAngle"].ToString());


                lblStep3ULAtFullExtensionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3ULAtFullExtension"].ToString());
                lblStep3LLAtTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3LLAtTakeoff"].ToString());

                lblStep3LLAtFullFlexionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3LLAtFullFlexion"].ToString());
                lblStep3LLAtAngleCrossM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3LLAtatAnkleCross"].ToString());
                lblStep3ULAtFullFlexionM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3ULAtFullFlexion"].ToString());


                lblIntoHurdleTouchdownDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetTouchdownDistanceIntoTheHurdle"].ToString());
                lblIntoHurdleKSTouchdownM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetKneeSeperationatTouchdownIntoTheHurdle"].ToString());
                lblIntoHurdleTrunkTouchdownAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetTrunkTouchdownAngleIntoTheHurdle"].ToString());
                lblIntoHurdleLLTouchdownM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetLLAtTouchdownIntoTheHurdle"].ToString());

            }

            //It's Depends On Calculation
            //[Initial values]
            #region[initial model values]

            //StrideLengthIntoHurdle(For Into as mentioned in the Chart)
            #region[StrideLengthIntoHurdle]
            //StrideLengthIntoHurdle(For Into as mentioned in the chart)   lblHurdleStepBetweenI

            if (!lblHurdleStepIntoI.Text.Equals("") && (!lblHurdleStepIntoM1.Text.Equals("")) && (!lblHurdleStepIntoI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblHurdleStepIntoI.Text) - Convert.ToSingle(lblHurdleStepIntoM1.Text)) >= Convert.ToSingle(.06))
                    lblHurdleStepIntoM1.ForeColor = Color.Red;
                else
                    lblHurdleStepIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblHurdleStepIntoM1.Text = "";
                lblHurdleStepIntoI.Text = "";
            }
            #endregion

            //StrideLengthOffHurdle(For Off as mentioned in the Chart)
            #region[StrideLengthOffHurdle]
            if (!lblHurdleStepOffI.Text.Equals("") && (!lblHurdleStepOffM1.Text.Equals("")) && (!lblHurdleStepOffI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblHurdleStepOffI.Text) - Convert.ToSingle(lblHurdleStepOffM1.Text)) >= Convert.ToSingle(.06))
                    lblHurdleStepOffM1.ForeColor = Color.Red;
                else
                    lblHurdleStepOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblHurdleStepOffM1.Text = "";
                lblHurdleStepOffI.Text = "";
            }
            #endregion
            //Velocity     
            #region[Velocity]

            if (!lblHurdleStepVelocityI.Text.Equals("") && (!lblHurdleStepVelocityM1.Text.Equals("")) && (!lblHurdleStepVelocityI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblHurdleStepVelocityI.Text) - Convert.ToSingle(lblHurdleStepVelocityM1.Text) <= Convert.ToSingle(-0.50))
                    lblHurdleStepVelocityM1.ForeColor = Color.Red;
                else
                    lblHurdleStepVelocityM1.ForeColor = Color.Black;
            }
            else
            {
                lblHurdleStepVelocityM1.Text = "";
                lblHurdleStepVelocityI.Text = "";
            }
            #endregion
            //Ground Time
            #region[Ground Time]
            if (!lblStep1HSGroundTimeI.Text.Equals("") && (!lblStep1HSGroundTimeM1.Text.Equals("")) && (!lblStep1HSGroundTimeI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1HSGroundTimeI.Text) - Convert.ToSingle(lblStep1HSGroundTimeM1.Text) >= Convert.ToSingle(.007))
                    lblStep1HSGroundTimeM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep1HSGroundTimeM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep1HSGroundTimeM1.Text = "";
                lblStep1HSGroundTimeI.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblStep2HSGroundTimeI.Text.Equals("") && (!lblStep2HSGroundTimeM1.Text.Equals("")) && (!lblStep2HSGroundTimeI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2HSGroundTimeI.Text) - Convert.ToSingle(lblStep2HSGroundTimeM1.Text) >= Convert.ToSingle(.007))
                    lblStep2HSGroundTimeM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep2HSGroundTimeM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep2HSGroundTimeM1.Text = "";
                lblStep2HSGroundTimeI.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblStep3HSGroundTimeI.Text.Equals("") && (!lblStep3HSGroundTimeM1.Text.Equals("")) && (!lblStep3HSGroundTimeI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3HSGroundTimeI.Text) - Convert.ToSingle(lblStep3HSGroundTimeM1.Text) >= Convert.ToSingle(.007))
                    lblStep3HSGroundTimeM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep3HSGroundTimeM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep3HSGroundTimeM1.Text = "";
                lblStep3HSGroundTimeI.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80"); lblStep3HSGroundTimeM1
            }
            #endregion
            //Air time 
            #region[Air Time]
            if (!lblStep1HSAirTimeI.Text.Equals("") && (!lblStep1HSAirTimeM1.Text.Equals("")) && (!lblStep1HSAirTimeI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1HSAirTimeI.Text) - Convert.ToSingle(lblStep1HSAirTimeM1.Text) >= Convert.ToSingle(.007))
                    lblStep1HSAirTimeM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep1HSAirTimeM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep1HSAirTimeM1.Text = "";
                lblStep1HSAirTimeI.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblStep2HSAirTimeI.Text.Equals("") && (!lblStep2HSAirTimeM1.Text.Equals("")) && (!lblStep2HSAirTimeI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2HSAirTimeI.Text) - Convert.ToSingle(lblStep2HSAirTimeM1.Text) >= Convert.ToSingle(.007))
                    lblStep2HSAirTimeM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep2HSAirTimeM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep2HSAirTimeM1.Text = "";
                lblStep2HSAirTimeI.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");lblStep3HSAirTimeI
            }

            if (!lblStep3HSAirTimeI.Text.Equals("") && (!lblStep3HSAirTimeM1.Text.Equals("")) && (!lblStep3HSAirTimeI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3HSAirTimeI.Text) - Convert.ToSingle(lblStep3HSAirTimeM1.Text) >= Convert.ToSingle(.007))
                    lblStep3HSAirTimeM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep3HSAirTimeM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep3HSAirTimeM1.Text = "";
                lblStep3HSAirTimeI.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }
            #endregion

            // TimeToUpperLegFullFlexion(for  UlFlexTime  ) 
            #region[Upper Leg at Full Flexion ]

            //if (!lblStep1UlFlexTimeI.Text.Equals("") && (!lblStep1UlFlexTimeM1.Text.Equals("")) && (!lblStep1UlFlexTimeI.Text.Equals("0.00")))
            //{
            //    if (Convert.ToSingle(lblStep1UlFlexTimeI.Text) - Convert.ToSingle(lblStep1UlFlexTimeM1.Text) <= Convert.ToSingle(-0.01))
             //       lblStep1UlFlexTimeM1.ForeColor = Color.Red;
             //   else
              //      lblStep1UlFlexTimeM1.ForeColor = Color.Black;
            //}
            //else
            //{
              //  lblStep1UlFlexTimeM1.Text = "";
             //   lblStep1UlFlexTimeI.Text = "";
            //}

           // if (!lblStep2UlFlexTimeI.Text.Equals("") && (!lblStep2UlFlexTimeM1.Text.Equals("")) && (!lblStep2UlFlexTimeI.Text.Equals("0.00")))
           // {
           //     if (Convert.ToSingle(lblStep2UlFlexTimeI.Text) - Convert.ToSingle(lblStep2UlFlexTimeM1.Text) <= Convert.ToSingle(-0.01))
           //         lblStep2UlFlexTimeM1.ForeColor = Color.Red;
           //     else
           //         lblStep2UlFlexTimeM1.ForeColor = Color.Black;
           // }
           // else
           // {
           //     lblStep2UlFlexTimeM1.Text = "";
           //     lblStep2UlFlexTimeI.Text = "";
           // }

           // if (!lblStep3UlFlexTimeI.Text.Equals("") && (!lblStep3UlFlexTimeM1.Text.Equals("")) && (!lblStep3UlFlexTimeI.Text.Equals("0.00")))
           // {
           //     if (Convert.ToSingle(lblStep3UlFlexTimeI.Text) - Convert.ToSingle(lblStep3UlFlexTimeM1.Text) <= Convert.ToSingle(-0.01))
           //         lblStep3UlFlexTimeM1.ForeColor = Color.Red;
           //     else
           //         lblStep3UlFlexTimeM1.ForeColor = Color.Black;
           // }
           // else
           // {
           //     lblStep3UlFlexTimeM1.Text = "";
           //     lblStep3UlFlexTimeI.Text = "";
           // }
            #endregion

            //Stride rate 
            #region[Stride rate]
            if (!lblStep1HSStrideRateI.Text.Equals("") && (!lblStep1HSStrideRateM1.Text.Equals("")) && (!lblStep1HSStrideRateI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1HSStrideRateI.Text) - Convert.ToSingle(lblStep1HSStrideRateM1.Text)) >= Convert.ToSingle(0.1))
                    lblStep1HSStrideRateM1.ForeColor = Color.Red;
                else
                    lblStep1HSStrideRateM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1HSStrideRateM1.Text = "";
                lblStep1HSStrideRateI.Text = "";
            }

            if (!lblStep2HSStrideRateI.Text.Equals("") && (!lblStep2HSStrideRateM1.Text.Equals("")) && (!lblStep2HSStrideRateI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep2HSStrideRateI.Text) - Convert.ToSingle(lblStep2HSStrideRateM1.Text)) >= Convert.ToSingle(0.1))
                    lblStep2HSStrideRateM1.ForeColor = Color.Red;
                else
                    lblStep2HSStrideRateM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2HSStrideRateM1.Text = "";
                lblStep2HSStrideRateI.Text = "";
            }
            //lblStep3StrideRateI lblStep3StrideRateM1
            if (!lblStep3StrideRateI.Text.Equals("") && (!lblStep3StrideRateM1.Text.Equals("")) && (!lblStep3StrideRateI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep3StrideRateI.Text) - Convert.ToSingle(lblStep3StrideRateM1.Text)) >= Convert.ToSingle(0.1))
                    lblStep3StrideRateM1.ForeColor = Color.Red;
                else
                    lblStep3StrideRateM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3StrideRateM1.Text = "";
                lblStep3StrideRateI.Text = "";
            }

            #endregion
            //Stride length  
            #region[Stride length]

            if (!lblStep1StrideLengthI.Text.Equals("") && (!lblStep1StrideLengthM1.Text.Equals("")) && (!lblStep1StrideLengthI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1StrideLengthI.Text) - Convert.ToSingle(lblStep1StrideLengthM1.Text)) >= Convert.ToSingle(0.1))
                    lblStep1StrideLengthM1.ForeColor = Color.Red;
                else
                    lblStep1StrideLengthM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1StrideLengthM1.Text = "";
                lblStep1StrideLengthI.Text = "";
            }
            //lblStep2StrideLengthM1
            if (!lblStep2StrideLengthI.Text.Equals("") && (!lblStep2StrideLengthM1.Text.Equals("")) && (!lblStep2StrideLengthI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep2StrideLengthI.Text) - Convert.ToSingle(lblStep2StrideLengthM1.Text)) >= Convert.ToSingle(0.1))
                    lblStep2StrideLengthM1.ForeColor = Color.Red;
                else
                    lblStep2StrideLengthM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2StrideLengthM1.Text = "";
                lblStep2StrideLengthI.Text = "";
            }

            //lblStep3StrideLengthI lblStep3StrideLengthM1

            if (!lblStep3StrideLengthI.Text.Equals("") && (!lblStep3StrideLengthM1.Text.Equals("")) && (!lblStep3StrideLengthI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep3StrideLengthI.Text) - Convert.ToSingle(lblStep3StrideLengthM1.Text)) >= Convert.ToSingle(0.1))
                    lblStep3StrideLengthM1.ForeColor = Color.Red;
                else
                    lblStep3StrideLengthM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3StrideLengthM1.Text = "";
                lblStep3StrideLengthI.Text = "";
            }

            #endregion

            //TouchDownDistance
            #region[TouchDownDistance]//lblStep1TouchdownDistanceI lblStep1TouchdownDistanceM1

            if (!lblStep1TouchdownDistanceI.Text.Equals("") && (!lblStep1TouchdownDistanceM1.Text.Equals("")) && (!lblStep1TouchdownDistanceI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1TouchdownDistanceI.Text) - Convert.ToSingle(lblStep1TouchdownDistanceM1.Text) >= Convert.ToSingle(.02))
                    lblStep1TouchdownDistanceM1.ForeColor = Color.Red;
                else
                    lblStep1TouchdownDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1TouchdownDistanceM1.Text = "";
                lblStep1TouchdownDistanceI.Text = "";
            }
            //lblStep2TouchdownDistanceI lblStep2TouchdownDistanceM1
            if (!lblStep2TouchdownDistanceI.Text.Equals("") && (!lblStep2TouchdownDistanceM1.Text.Equals("")) && (!lblStep2TouchdownDistanceI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2TouchdownDistanceI.Text) - Convert.ToSingle(lblStep2TouchdownDistanceM1.Text) >= Convert.ToSingle(.02))
                    lblStep2TouchdownDistanceM1.ForeColor = Color.Red;
                else
                    lblStep2TouchdownDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2TouchdownDistanceM1.Text = "";
                lblStep2TouchdownDistanceI.Text = "";
            }
            //lblStep3TouchdownDistanceM1
            if (!lblStep3TouchdownDistanceI.Text.Equals("") && (!lblStep3TouchdownDistanceM1.Text.Equals("")) && (!lblStep3TouchdownDistanceI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3TouchdownDistanceI.Text) - Convert.ToSingle(lblStep3TouchdownDistanceM1.Text) >= Convert.ToSingle(.02))
                    lblStep3TouchdownDistanceM1.ForeColor = Color.Red;
                else
                    lblStep3TouchdownDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3TouchdownDistanceM1.Text = "";
                lblStep3TouchdownDistanceI.Text = "";
            }
            //lblIntoHurdleTouchdownDistanceM1
            if (!lblIntoHurdleTouchdownDistanceI.Text.Equals("") && (!lblIntoHurdleTouchdownDistanceM1.Text.Equals("")) && (!lblIntoHurdleTouchdownDistanceI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblIntoHurdleTouchdownDistanceI.Text) - Convert.ToSingle(lblIntoHurdleTouchdownDistanceM1.Text) >= Convert.ToSingle(.02))
                    lblIntoHurdleTouchdownDistanceM1.ForeColor = Color.Red;
                else
                    lblIntoHurdleTouchdownDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblIntoHurdleTouchdownDistanceM1.Text = "";
                lblIntoHurdleTouchdownDistanceI.Text = "";
            }
            #endregion

            //TouchDownKneeSeperation   
            #region[TouchDownKneeSeperation]

            if (!lblStep1KSTouchdownI.Text.Equals("") && (!lblStep1KSTouchdownM1.Text.Equals("")) && (!lblStep1KSTouchdownI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1KSTouchdownI.Text) - Convert.ToSingle(lblStep1KSTouchdownM1.Text) >= Convert.ToSingle(.02))
                    lblStep1KSTouchdownM1.ForeColor = Color.Red;
                else
                    lblStep1KSTouchdownM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1KSTouchdownM1.Text = "";
                lblStep1KSTouchdownI.Text = "";
            }
            //lblStep2KSTouchdownM1  lblStep2KSAtTouchdownM1
            if (!lblStep2KSAtTouchdownI.Text.Equals("") && (!lblStep2KSAtTouchdownM1.Text.Equals("")) && (!lblStep2KSAtTouchdownI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2KSAtTouchdownI.Text) - Convert.ToSingle(lblStep2KSAtTouchdownM1.Text) >= Convert.ToSingle(.02))
                    lblStep2KSAtTouchdownM1.ForeColor = Color.Red;
                else
                    lblStep2KSAtTouchdownM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2KSAtTouchdownM1.Text = "";
                lblStep2KSAtTouchdownI.Text = "";
            }
            //lblStep3KSAtTouchdownM1 lblStep3KSAtTouchdownI
            if (!lblStep3KSAtTouchdownI.Text.Equals("") && (!lblStep3KSAtTouchdownM1.Text.Equals("")) && (!lblStep3KSAtTouchdownI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3KSAtTouchdownI.Text) - Convert.ToSingle(lblStep3KSAtTouchdownM1.Text) >= Convert.ToSingle(.02))
                    lblStep3KSAtTouchdownM1.ForeColor = Color.Red;
                else
                    lblStep3KSAtTouchdownM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3KSAtTouchdownM1.Text = "";
                lblStep3KSAtTouchdownI.Text = "";
            }
            //lblIntoHurdleKSTouchdownI lblIntoHurdleKSTouchdownM1 lblIntoHurdleKSTouchdownF
            if (!lblIntoHurdleKSTouchdownI.Text.Equals("") && (!lblIntoHurdleKSTouchdownM1.Text.Equals("")) && (!lblIntoHurdleKSTouchdownI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblIntoHurdleKSTouchdownI.Text) - Convert.ToSingle(lblIntoHurdleKSTouchdownM1.Text) >= Convert.ToSingle(.02))
                    lblIntoHurdleKSTouchdownM1.ForeColor = Color.Red;
                else
                    lblIntoHurdleKSTouchdownM1.ForeColor = Color.Black;
            }
            else
            {
                lblIntoHurdleKSTouchdownM1.Text = "";
                lblIntoHurdleKSTouchdownI.Text = "";
            }

            #endregion

            //TrunkTouchdownAngle
            #region[TrunkTouchdownAngle]

            //TrunkTouchdownAngle

            if (!lblStep1TrunkTouchdownAngleI.Text.Equals("") && (!lblStep1TrunkTouchdownAngleM1.Text.Equals("")) && (!lblStep1TrunkTouchdownAngleI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep1TrunkTouchdownAngleI.Text) - Convert.ToInt16(lblStep1TrunkTouchdownAngleM1.Text)) <= Convert.ToInt16(7))
                    lblStep1TrunkTouchdownAngleM1.ForeColor = Color.Red;
                else
                    lblStep1TrunkTouchdownAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1TrunkTouchdownAngleM1.Text = "";
                lblStep1TrunkTouchdownAngleI.Text = "";
            }

            if (!lblStep2TrunkTouchdownAngleI.Text.Equals("") && (!lblStep2TrunkTouchdownAngleM1.Text.Equals("")) && (!lblStep2TrunkTouchdownAngleI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep2TrunkTouchdownAngleI.Text) - Convert.ToInt16(lblStep2TrunkTouchdownAngleM1.Text)) <= Convert.ToInt16(7))
                    lblStep2TrunkTouchdownAngleM1.ForeColor = Color.Red;
                else
                    lblStep2TrunkTouchdownAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2TrunkTouchdownAngleM1.Text = "";
                lblStep2TrunkTouchdownAngleI.Text = "";
            }

            if (!lblStep3TrunkTouchdownAngleI.Text.Equals("") && (!lblStep3TrunkTouchdownAngleM1.Text.Equals("")) && (!lblStep3TrunkTouchdownAngleI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep3TrunkTouchdownAngleI.Text) - Convert.ToInt16(lblStep3TrunkTouchdownAngleM1.Text)) <= Convert.ToInt16(7))
                    lblStep3TrunkTouchdownAngleM1.ForeColor = Color.Red;
                else
                    lblStep3TrunkTouchdownAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3TrunkTouchdownAngleM1.Text = "";
                lblStep3TrunkTouchdownAngleI.Text = "";
            }

            if (!lblIntoHurdleTrunkTouchdownAngleI.Text.Equals("") && (!lblIntoHurdleTrunkTouchdownAngleM1.Text.Equals("")) && (!lblIntoHurdleTrunkTouchdownAngleI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblIntoHurdleTrunkTouchdownAngleI.Text) - Convert.ToInt16(lblIntoHurdleTrunkTouchdownAngleM1.Text)) <= Convert.ToInt16(7))
                    lblIntoHurdleTrunkTouchdownAngleM1.ForeColor = Color.Red;
                else
                    lblIntoHurdleTrunkTouchdownAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblIntoHurdleTrunkTouchdownAngleM1.Text = "";
                lblIntoHurdleTrunkTouchdownAngleI.Text = "";
            }


            #endregion

            //TrunkOffAngle 
            #region[TrunkOffAngle]
            if (!lblStep1TrunkTakeoffAngleI.Text.Equals("") && (!lblStep1TrunkTakeoffAngleM1.Text.Equals("")) && (!lblStep1TrunkTakeoffAngleI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep1TrunkTakeoffAngleI.Text) - Convert.ToInt16(lblStep1TrunkTakeoffAngleM1.Text)) <= Convert.ToInt16(7))
                    lblStep1TrunkTakeoffAngleM1.ForeColor = Color.Red;
                else
                    lblStep1TrunkTakeoffAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1TrunkTakeoffAngleM1.Text = "";
                lblStep1TrunkTakeoffAngleI.Text = "";
            }

            if (!lblStep2TrunkTakeoffAngleI.Text.Equals("") && (!lblStep2TrunkTakeoffAngleM1.Text.Equals("")) && (!lblStep2TrunkTakeoffAngleI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep2TrunkTakeoffAngleI.Text) - Convert.ToInt16(lblStep2TrunkTakeoffAngleM1.Text)) <= Convert.ToInt16(7))
                    lblStep2TrunkTakeoffAngleM1.ForeColor = Color.Red;
                else
                    lblStep2TrunkTakeoffAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2TrunkTakeoffAngleM1.Text = "";
                lblStep2TrunkTakeoffAngleI.Text = "";
            }

            if (!lblStep3TrunkTakeoffAngleI.Text.Equals("") && (!lblStep3TrunkTakeoffAngleM1.Text.Equals("")) && (!lblStep3TrunkTakeoffAngleI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep3TrunkTakeoffAngleI.Text) - Convert.ToInt16(lblStep3TrunkTakeoffAngleM1.Text)) <= Convert.ToInt16(7))
                    lblStep3TrunkTakeoffAngleM1.ForeColor = Color.Red;
                else
                    lblStep3TrunkTakeoffAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3TrunkTakeoffAngleM1.Text = "";
                lblStep3TrunkTakeoffAngleI.Text = "";
            }
            #endregion


            //UpperLegFullExtension
            #region[UpperLegFullExtension]
            //lblStep1ULFullExtensionI  lblStep1ULAtFullExtensionM1

            if (!lblStep1ULFullExtensionI.Text.Equals("") && (!lblStep1ULAtFullExtensionM1.Text.Equals("")) && (!lblStep1ULFullExtensionI.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep1ULFullExtensionI.Text) - Convert.ToInt16(lblStep1ULAtFullExtensionM1.Text) <= Convert.ToInt16(-7))
                    lblStep1ULAtFullExtensionM1.ForeColor = Color.Red;
                else
                    lblStep1ULAtFullExtensionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1ULAtFullExtensionM1.Text = "";
                lblStep1ULFullExtensionI.Text = "";
            }
            //lblStep2ULAtFullExtensionM1 lblStep2ULAtFullExtensionI
            if (!lblStep2ULAtFullExtensionI.Text.Equals("") && (!lblStep2ULAtFullExtensionM1.Text.Equals("")) && (!lblStep2ULAtFullExtensionI.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep2ULAtFullExtensionI.Text) - Convert.ToInt16(lblStep2ULAtFullExtensionM1.Text) <= Convert.ToInt16(-7))
                    lblStep2ULAtFullExtensionM1.ForeColor = Color.Red;
                else
                    lblStep2ULAtFullExtensionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2ULAtFullExtensionM1.Text = "";
                lblStep2ULAtFullExtensionI.Text = "";
            }
            // lblStep3ULAtFullExtensionI  lblStep3ULAtFullExtensionM1

            if (!lblStep3ULAtFullExtensionI.Text.Equals("") && (!lblStep3ULAtFullExtensionM1.Text.Equals("")) && (!lblStep3ULAtFullExtensionI.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep3ULAtFullExtensionI.Text) - Convert.ToInt16(lblStep3ULAtFullExtensionM1.Text) <= Convert.ToInt16(-7))
                    lblStep3ULAtFullExtensionM1.ForeColor = Color.Red;
                else
                    lblStep3ULAtFullExtensionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3ULAtFullExtensionM1.Text = "";
                lblStep3ULAtFullExtensionI.Text = "";
            }
            #endregion
            //LowerLegAngleAtTakeOf(For Lower Leg at Takeoff )
            #region[LowerLegAngleAtTakeOf]


            if (!lblStep1LLAtTakeoffI.Text.Equals("") && (!lblStep1LLAtTakeoffM1.Text.Equals("")) && (!lblStep1LLAtTakeoffI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1LLAtTakeoffI.Text) - Convert.ToSingle(lblStep1LLAtTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblStep1LLAtTakeoffM1.ForeColor = Color.Red;
                else
                    lblStep1LLAtTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1LLAtTakeoffM1.Text = "";
                lblStep1LLAtTakeoffI.Text = "";
            }
            //lblStep2LLAtTakeoffI
            if (!lblStep2LLAtTakeoffI.Text.Equals("") && (!lblStep2LLAtTakeoffM1.Text.Equals("")) && (!lblStep2LLAtTakeoffI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2LLAtTakeoffI.Text) - Convert.ToSingle(lblStep2LLAtTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblStep2LLAtTakeoffM1.ForeColor = Color.Red;
                else
                    lblStep2LLAtTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAtTakeoffM1.Text = "";
                lblStep2LLAtTakeoffI.Text = "";
            }

            //lblStep3LLAtTakeoffI lblStep3LLAtTakeoffM1
            if (!lblStep3LLAtTakeoffI.Text.Equals("") && (!lblStep3LLAtTakeoffM1.Text.Equals("")) && (!lblStep3LLAtTakeoffI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3LLAtTakeoffI.Text) - Convert.ToSingle(lblStep3LLAtTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblStep3LLAtTakeoffM1.ForeColor = Color.Red;
                else
                    lblStep3LLAtTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3LLAtTakeoffM1.Text = "";
                lblStep3LLAtTakeoffI.Text = "";
            }

            #endregion
            //LowerLegFullFlexionAngle  
            #region[LowerLegFullFlexionAngle]
            //lblStep2LLFullAtFlexionM1  lblStep2LLAtFullFlexionI

            if (!lblStep2LLAtFullFlexionI.Text.Equals("") && (!lblStep2LLFullAtFlexionM1.Text.Equals("")) && (!lblStep2LLAtFullFlexionI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep2LLAtFullFlexionI.Text) - Convert.ToInt16(lblStep2LLFullAtFlexionM1.Text)) >= Convert.ToInt16(7))
                    lblStep2LLFullAtFlexionM1.ForeColor = Color.Red;
                else
                    lblStep2LLFullAtFlexionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLFullAtFlexionM1.Text = "";
                lblStep2LLAtFullFlexionI.Text = "";
            }
            //lblStep3LLAtFullFlexionI lblStep3LLAtFullFlexionM1

            if (!lblStep3LLAtFullFlexionI.Text.Equals("") && (!lblStep3LLAtFullFlexionM1.Text.Equals("")) && (!lblStep3LLAtFullFlexionI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep3LLAtFullFlexionI.Text) - Convert.ToInt16(lblStep3LLAtFullFlexionM1.Text)) >= Convert.ToInt16(7))
                    lblStep3LLAtFullFlexionM1.ForeColor = Color.Red;
                else
                    lblStep3LLAtFullFlexionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3LLAtFullFlexionM1.Text = "";
                lblStep3LLAtFullFlexionI.Text = "";
            }

            #endregion
            //LowerLegAnkleCrossAngle
            #region[LowerLegAnkleCrossAngle]

            //LowerLegAnkleCrossAngle    lblStep2LLAtAngleCrossI   lblStep2LLAtAngleCrossM1

            if (!lblStep2LLAtAngleCrossI.Text.Equals("") && (!lblStep2LLAtAngleCrossM1.Text.Equals("")) && (!lblStep2LLAtAngleCrossI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep2LLAtAngleCrossI.Text) - Convert.ToInt16(lblStep2LLAtAngleCrossM1.Text)) >= Convert.ToInt16(7))
                    lblStep2LLAtAngleCrossM1.ForeColor = Color.Red;
                else
                    lblStep2LLAtAngleCrossM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAtAngleCrossM1.Text = "";
                lblStep2LLAtAngleCrossI.Text = "";
            }

            if (!lblStep3LLAtAngleCrossI.Text.Equals("") && (!lblStep3LLAtAngleCrossM1.Text.Equals("")) && (!lblStep3LLAtAngleCrossI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep3LLAtAngleCrossI.Text) - Convert.ToInt16(lblStep3LLAtAngleCrossM1.Text)) >= Convert.ToInt16(7))
                    lblStep3LLAtAngleCrossM1.ForeColor = Color.Red;
                else
                    lblStep3LLAtAngleCrossM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3LLAtAngleCrossM1.Text = "";
                lblStep3LLAtAngleCrossI.Text = "";
            }

            #endregion
            //UpperLegFullFlexionAngle 
            #region[UpperLegFullFlexionAngle]

            //UpperLegFullFlexionAngle    //lblStep2ULAtFullFlexionM1 lblStep2ULAtFullAtFlexionM1

            if (!lblStep1ULFullFlexionI.Text.Equals("") && (!lblStep1ULFullFlexionM1.Text.Equals("")) && (!lblStep1ULFullFlexionI.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep1ULFullFlexionI.Text) - Convert.ToInt16(lblStep1ULFullFlexionM1.Text) <= Convert.ToInt16(-7))
                    lblStep1ULFullFlexionM1.ForeColor = Color.Red;
                else
                    lblStep1ULFullFlexionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1ULFullFlexionM1.Text = "";
                lblStep1ULFullFlexionI.Text = "";
            }
            //lblStep2ULAtFullFlexionM1 lblStep2ULAtFullFlexionI
            if (!lblStep2ULAtFullFlexionI.Text.Equals("") && (!lblStep2ULAtFullFlexionM1.Text.Equals("")) && (!lblStep2ULAtFullFlexionI.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep2ULAtFullFlexionI.Text) - Convert.ToInt16(lblStep2ULAtFullFlexionM1.Text) <= Convert.ToInt16(-7))
                    lblStep2ULAtFullFlexionM1.ForeColor = Color.Red;
                else
                    lblStep2ULAtFullFlexionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2ULAtFullFlexionM1.Text = "";
                lblStep2ULAtFullFlexionI.Text = "";
            }
            //lblStep3ULAtFullFlexionM1    lblStep3ULAtFullFlexionI.Text 
            if (!lblStep3ULAtFullFlexionI.Text.Equals("") && (!lblStep3ULAtFullFlexionM1.Text.Equals("")) && (!lblStep3ULAtFullFlexionI.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep3ULAtFullFlexionI.Text) - Convert.ToInt16(lblStep3ULAtFullFlexionM1.Text) <= Convert.ToInt16(-7))
                    lblStep3ULAtFullFlexionM1.ForeColor = Color.Red;
                else
                    lblStep3ULAtFullFlexionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3ULAtFullFlexionM1.Text = "";
                lblStep3ULAtFullFlexionI.Text = "";
            }

            #endregion

            #region[LowerLegAngleAtTouchDownIntoHurdle]

            //LowerLegAngleAtTouchDownIntoHurdle   
            if (!lblIntoHurdleLLTouchdownI.Text.Equals("") && (!lblIntoHurdleLLTouchdownM1.Text.Equals("")) && (!lblIntoHurdleLLTouchdownI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblIntoHurdleLLTouchdownI.Text) - Convert.ToInt16(lblIntoHurdleLLTouchdownM1.Text)) >= Convert.ToInt16(7))
                    lblIntoHurdleLLTouchdownM1.ForeColor = Color.Red;
                else
                    lblIntoHurdleLLTouchdownM1.ForeColor = Color.Black;
            }
            else
            {
                lblIntoHurdleLLTouchdownM1.Text = "";
                lblIntoHurdleLLTouchdownI.Text = "";
            }

            #endregion



            #endregion[initial model values]




        }
        else if (lpath.Contains("Current"))
        {
            if (ds.Tables[2].Rows.Count > 0)
            {   //Initial 
                lblHurdleStepBetweenI.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetDistanceBetweenHurdleSteps"].ToString());
                lblHurdleStepIntoI.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetDistanceIntoHurdleSteps"].ToString());
                lblHurdleStepOffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetDistanceOffHurdleSteps"].ToString());
                lblHurdleStepVelocityI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Velocity"].ToString());

                lblStep1HSGroundTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1GroundTime"].ToString());
                lblStep1HSAirTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1AirTime"].ToString());

                //lblStep1UlFlexTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1UlFlexTime"].ToString());
                lblStep1HSStrideRateI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1 Stride Rate "].ToString());
                lblStep1HSStrideLengthI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1StrideLength"].ToString());
                lblStep1TouchdownDistanceI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1TouchdownDistance"].ToString());

                lblStep1KSTouchdownI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1KneeSeperationatTouchdown"].ToString());
                lblStep1TrunkTouchdownAngleI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1TrunkTouchdownAngle"].ToString());
                lblStep1TrunkTakeoffAngleI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1TrunkTakeoffAngle"].ToString());

                lblStep1ULFullExtensionI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1ULAtFullExtension"].ToString());
                lblStep1LLAtTakeoffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1LLAtTakeoff"].ToString());

                lblStep1ULFullFlexionI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1ULAtFullFlexion"].ToString());
                lblStep2HSGroundTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2GroundTime"].ToString());
                lblStep2HSAirTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2AirTime"].ToString());
                //lblStep2UlFlexTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2UlFlexTime"].ToString());//chk

                lblStep2HSStrideRateI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep2HSStrideLengthI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2StrideLength"].ToString());
                lblStep2TouchdownDistanceI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2TouchdownDistance"].ToString());

                lblStep2KSAtTouchdownI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2KneeSeperationatTouchdown"].ToString());
                lblStep2TrunkTouchdownAngleI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2TrunkTouchdownAngle"].ToString());
                lblStep2TrunkTakeoffAngleI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2TrunkTakeoffAngle"].ToString());



                lblStep2ULAtFullExtensionI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2ULAtFullExtension"].ToString());
                lblStep2LLAtTakeoffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2LLAtTakeoff"].ToString());

                lblStep2LLAtFullFlexionI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2LLAtFullFlexion"].ToString());
                lblStep2LLAtAngleCrossI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2LLAtatAnkleCross"].ToString());
                lblStep2ULAtFullFlexionI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2ULAtFullFlexion"].ToString());

                lblStep3HSGroundTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3GroundTime"].ToString());
                lblStep3HSAirTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3AirTime"].ToString());
                //lblStep3UlFlexTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3UlFlexTime"].ToString());//chk
                lblStep3StrideRateI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3 Stride Rate"].ToString());

                lblStep3StrideLengthI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3StrideLength"].ToString());
                lblStep3TouchdownDistanceI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3TouchdownDistance"].ToString());

                lblStep3KSAtTouchdownI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3KneeSeperationatTouchdown"].ToString());
                lblStep3TrunkTouchdownAngleI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3TrunkTouchdownAngle"].ToString());
                lblStep3TrunkTakeoffAngleI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3TrunkTakeoffAngle"].ToString());



                lblStep3ULAtFullExtensionI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3ULAtFullExtension"].ToString());
                lblStep3LLAtTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[2]["Step3LLAtTakeoff"].ToString());
                lblStep3LLAtFullFlexionI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3LLAtFullFlexion"].ToString());

                lblStep3LLAtAngleCrossI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3LLAtatAnkleCross"].ToString());
                lblStep3ULAtFullFlexionI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3ULAtFullFlexion"].ToString());

                lblIntoHurdleTouchdownDistanceI.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetTouchdownDistanceIntoTheHurdle"].ToString());
                lblIntoHurdleKSTouchdownI.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetKneeSeperationatTouchdownIntoTheHurdle"].ToString());
                lblIntoHurdleTrunkTouchdownAngleI.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetTrunkTouchdownAngleIntoTheHurdle"].ToString());
                lblIntoHurdleLLTouchdownI.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetLLAtTouchdownIntoTheHurdle"].ToString());
                //  WriteObjectsToPageAjax();

            }
            if (ds.Tables[3].Rows.Count > 0)
            { //model Data
                lblHurdleStepBetweenM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetDistanceBetweenHurdleSteps"].ToString());
                lblHurdleStepIntoM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetDistanceIntoHurdleSteps"].ToString());
                lblHurdleStepOffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetDistanceOffHurdleSteps"].ToString());

                lblHurdleStepVelocityM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Velocity"].ToString());
                lblStep1HSGroundTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1GroundTime"].ToString());
                lblStep1HSAirTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1AirTime"].ToString());
                //lblStep1UlFlexTimeI.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1UlFlexTime"].ToString());//chk Step1UlFlexTime

                lblStep1HSStrideRateM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1 Stride Rate"].ToString());
                lblStep1HSStrideLengthM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1StrideLength"].ToString());
                lblStep1TouchdownDistanceM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1TouchdownDistance"].ToString());

                lblStep1KSTouchdownM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1KneeSeperationatTouchdown"].ToString());
                lblStep1TrunkTouchdownAngleM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1TrunkTouchdownAngle"].ToString());
                lblStep1TrunkTakeoffAngleM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1TrunkTakeoffAngle"].ToString());



                lblStep1ULAtFullExtensionM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1ULAtFullExtension"].ToString());
                lblStep1LLAtTakeoffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1LLAtTakeoff"].ToString());
                lblStep1ULFullFlexionM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1ULAtFullFlexion"].ToString());

                lblStep2HSGroundTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2GroundTime"].ToString());
                lblStep2HSAirTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2AirTime"].ToString());
                //lblStep2UlFlexTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2UlFlexTime"].ToString());

                lblStep2HSStrideRateM1.Text = Convert.ToString(ds.Tables[3].Rows[0][" Step2 Stride Rate"].ToString());
                lblStepHS2StrideLengthM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2StrideLength"].ToString());
                lblStep2TouchdownDistanceM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2TouchdownDistance"].ToString());

                lblStep2KSAtTouchdownM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2KneeSeperationatTouchdown"].ToString());
                lblStep2TrunkTouchdownAngleM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2TrunkTouchdownAngle"].ToString());
                lblStep2TrunkTakeoffAngleM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2TrunkTakeoffAngle"].ToString());



                lblStep2ULAtFullExtensionM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2ULAtFullExtension"].ToString());
                lblStep2LLAtTakeoffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2LLAtTakeoff"].ToString());

                lblStep2LLFullAtFlexionM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2LLAtFullFlexion"].ToString());
                lblStep2LLAtAngleCrossM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2LLAtatAnkleCross"].ToString());
                lblStep2ULAtFullFlexionM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2ULAtFullFlexion"].ToString());

                lblStep3HSGroundTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3GroundTime"].ToString());
                lblStep3HSAirTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3AirTime"].ToString());
                //lblStep3UlFlexTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3UlFlexTime"].ToString());//chk

                lblStep3StrideRateM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3 Stride Rate"].ToString());
                lblStep3StrideLengthM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3StrideLength"].ToString());
                lblStep3TouchdownDistanceM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3TouchdownDistance"].ToString());

                lblStep3KSAtTouchdownM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3KneeSeperationatTouchdown"].ToString());
                lblStep3TrunkTouchdownAngleM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3TrunkTouchdownAngle"].ToString());
                lblStep3TrunkTakeoffAngleM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3TrunkTakeoffAngle"].ToString());


                lblStep3ULAtFullExtensionM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3ULAtFullExtension"].ToString());
                lblStep3LLAtTakeoffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3LLAtTakeoff"].ToString());

                lblStep3LLAtFullFlexionM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3LLAtFullFlexion"].ToString());
                lblStep3LLAtAngleCrossM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3LLAtatAnkleCross"].ToString());
                lblStep3ULAtFullFlexionM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3ULAtFullFlexion"].ToString());


                lblIntoHurdleTouchdownDistanceM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetTouchdownDistanceIntoTheHurdle"].ToString());
                lblIntoHurdleKSTouchdownM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetKneeSeperationatTouchdownIntoTheHurdle"].ToString());
                lblIntoHurdleTrunkTouchdownAngleM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetTrunkTouchdownAngleIntoTheHurdle"].ToString());
                lblIntoHurdleLLTouchdownM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetLLAtTouchdownIntoTheHurdle"].ToString());


            }


            //[current values]
            //StrideLengthIntoHurdle(For Into as mentioned in the Chart)
            #region[StrideLengthIntoHurdle]
            //StrideLengthIntoHurdle(For Into as mentioned in the chart)   lblHurdleStepBetweenI

            if (!lblHurdleStepIntoI.Text.Equals("") && (!lblHurdleStepIntoM1.Text.Equals("")) && (!lblHurdleStepIntoI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblHurdleStepIntoI.Text) - Convert.ToSingle(lblHurdleStepIntoM1.Text)) >= Convert.ToSingle(.06))
                    lblHurdleStepIntoM1.ForeColor = Color.Red;
                else
                    lblHurdleStepIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblHurdleStepIntoM1.Text = "";
                lblHurdleStepIntoI.Text = "";
            }
            #endregion

            //StrideLengthOffHurdle(For Off as mentioned in the Chart)
            #region[StrideLengthOffHurdle]
            if (!lblHurdleStepOffI.Text.Equals("") && (!lblHurdleStepOffM1.Text.Equals("")) && (!lblHurdleStepOffI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblHurdleStepOffI.Text) - Convert.ToSingle(lblHurdleStepOffM1.Text)) >= Convert.ToSingle(.06))
                    lblHurdleStepOffM1.ForeColor = Color.Red;
                else
                    lblHurdleStepOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblHurdleStepOffM1.Text = "";
                lblHurdleStepOffI.Text = "";
            }
            #endregion
            //Velocity     
            #region[Velocity]

            if (!lblHurdleStepVelocityI.Text.Equals("") && (!lblHurdleStepVelocityM1.Text.Equals("")) && (!lblHurdleStepVelocityI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblHurdleStepVelocityI.Text) - Convert.ToSingle(lblHurdleStepVelocityM1.Text) <= Convert.ToSingle(-0.50))
                    lblHurdleStepVelocityM1.ForeColor = Color.Red;
                else
                    lblHurdleStepVelocityM1.ForeColor = Color.Black;
            }
            else
            {
                lblHurdleStepVelocityM1.Text = "";
                lblHurdleStepVelocityI.Text = "";
            }
            #endregion
            //Ground Time
            #region[Ground Time]
            if (!lblStep1HSGroundTimeI.Text.Equals("") && (!lblStep1HSGroundTimeM1.Text.Equals("")) && (!lblStep1HSGroundTimeI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1HSGroundTimeI.Text) - Convert.ToSingle(lblStep1HSGroundTimeM1.Text) >= Convert.ToSingle(.007))
                    lblStep1HSGroundTimeM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep1HSGroundTimeM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep1HSGroundTimeM1.Text = "";
                lblStep1HSGroundTimeI.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblStep2HSGroundTimeI.Text.Equals("") && (!lblStep2HSGroundTimeM1.Text.Equals("")) && (!lblStep2HSGroundTimeI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2HSGroundTimeI.Text) - Convert.ToSingle(lblStep2HSGroundTimeM1.Text) >= Convert.ToSingle(.007))
                    lblStep2HSGroundTimeM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep2HSGroundTimeM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep2HSGroundTimeM1.Text = "";
                lblStep2HSGroundTimeI.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblStep3HSGroundTimeI.Text.Equals("") && (!lblStep3HSGroundTimeM1.Text.Equals("")) && (!lblStep3HSGroundTimeI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3HSGroundTimeI.Text) - Convert.ToSingle(lblStep3HSGroundTimeM1.Text) >= Convert.ToSingle(.007))
                    lblStep3HSGroundTimeM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep3HSGroundTimeM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep3HSGroundTimeM1.Text = "";
                lblStep3HSGroundTimeI.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80"); lblStep3HSGroundTimeM1
            }
            #endregion
            //Air time 
            #region[Air Time]
            if (!lblStep1HSAirTimeI.Text.Equals("") && (!lblStep1HSAirTimeM1.Text.Equals("")) && (!lblStep1HSAirTimeI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1HSAirTimeI.Text) - Convert.ToSingle(lblStep1HSAirTimeM1.Text) >= Convert.ToSingle(.007))
                    lblStep1HSAirTimeM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep1HSAirTimeM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep1HSAirTimeM1.Text = "";
                lblStep1HSAirTimeI.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblStep2HSAirTimeI.Text.Equals("") && (!lblStep2HSAirTimeM1.Text.Equals("")) && (!lblStep2HSAirTimeI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2HSAirTimeI.Text) - Convert.ToSingle(lblStep2HSAirTimeM1.Text) >= Convert.ToSingle(.007))
                    lblStep2HSAirTimeM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep2HSAirTimeM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep2HSAirTimeM1.Text = "";
                lblStep2HSAirTimeI.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");lblStep3HSAirTimeI
            }

            if (!lblStep3HSAirTimeI.Text.Equals("") && (!lblStep3HSAirTimeM1.Text.Equals("")) && (!lblStep3HSAirTimeI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3HSAirTimeI.Text) - Convert.ToSingle(lblStep3HSAirTimeM1.Text) >= Convert.ToSingle(.007))
                    lblStep3HSAirTimeM1.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep3HSAirTimeM1.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep3HSAirTimeM1.Text = "";
                lblStep3HSAirTimeI.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }
            #endregion

            // TimeToUpperLegFullFlexion(for  UlFlexTime  ) 
            #region[Upper Leg at Full Flexion ]

            //if (!lblStep1UlFlexTimeI.Text.Equals("") && (!lblStep1UlFlexTimeM1.Text.Equals("")) && (!lblStep1UlFlexTimeI.Text.Equals("0.00")))
            //{
            //    if (Convert.ToSingle(lblStep1UlFlexTimeI.Text) - Convert.ToSingle(lblStep1UlFlexTimeM1.Text) <= Convert.ToSingle(-0.01))
            //        lblStep1UlFlexTimeM1.ForeColor = Color.Red;
            //    else
            //        lblStep1UlFlexTimeM1.ForeColor = Color.Black;
            //}
            //else
            //{
            //    lblStep1UlFlexTimeM1.Text = "";
            //    lblStep1UlFlexTimeI.Text = "";
            //}

            //if (!lblStep2UlFlexTimeI.Text.Equals("") && (!lblStep2UlFlexTimeM1.Text.Equals("")) && (!lblStep2UlFlexTimeI.Text.Equals("0.00")))
            //{
            //    if (Convert.ToSingle(lblStep2UlFlexTimeI.Text) - Convert.ToSingle(lblStep2UlFlexTimeM1.Text) <= Convert.ToSingle(-0.01))
            //        lblStep2UlFlexTimeM1.ForeColor = Color.Red;
            //    else
            //        lblStep2UlFlexTimeM1.ForeColor = Color.Black;
            //}
            //else
            //{
            //    lblStep2UlFlexTimeM1.Text = "";
            //    lblStep2UlFlexTimeI.Text = "";
            //}

            //if (!lblStep3UlFlexTimeI.Text.Equals("") && (!lblStep3UlFlexTimeM1.Text.Equals("")) && (!lblStep3UlFlexTimeI.Text.Equals("0.00")))
            //{
            //    if (Convert.ToSingle(lblStep3UlFlexTimeI.Text) - Convert.ToSingle(lblStep3UlFlexTimeM1.Text) <= Convert.ToSingle(-0.01))
            //        lblStep3UlFlexTimeM1.ForeColor = Color.Red;
            //    else
            //        lblStep3UlFlexTimeM1.ForeColor = Color.Black;
            //}
            //else
            //{
            //    lblStep3UlFlexTimeM1.Text = "";
            //    lblStep3UlFlexTimeI.Text = "";
            //}
            #endregion

            //Stride rate 
            #region[Stride rate]
            if (!lblStep1HSStrideRateI.Text.Equals("") && (!lblStep1HSStrideRateM1.Text.Equals("")) && (!lblStep1HSStrideRateI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1HSStrideRateI.Text) - Convert.ToSingle(lblStep1HSStrideRateM1.Text)) >= Convert.ToSingle(0.1))
                    lblStep1HSStrideRateM1.ForeColor = Color.Red;
                else
                    lblStep1HSStrideRateM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1HSStrideRateM1.Text = "";
                lblStep1HSStrideRateI.Text = "";
            }

            if (!lblStep2HSStrideRateI.Text.Equals("") && (!lblStep2HSStrideRateM1.Text.Equals("")) && (!lblStep2HSStrideRateI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep2HSStrideRateI.Text) - Convert.ToSingle(lblStep2HSStrideRateM1.Text)) >= Convert.ToSingle(0.1))
                    lblStep2HSStrideRateM1.ForeColor = Color.Red;
                else
                    lblStep2HSStrideRateM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2HSStrideRateM1.Text = "";
                lblStep2HSStrideRateI.Text = "";
            }
            //lblStep3StrideRateI lblStep3StrideRateM1
            if (!lblStep3StrideRateI.Text.Equals("") && (!lblStep3StrideRateM1.Text.Equals("")) && (!lblStep3StrideRateI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep3StrideRateI.Text) - Convert.ToSingle(lblStep3StrideRateM1.Text)) >= Convert.ToSingle(0.1))
                    lblStep3StrideRateM1.ForeColor = Color.Red;
                else
                    lblStep3StrideRateM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3StrideRateM1.Text = "";
                lblStep3StrideRateI.Text = "";
            }

            #endregion
            //Stride length  
            #region[Stride length]

            if (!lblStep1StrideLengthI.Text.Equals("") && (!lblStep1StrideLengthM1.Text.Equals("")) && (!lblStep1StrideLengthI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1StrideLengthI.Text) - Convert.ToSingle(lblStep1StrideLengthM1.Text)) >= Convert.ToSingle(0.1))
                    lblStep1StrideLengthM1.ForeColor = Color.Red;
                else
                    lblStep1StrideLengthM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1StrideLengthM1.Text = "";
                lblStep1StrideLengthI.Text = "";
            }
            //lblStep2StrideLengthM1
            if (!lblStep2StrideLengthI.Text.Equals("") && (!lblStep2StrideLengthM1.Text.Equals("")) && (!lblStep2StrideLengthI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep2StrideLengthI.Text) - Convert.ToSingle(lblStep2StrideLengthM1.Text)) >= Convert.ToSingle(0.1))
                    lblStep2StrideLengthM1.ForeColor = Color.Red;
                else
                    lblStep2StrideLengthM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2StrideLengthM1.Text = "";
                lblStep2StrideLengthI.Text = "";
            }

            //lblStep3StrideLengthI lblStep3StrideLengthM1

            if (!lblStep3StrideLengthI.Text.Equals("") && (!lblStep3StrideLengthM1.Text.Equals("")) && (!lblStep3StrideLengthI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep3StrideLengthI.Text) - Convert.ToSingle(lblStep3StrideLengthM1.Text)) >= Convert.ToSingle(0.1))
                    lblStep3StrideLengthM1.ForeColor = Color.Red;
                else
                    lblStep3StrideLengthM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3StrideLengthM1.Text = "";
                lblStep3StrideLengthI.Text = "";
            }

            #endregion

            //TouchDownDistance
            #region[TouchDownDistance]//lblStep1TouchdownDistanceI lblStep1TouchdownDistanceM1

            if (!lblStep1TouchdownDistanceI.Text.Equals("") && (!lblStep1TouchdownDistanceM1.Text.Equals("")) && (!lblStep1TouchdownDistanceI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1TouchdownDistanceI.Text) - Convert.ToSingle(lblStep1TouchdownDistanceM1.Text) >= Convert.ToSingle(.02))
                    lblStep1TouchdownDistanceM1.ForeColor = Color.Red;
                else
                    lblStep1TouchdownDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1TouchdownDistanceM1.Text = "";
                lblStep1TouchdownDistanceI.Text = "";
            }
            //lblStep2TouchdownDistanceI lblStep2TouchdownDistanceM1
            if (!lblStep2TouchdownDistanceI.Text.Equals("") && (!lblStep2TouchdownDistanceM1.Text.Equals("")) && (!lblStep2TouchdownDistanceI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2TouchdownDistanceI.Text) - Convert.ToSingle(lblStep2TouchdownDistanceM1.Text) >= Convert.ToSingle(.02))
                    lblStep2TouchdownDistanceM1.ForeColor = Color.Red;
                else
                    lblStep2TouchdownDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2TouchdownDistanceM1.Text = "";
                lblStep2TouchdownDistanceI.Text = "";
            }
            //lblStep3TouchdownDistanceM1
            if (!lblStep3TouchdownDistanceI.Text.Equals("") && (!lblStep3TouchdownDistanceM1.Text.Equals("")) && (!lblStep3TouchdownDistanceI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3TouchdownDistanceI.Text) - Convert.ToSingle(lblStep3TouchdownDistanceM1.Text) >= Convert.ToSingle(.02))
                    lblStep3TouchdownDistanceM1.ForeColor = Color.Red;
                else
                    lblStep3TouchdownDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3TouchdownDistanceM1.Text = "";
                lblStep3TouchdownDistanceI.Text = "";
            }
            //lblIntoHurdleTouchdownDistanceM1
            if (!lblIntoHurdleTouchdownDistanceI.Text.Equals("") && (!lblIntoHurdleTouchdownDistanceM1.Text.Equals("")) && (!lblIntoHurdleTouchdownDistanceI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblIntoHurdleTouchdownDistanceI.Text) - Convert.ToSingle(lblIntoHurdleTouchdownDistanceM1.Text) >= Convert.ToSingle(.02))
                    lblIntoHurdleTouchdownDistanceM1.ForeColor = Color.Red;
                else
                    lblIntoHurdleTouchdownDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblIntoHurdleTouchdownDistanceM1.Text = "";
                lblIntoHurdleTouchdownDistanceI.Text = "";
            }
            #endregion

            //TouchDownKneeSeperation   
            #region[TouchDownKneeSeperation]

            if (!lblStep1KSTouchdownI.Text.Equals("") && (!lblStep1KSTouchdownM1.Text.Equals("")) && (!lblStep1KSTouchdownI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1KSTouchdownI.Text) - Convert.ToSingle(lblStep1KSTouchdownM1.Text) >= Convert.ToSingle(.02))
                    lblStep1KSTouchdownM1.ForeColor = Color.Red;
                else
                    lblStep1KSTouchdownM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1KSTouchdownM1.Text = "";
                lblStep1KSTouchdownI.Text = "";
            }
            //lblStep2KSTouchdownM1  lblStep2KSAtTouchdownM1
            if (!lblStep2KSAtTouchdownI.Text.Equals("") && (!lblStep2KSAtTouchdownM1.Text.Equals("")) && (!lblStep2KSAtTouchdownI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2KSAtTouchdownI.Text) - Convert.ToSingle(lblStep2KSAtTouchdownM1.Text) >= Convert.ToSingle(.02))
                    lblStep2KSAtTouchdownM1.ForeColor = Color.Red;
                else
                    lblStep2KSAtTouchdownM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2KSAtTouchdownM1.Text = "";
                lblStep2KSAtTouchdownI.Text = "";
            }
            //lblStep3KSAtTouchdownM1 lblStep3KSAtTouchdownI
            if (!lblStep3KSAtTouchdownI.Text.Equals("") && (!lblStep3KSAtTouchdownM1.Text.Equals("")) && (!lblStep3KSAtTouchdownI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3KSAtTouchdownI.Text) - Convert.ToSingle(lblStep3KSAtTouchdownM1.Text) >= Convert.ToSingle(.02))
                    lblStep3KSAtTouchdownM1.ForeColor = Color.Red;
                else
                    lblStep3KSAtTouchdownM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3KSAtTouchdownM1.Text = "";
                lblStep3KSAtTouchdownI.Text = "";
            }
            //lblIntoHurdleKSTouchdownI lblIntoHurdleKSTouchdownM1 lblIntoHurdleKSTouchdownF
            if (!lblIntoHurdleKSTouchdownI.Text.Equals("") && (!lblIntoHurdleKSTouchdownM1.Text.Equals("")) && (!lblIntoHurdleKSTouchdownI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblIntoHurdleKSTouchdownI.Text) - Convert.ToSingle(lblIntoHurdleKSTouchdownM1.Text) >= Convert.ToSingle(.02))
                    lblIntoHurdleKSTouchdownM1.ForeColor = Color.Red;
                else
                    lblIntoHurdleKSTouchdownM1.ForeColor = Color.Black;
            }
            else
            {
                lblIntoHurdleKSTouchdownM1.Text = "";
                lblIntoHurdleKSTouchdownI.Text = "";
            }

            #endregion

            //TrunkTouchdownAngle
            #region[TrunkTouchdownAngle]

            //TrunkTouchdownAngle

            if (!lblStep1TrunkTouchdownAngleI.Text.Equals("") && (!lblStep1TrunkTouchdownAngleM1.Text.Equals("")) && (!lblStep1TrunkTouchdownAngleI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep1TrunkTouchdownAngleI.Text) - Convert.ToInt16(lblStep1TrunkTouchdownAngleM1.Text)) <= Convert.ToInt16(7))
                    lblStep1TrunkTouchdownAngleM1.ForeColor = Color.Red;
                else
                    lblStep1TrunkTouchdownAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1TrunkTouchdownAngleM1.Text = "";
                lblStep1TrunkTouchdownAngleI.Text = "";
            }

            if (!lblStep2TrunkTouchdownAngleI.Text.Equals("") && (!lblStep2TrunkTouchdownAngleM1.Text.Equals("")) && (!lblStep2TrunkTouchdownAngleI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep2TrunkTouchdownAngleI.Text) - Convert.ToInt16(lblStep2TrunkTouchdownAngleM1.Text)) <= Convert.ToInt16(7))
                    lblStep2TrunkTouchdownAngleM1.ForeColor = Color.Red;
                else
                    lblStep2TrunkTouchdownAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2TrunkTouchdownAngleM1.Text = "";
                lblStep2TrunkTouchdownAngleI.Text = "";
            }

            if (!lblStep3TrunkTouchdownAngleI.Text.Equals("") && (!lblStep3TrunkTouchdownAngleM1.Text.Equals("")) && (!lblStep3TrunkTouchdownAngleI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep3TrunkTouchdownAngleI.Text) - Convert.ToInt16(lblStep3TrunkTouchdownAngleM1.Text)) <= Convert.ToInt16(7))
                    lblStep3TrunkTouchdownAngleM1.ForeColor = Color.Red;
                else
                    lblStep3TrunkTouchdownAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3TrunkTouchdownAngleM1.Text = "";
                lblStep3TrunkTouchdownAngleI.Text = "";
            }

            if (!lblIntoHurdleTrunkTouchdownAngleI.Text.Equals("") && (!lblIntoHurdleTrunkTouchdownAngleM1.Text.Equals("")) && (!lblIntoHurdleTrunkTouchdownAngleI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblIntoHurdleTrunkTouchdownAngleI.Text) - Convert.ToInt16(lblIntoHurdleTrunkTouchdownAngleM1.Text)) <= Convert.ToInt16(7))
                    lblIntoHurdleTrunkTouchdownAngleM1.ForeColor = Color.Red;
                else
                    lblIntoHurdleTrunkTouchdownAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblIntoHurdleTrunkTouchdownAngleM1.Text = "";
                lblIntoHurdleTrunkTouchdownAngleI.Text = "";
            }


            #endregion

            //TrunkOffAngle 
            #region[TrunkOffAngle]
            if (!lblStep1TrunkTakeoffAngleI.Text.Equals("") && (!lblStep1TrunkTakeoffAngleM1.Text.Equals("")) && (!lblStep1TrunkTakeoffAngleI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep1TrunkTakeoffAngleI.Text) - Convert.ToInt16(lblStep1TrunkTakeoffAngleM1.Text)) <= Convert.ToInt16(7))
                    lblStep1TrunkTakeoffAngleM1.ForeColor = Color.Red;
                else
                    lblStep1TrunkTakeoffAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1TrunkTakeoffAngleM1.Text = "";
                lblStep1TrunkTakeoffAngleI.Text = "";
            }

            if (!lblStep2TrunkTakeoffAngleI.Text.Equals("") && (!lblStep2TrunkTakeoffAngleM1.Text.Equals("")) && (!lblStep2TrunkTakeoffAngleI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep2TrunkTakeoffAngleI.Text) - Convert.ToInt16(lblStep2TrunkTakeoffAngleM1.Text)) <= Convert.ToInt16(7))
                    lblStep2TrunkTakeoffAngleM1.ForeColor = Color.Red;
                else
                    lblStep2TrunkTakeoffAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2TrunkTakeoffAngleM1.Text = "";
                lblStep2TrunkTakeoffAngleI.Text = "";
            }

            if (!lblStep3TrunkTakeoffAngleI.Text.Equals("") && (!lblStep3TrunkTakeoffAngleM1.Text.Equals("")) && (!lblStep3TrunkTakeoffAngleI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep3TrunkTakeoffAngleI.Text) - Convert.ToInt16(lblStep3TrunkTakeoffAngleM1.Text)) <= Convert.ToInt16(7))
                    lblStep3TrunkTakeoffAngleM1.ForeColor = Color.Red;
                else
                    lblStep3TrunkTakeoffAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3TrunkTakeoffAngleM1.Text = "";
                lblStep3TrunkTakeoffAngleI.Text = "";
            }
            #endregion

            //UpperLegFullExtension
            #region[UpperLegFullExtension]
            //lblStep1ULFullExtensionI  lblStep1ULAtFullExtensionM1

            if (!lblStep1ULFullExtensionI.Text.Equals("") && (!lblStep1ULAtFullExtensionM1.Text.Equals("")) && (!lblStep1ULFullExtensionI.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep1ULFullExtensionI.Text) - Convert.ToInt16(lblStep1ULAtFullExtensionM1.Text) <= Convert.ToInt16(-7))
                    lblStep1ULAtFullExtensionM1.ForeColor = Color.Red;
                else
                    lblStep1ULAtFullExtensionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1ULAtFullExtensionM1.Text = "";
                lblStep1ULFullExtensionI.Text = "";
            }
            //lblStep2ULAtFullExtensionM1 lblStep2ULAtFullExtensionI
            if (!lblStep2ULAtFullExtensionI.Text.Equals("") && (!lblStep2ULAtFullExtensionM1.Text.Equals("")) && (!lblStep2ULAtFullExtensionI.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep2ULAtFullExtensionI.Text) - Convert.ToInt16(lblStep2ULAtFullExtensionM1.Text) <= Convert.ToInt16(-7))
                    lblStep2ULAtFullExtensionM1.ForeColor = Color.Red;
                else
                    lblStep2ULAtFullExtensionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2ULAtFullExtensionM1.Text = "";
                lblStep2ULAtFullExtensionI.Text = "";
            }
            // lblStep3ULAtFullExtensionI  lblStep3ULAtFullExtensionM1

            if (!lblStep3ULAtFullExtensionI.Text.Equals("") && (!lblStep3ULAtFullExtensionM1.Text.Equals("")) && (!lblStep3ULAtFullExtensionI.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep3ULAtFullExtensionI.Text) - Convert.ToInt16(lblStep3ULAtFullExtensionM1.Text) <= Convert.ToInt16(-7))
                    lblStep3ULAtFullExtensionM1.ForeColor = Color.Red;
                else
                    lblStep3ULAtFullExtensionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3ULAtFullExtensionM1.Text = "";
                lblStep3ULAtFullExtensionI.Text = "";
            }
            #endregion
            //LowerLegAngleAtTakeOf(For Lower Leg at Takeoff )
            #region[LowerLegAngleAtTakeOf]


            if (!lblStep1LLAtTakeoffI.Text.Equals("") && (!lblStep1LLAtTakeoffM1.Text.Equals("")) && (!lblStep1LLAtTakeoffI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1LLAtTakeoffI.Text) - Convert.ToSingle(lblStep1LLAtTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblStep1LLAtTakeoffM1.ForeColor = Color.Red;
                else
                    lblStep1LLAtTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1LLAtTakeoffM1.Text = "";
                lblStep1LLAtTakeoffI.Text = "";
            }
            //lblStep2LLAtTakeoffI
            if (!lblStep2LLAtTakeoffI.Text.Equals("") && (!lblStep2LLAtTakeoffM1.Text.Equals("")) && (!lblStep2LLAtTakeoffI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2LLAtTakeoffI.Text) - Convert.ToSingle(lblStep2LLAtTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblStep2LLAtTakeoffM1.ForeColor = Color.Red;
                else
                    lblStep2LLAtTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAtTakeoffM1.Text = "";
                lblStep2LLAtTakeoffI.Text = "";
            }

            //lblStep3LLAtTakeoffI lblStep3LLAtTakeoffM1
            if (!lblStep3LLAtTakeoffI.Text.Equals("") && (!lblStep3LLAtTakeoffM1.Text.Equals("")) && (!lblStep3LLAtTakeoffI.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3LLAtTakeoffI.Text) - Convert.ToSingle(lblStep3LLAtTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblStep3LLAtTakeoffM1.ForeColor = Color.Red;
                else
                    lblStep3LLAtTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3LLAtTakeoffM1.Text = "";
                lblStep3LLAtTakeoffI.Text = "";
            }

            #endregion
            //LowerLegFullFlexionAngle  
            #region[LowerLegFullFlexionAngle]
            //lblStep2LLFullAtFlexionM1  lblStep2LLAtFullFlexionI

            if (!lblStep2LLAtFullFlexionI.Text.Equals("") && (!lblStep2LLFullAtFlexionM1.Text.Equals("")) && (!lblStep2LLAtFullFlexionI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep2LLAtFullFlexionI.Text) - Convert.ToInt16(lblStep2LLFullAtFlexionM1.Text)) >= Convert.ToInt16(7))
                    lblStep2LLFullAtFlexionM1.ForeColor = Color.Red;
                else
                    lblStep2LLFullAtFlexionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLFullAtFlexionM1.Text = "";
                lblStep2LLAtFullFlexionI.Text = "";
            }
            //lblStep3LLAtFullFlexionI lblStep3LLAtFullFlexionM1

            if (!lblStep3LLAtFullFlexionI.Text.Equals("") && (!lblStep3LLAtFullFlexionM1.Text.Equals("")) && (!lblStep3LLAtFullFlexionI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep3LLAtFullFlexionI.Text) - Convert.ToInt16(lblStep3LLAtFullFlexionM1.Text)) >= Convert.ToInt16(7))
                    lblStep3LLAtFullFlexionM1.ForeColor = Color.Red;
                else
                    lblStep3LLAtFullFlexionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3LLAtFullFlexionM1.Text = "";
                lblStep3LLAtFullFlexionI.Text = "";
            }

            #endregion
            //LowerLegAnkleCrossAngle
            #region[LowerLegAnkleCrossAngle]

            //LowerLegAnkleCrossAngle    lblStep2LLAtAngleCrossI   lblStep2LLAtAngleCrossM1

            if (!lblStep2LLAtAngleCrossI.Text.Equals("") && (!lblStep2LLAtAngleCrossM1.Text.Equals("")) && (!lblStep2LLAtAngleCrossI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep2LLAtAngleCrossI.Text) - Convert.ToInt16(lblStep2LLAtAngleCrossM1.Text)) >= Convert.ToInt16(7))
                    lblStep2LLAtAngleCrossM1.ForeColor = Color.Red;
                else
                    lblStep2LLAtAngleCrossM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAtAngleCrossM1.Text = "";
                lblStep2LLAtAngleCrossI.Text = "";
            }

            if (!lblStep3LLAtAngleCrossI.Text.Equals("") && (!lblStep3LLAtAngleCrossM1.Text.Equals("")) && (!lblStep3LLAtAngleCrossI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep3LLAtAngleCrossI.Text) - Convert.ToInt16(lblStep3LLAtAngleCrossM1.Text)) >= Convert.ToInt16(7))
                    lblStep3LLAtAngleCrossM1.ForeColor = Color.Red;
                else
                    lblStep3LLAtAngleCrossM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3LLAtAngleCrossM1.Text = "";
                lblStep3LLAtAngleCrossI.Text = "";
            }

            #endregion
            //UpperLegFullFlexionAngle 
            #region[UpperLegFullFlexionAngle]

            //UpperLegFullFlexionAngle    //lblStep2ULAtFullFlexionM1 lblStep2ULAtFullAtFlexionM1

            if (!lblStep1ULFullFlexionI.Text.Equals("") && (!lblStep1ULFullFlexionM1.Text.Equals("")) && (!lblStep1ULFullFlexionI.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep1ULFullFlexionI.Text) - Convert.ToInt16(lblStep1ULFullFlexionM1.Text) <= Convert.ToInt16(-7))
                    lblStep1ULFullFlexionM1.ForeColor = Color.Red;
                else
                    lblStep1ULFullFlexionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1ULFullFlexionM1.Text = "";
                lblStep1ULFullFlexionI.Text = "";
            }
            //lblStep2ULAtFullFlexionM1 lblStep2ULAtFullFlexionI
            if (!lblStep2ULAtFullFlexionI.Text.Equals("") && (!lblStep2ULAtFullFlexionM1.Text.Equals("")) && (!lblStep2ULAtFullFlexionI.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep2ULAtFullFlexionI.Text) - Convert.ToInt16(lblStep2ULAtFullFlexionM1.Text) <= Convert.ToInt16(-7))
                    lblStep2ULAtFullFlexionM1.ForeColor = Color.Red;
                else
                    lblStep2ULAtFullFlexionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2ULAtFullFlexionM1.Text = "";
                lblStep2ULAtFullFlexionI.Text = "";
            }
            //lblStep3ULAtFullFlexionM1    lblStep3ULAtFullFlexionI.Text 
            if (!lblStep3ULAtFullFlexionI.Text.Equals("") && (!lblStep3ULAtFullFlexionM1.Text.Equals("")) && (!lblStep3ULAtFullFlexionI.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep3ULAtFullFlexionI.Text) - Convert.ToInt16(lblStep3ULAtFullFlexionM1.Text) <= Convert.ToInt16(-7))
                    lblStep3ULAtFullFlexionM1.ForeColor = Color.Red;
                else
                    lblStep3ULAtFullFlexionM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3ULAtFullFlexionM1.Text = "";
                lblStep3ULAtFullFlexionI.Text = "";
            }

            #endregion

            #region[LowerLegAngleAtTouchDownIntoHurdle]

            //LowerLegAngleAtTouchDownIntoHurdle   
            if (!lblIntoHurdleLLTouchdownI.Text.Equals("") && (!lblIntoHurdleLLTouchdownM1.Text.Equals("")) && (!lblIntoHurdleLLTouchdownI.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblIntoHurdleLLTouchdownI.Text) - Convert.ToInt16(lblIntoHurdleLLTouchdownM1.Text)) >= Convert.ToInt16(7))
                    lblIntoHurdleLLTouchdownM1.ForeColor = Color.Red;
                else
                    lblIntoHurdleLLTouchdownM1.ForeColor = Color.Black;
            }
            else
            {
                lblIntoHurdleLLTouchdownM1.Text = "";
                lblIntoHurdleLLTouchdownI.Text = "";
            }

            #endregion
        }

        //  WriteObjectsToPageAjax();
    }

    //check later(Final and Model(M2)
    public void GetHurdleStepsRightMovieVariablesforNonTires(int LessonId, string rpath)
    {
        ds = sae.GetAllHurdleStepsAthletesData(LessonId);
        if (DropDownList3.SelectedValue != "")
        {
            try
            {
                int movieidR = Convert.ToInt32(DropDownList3.SelectedItem.Value);
                rightMovie = DataRepository.MovieProvider.GetByMovieId(movieidR);
                string locationR = sae.SelectLessonlocation(LessonId.ToString());
                string dateR = rightMovie.DateRecorded.Month.ToString() + "/" + rightMovie.DateRecorded.Day.ToString() + "/" + rightMovie.DateRecorded.Year.ToString();
                string RightSession = dateR + "-" + locationR;
                lblHurdleStepRightMovie.Text = RightSession;
            }
            catch { }
        }
        if (rpath.Contains("Initial"))
        {
            if (ds.Tables[0].Rows.Count > 0)
            {   // Initial(use current Data)

                lblHurdleStepBetweenF.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetDistanceBetweenHurdleSteps"].ToString());
                lblHurdleStepIntoF.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetDistanceIntoHurdleSteps"].ToString());
                lblHurdleStepOffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetDistanceOffHurdleSteps"].ToString());


                lblHurdleStepVelocityF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Velocity"].ToString());
                lblStep1HSGroundTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1GroundTime"].ToString());
                lblStep1HSAirTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1AirTime"].ToString());
                //lblStep1UlFlexTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1UlFlexTime"].ToString());


                lblStep1HSStrideRateF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1 Stride Rate"].ToString());
                lblStep1HSStrideLengthF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1StrideLength"].ToString());
                lblStep1TouchdownDistanceF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1TouchdownDistance"].ToString());

                lblStep1KSTouchdownF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1KneeSeperationatTouchdown"].ToString());
                lblStep1TrunkTouchdownAngleF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1TrunkTouchdownAngle"].ToString());
                lblStep1TrunkTakeoffAngleF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1TrunkTakeoffAngle"].ToString());

                lblStep1ULAtFullExtensionF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1ULAtFullExtension"].ToString());
                lblStep1LLAtTakeoffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1LLAtTakeoff"].ToString());
                lblStep1ULFullFlexionF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1ULAtFullFlexion"].ToString());



                lblStep2HSGroundTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2GroundTime"].ToString());
                lblStep2HSAirTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2AirTime"].ToString());
                //lblStep2UlFlexTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2UlFlexTime"].ToString());


                lblStep2HSStrideRateF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep2HSStrideLengthF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2StrideLength"].ToString());
                lblStep2TouchdownDistanceF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2TouchdownDistance"].ToString());

                lblStep2KSAtTouchdownF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2KneeSeperationatTouchdown"].ToString());
                lblStep2TrunkTouchdownAngleF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2TrunkTouchdownAngle"].ToString());
                lblStep2TrunkTakeoffAngleF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2TrunkTakeoffAngle"].ToString());


                lblStep2ULAtFullExtensionF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2ULAtFullExtension"].ToString());
                lblStep2LLAtTakeoffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2LLAtTakeoff"].ToString());


                lblStep2LLAtFullFlexionF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2LLAtFullFlexion"].ToString());
                lblStep2LLAtAngleCrossF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2LLAtatAnkleCross"].ToString());
                lblStep2ULAtFullFlexionF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2ULAtFullFlexion"].ToString());

                lblStep3HSGroundTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3GroundTime"].ToString());
                lblStep3HSAirTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3AirTime"].ToString());
                //lblStep3UlFlexTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3UlFlexTime"].ToString());

                lblStep3StrideRateF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3 Stride Rate"].ToString());
                lblStep3StrideLengthF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3StrideLength"].ToString());
                lblStep3TouchdownDistanceF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3TouchdownDistance"].ToString());


                lblStep3KSAtTouchdownF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3KneeSeperationatTouchdown"].ToString());
                lblStep3TrunkTouchdownAngleF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3TrunkTouchdownAngle"].ToString());
                lblStep3TrunkTakeoffAngleF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3TrunkTakeoffAngle"].ToString());

                lblStep3ULAtFullExtensionF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3ULAtFullExtension"].ToString());
                lblStep3LLAtTakeoffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3LLAtTakeoff"].ToString());

                lblStep3LLAtFullFlexionF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3LLAtFullFlexion"].ToString());
                lblStep3LLAtAngleCrossF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3LLAtatAnkleCross"].ToString());
                lblStep3ULAtFullFlexionF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3ULAtFullFlexion"].ToString());


                lblIntoHurdleTouchdownDistanceF.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetTouchdownDistanceIntoTheHurdle"].ToString());
                lblIntoHurdleKSTouchdownF.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetKneeSeperationatTouchdownIntoTheHurdle"].ToString());
                lblIntoHurdleTrunkTouchdownAngleF.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetTrunkTouchdownAngleIntoTheHurdle"].ToString());
                lblIntoHurdleLLTouchdownF.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetLLAtTouchdownIntoTheHurdle"].ToString());


            }
            if (ds.Tables[1].Rows.Count > 0)
            {
                //model_2 data

                lblHurdleStepBetweenM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetDistanceBetweenHurdleSteps"].ToString());
                lblHurdleStepIntoM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetDistanceIntoHurdleSteps"].ToString());
                lblHurdleStepOffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetDistanceOffHurdleSteps"].ToString());


                lblHurdleStepVelocityM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Velocity"].ToString());
                lblStep1HSGroundTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1GroundTime"].ToString());
                lblStep1HSAirTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1AirTime"].ToString());
                //lblStep1UlFlexTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1UlFlexTime"].ToString());


                lblStep1HSStrideRateM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1 Stride Rate"].ToString());
                lblStep1HSStrideLengthM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1StrideLength"].ToString());
                lblStep1TouchdownDistanceM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1TouchdownDistance"].ToString());

                lblStep1KSTouchdownM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1KneeSeperationatTouchdown"].ToString());
                lblStep1TrunkTouchdownAngleM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1TrunkTouchdownAngle"].ToString());
                lblStep1TrunkTakeoffAngleM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1TrunkTakeoffAngle"].ToString());


                lblStep1ULFullExtensionM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1ULAtFullExtension"].ToString());
                lblStep1LLAtTakeoffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1LLAtTakeoff"].ToString());
                lblStep1ULFullFlexionM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1ULAtFullFlexion"].ToString());



                lblStep2HSGroundTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2GroundTime"].ToString());
                lblStep2HSAirTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2AirTime"].ToString());
                //lblStep2UlFlexTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2UlFlexTime"].ToString());


                lblStep2HSStrideRateM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep2HSStrideLengthM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2StrideLength"].ToString());
                lblStep2TouchdownDistanceM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2TouchdownDistance"].ToString());

                lblStep2KSAtTouchdownM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2KneeSeperationatTouchdown"].ToString());
                lblStep2TrunkTouchdownAngleM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2TrunkTouchdownAngle"].ToString());
                lblStep2TrunkTakeoffAngleM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2TrunkTakeoffAngle"].ToString());




                lblStep2ULAtFullExtensionM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2ULAtFullExtension"].ToString());
                lblStep2LLAtTakeoffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2LLAtTakeoff"].ToString());


                lblStep2LLAtFullFlexionM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2LLAtFullFlexion"].ToString());
                lblStep2LLAtAngleCrossM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2LLAtatAnkleCross"].ToString());
                lblStep2ULAtFullFlexionM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2ULAtFullFlexion"].ToString());

                lblStep3HSGroundTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3GroundTime"].ToString());
                lblStep3HSAirTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3AirTime"].ToString());
                //lblStep3UlFlexTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3UlFlexTime"].ToString());

                lblStep3StrideRateM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3 Stride Rate"].ToString());
                lblStep3StrideLengthM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3StrideLength"].ToString());
                lblStep3TouchdownDistanceM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3TouchdownDistance"].ToString());


                lblStep3KSAtTouchdownM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3KneeSeperationatTouchdown"].ToString());
                lblStep3TrunkTouchdownAngleM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3TrunkTouchdownAngle"].ToString());
                lblStep3TrunkTakeoffAngleM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3TrunkTakeoffAngle"].ToString());


                lblStep3ULAtFullExtensionM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3ULAtFullExtension"].ToString());
                lblStep3LLAtTakeoffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3LLAtTakeoff"].ToString());

                lblStep3LLAtFullFlexionM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3LLAtFullFlexion"].ToString());
                lblStep3LLAtAngleCrossM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3LLAtatAnkleCross"].ToString());
                lblStep3ULAtFullFlexionM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3ULAtFullFlexion"].ToString());


                lblIntoHurdleTouchdownDistanceM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetTouchdownDistanceIntoTheHurdle"].ToString());
                lblIntoHurdleKSTouchdownM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetKneeSeperationatTouchdownIntoTheHurdle"].ToString());
                lblIntoHurdleTrunkTouchdownAngleM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetTrunkTouchdownAngleIntoTheHurdle"].ToString());

                lblIntoHurdleLLTouchdownM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetLLAtTouchdownIntoTheHurdle"].ToString());

            }

            //Depends on Calculation

            //Initial values

            #region[Initial values]

            //StrideLengthIntoHurdle (For Into as mentioned in the Chart)

            if (!lblHurdleStepIntoF.Text.Equals("") && (!lblHurdleStepIntoM2.Text.Equals("")) && (!lblHurdleStepIntoF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblHurdleStepIntoF.Text) - Convert.ToSingle(lblHurdleStepIntoM2.Text)) >= Convert.ToSingle(.06))
                    lblHurdleStepIntoM2.ForeColor = Color.Red;
                else
                    lblHurdleStepIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblHurdleStepIntoM2.Text = "";
                lblHurdleStepIntoF.Text = "";
            }

            //StrideLengthOffHurdle

            if (!lblHurdleStepOffF.Text.Equals("") && (!lblHurdleStepOffM2.Text.Equals("")) && (!lblHurdleStepOffF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblHurdleStepOffF.Text) - Convert.ToSingle(lblHurdleStepOffM2.Text)) >= Convert.ToSingle(.06))
                    lblHurdleStepOffM2.ForeColor = Color.Red;
                else
                    lblHurdleStepOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblHurdleStepOffM2.Text = "";
                lblHurdleStepOffF.Text = "";
            }

            //Velocity     

            if (!lblHurdleStepVelocityF.Text.Equals("") && (!lblHurdleStepVelocityM2.Text.Equals("")) && (!lblHurdleStepVelocityF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblHurdleStepVelocityF.Text) - Convert.ToSingle(lblHurdleStepVelocityM2.Text) <= Convert.ToSingle(-0.50))
                    lblHurdleStepVelocityM2.ForeColor = Color.Red;
                else
                    lblHurdleStepVelocityM2.ForeColor = Color.Black;
            }
            else
            {
                lblHurdleStepVelocityM2.Text = "";
                lblHurdleStepVelocityF.Text = "";
            }

            //Ground Time

            if (!lblStep1HSGroundTimeF.Text.Equals("") && (!lblStep1HSGroundTimeM2.Text.Equals("")) && (!lblStep1HSGroundTimeF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1HSGroundTimeF.Text) - Convert.ToSingle(lblStep1HSGroundTimeM2.Text) >= Convert.ToSingle(.007))
                    lblStep1HSGroundTimeM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep1HSGroundTimeM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep1HSGroundTimeM2.Text = "";
                lblStep1HSGroundTimeF.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblStep2HSGroundTimeF.Text.Equals("") && (!lblStep2HSGroundTimeM2.Text.Equals("")) && (!lblStep2HSGroundTimeF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2HSGroundTimeF.Text) - Convert.ToSingle(lblStep2HSGroundTimeM2.Text) >= Convert.ToSingle(.007))
                    lblStep2HSGroundTimeM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep2HSGroundTimeM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep2HSGroundTimeM2.Text = "";
                lblStep2HSGroundTimeF.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblStep3HSGroundTimeF.Text.Equals("") && (!lblStep3HSGroundTimeM2.Text.Equals("")) && (!lblStep3HSGroundTimeF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3HSGroundTimeF.Text) - Convert.ToSingle(lblStep3HSGroundTimeM2.Text) >= Convert.ToSingle(.007))
                    lblStep3HSGroundTimeM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep3HSGroundTimeM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep3HSGroundTimeM2.Text = "";
                lblStep3HSGroundTimeF.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            //Air time 

            if (!lblStep1HSAirTimeF.Text.Equals("") && (!lblStep1HSAirTimeM2.Text.Equals("")) && (!lblStep1HSAirTimeF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1HSAirTimeF.Text) - Convert.ToSingle(lblStep1HSAirTimeM2.Text) >= Convert.ToSingle(.007))
                    lblStep1HSAirTimeM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep1HSAirTimeM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep1HSAirTimeM2.Text = "";
                lblStep1HSAirTimeF.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblStep2HSAirTimeF.Text.Equals("") && (!lblStep2HSAirTimeM2.Text.Equals("")) && (!lblStep2HSAirTimeF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2HSAirTimeF.Text) - Convert.ToSingle(lblStep2HSAirTimeM2.Text) >= Convert.ToSingle(.007))
                    lblStep2HSAirTimeM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep2HSAirTimeM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep2HSAirTimeM2.Text = "";
                lblStep2HSAirTimeF.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblStep3HSAirTimeF.Text.Equals("") && (!lblStep3HSAirTimeM2.Text.Equals("")) && (!lblStep3HSAirTimeF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3HSAirTimeF.Text) - Convert.ToSingle(lblStep3HSAirTimeM2.Text) >= Convert.ToSingle(.007))
                    lblStep3HSAirTimeM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep3HSAirTimeM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep3HSAirTimeM2.Text = "";
                lblStep3HSAirTimeF.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            // TimeToUpperLegFullFlexion(for  UlFlexTime  ) 

            //if (!lblStep1UlFlexTimeF.Text.Equals("") && (!lblStep1UlFlexTimeM2.Text.Equals("")) && (!lblStep1UlFlexTimeF.Text.Equals("0.00")))
            //{
            //    if (Convert.ToSingle(lblStep1UlFlexTimeF.Text) - Convert.ToSingle(lblStep1UlFlexTimeM2.Text) <= Convert.ToSingle(-0.01))
            //        lblStep1UlFlexTimeM2.ForeColor = Color.Red;
            //    else
            //        lblStep1UlFlexTimeM2.ForeColor = Color.Black;
            //}
            //else
            //{
            //    lblStep1UlFlexTimeM2.Text = "";
            //    lblStep1UlFlexTimeF.Text = "";
            //}

            //if (!lblStep2UlFlexTimeF.Text.Equals("") && (!lblStep2UlFlexTimeM2.Text.Equals("")) && (!lblStep2UlFlexTimeF.Text.Equals("0.00")))
            //{
            //    if (Convert.ToSingle(lblStep2UlFlexTimeF.Text) - Convert.ToSingle(lblStep2UlFlexTimeM2.Text) <= Convert.ToSingle(-0.01))
            //        lblStep2UlFlexTimeM2.ForeColor = Color.Red;
            //    else
            //        lblStep2UlFlexTimeM2.ForeColor = Color.Black;
            //}
            //else
            //{
            //    lblStep2UlFlexTimeM2.Text = "";
            //    lblStep2UlFlexTimeF.Text = "";
            //}

            //if (!lblStep3UlFlexTimeF.Text.Equals("") && (!lblStep3UlFlexTimeM2.Text.Equals("")) && (!lblStep3UlFlexTimeF.Text.Equals("0.00")))
            //{
            //    if (Convert.ToSingle(lblStep3UlFlexTimeF.Text) - Convert.ToSingle(lblStep3UlFlexTimeM2.Text) <= Convert.ToSingle(-0.01))
            //        lblStep3UlFlexTimeM2.ForeColor = Color.Red;
            //    else
            //        lblStep3UlFlexTimeM2.ForeColor = Color.Black;
            //}
            //else
            //{
            //    lblStep3UlFlexTimeM2.Text = "";
            //    lblStep3UlFlexTimeF.Text = "";
            //}

            //Stride rate

            if (!lblStep1HSStrideRateF.Text.Equals("") && (!lblStep1HSStrideRateM2.Text.Equals("")) && (!lblStep1HSStrideRateF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1HSStrideRateF.Text) - Convert.ToSingle(lblStep1HSStrideRateM2.Text)) >= Convert.ToSingle(0.1))
                    lblStep1HSStrideRateM2.ForeColor = Color.Red;
                else
                    lblStep1HSStrideRateM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1HSStrideRateM2.Text = "";
                lblStep1HSStrideRateF.Text = "";
            }

            if (!lblStep2HSStrideRateF.Text.Equals("") && (!lblStep2HSStrideRateM2.Text.Equals("")) && (!lblStep2HSStrideRateF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep2HSStrideRateF.Text) - Convert.ToSingle(lblStep2HSStrideRateM2.Text)) >= Convert.ToSingle(0.1))
                    lblStep2HSStrideRateM2.ForeColor = Color.Red;
                else
                    lblStep2HSStrideRateM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2HSStrideRateM2.Text = "";
                lblStep2HSStrideRateF.Text = "";
            }

            if (!lblStep3StrideRateF.Text.Equals("") && (!lblStep3StrideRateM2.Text.Equals("")) && (!lblStep3StrideRateF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep3StrideRateF.Text) - Convert.ToSingle(lblStep3StrideRateM2.Text)) >= Convert.ToSingle(0.1))
                    lblStep3StrideRateM2.ForeColor = Color.Red;
                else
                    lblStep3StrideRateM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3StrideRateM2.Text = "";
                lblStep3StrideRateF.Text = "";
            }

            //Stride Length

            if (!lblStep1StrideLengthF.Text.Equals("") && (!lblStep3StrideLengthM2.Text.Equals("")) && (!lblStep1StrideLengthF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1StrideLengthF.Text) - Convert.ToSingle(lblStep1StrideLengthM2.Text)) >= Convert.ToSingle(0.1))
                    lblStep3StrideLengthM2.ForeColor = Color.Red;
                else
                    lblStep3StrideLengthM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1StrideLengthM2.Text = "";
                lblStep1StrideLengthF.Text = "";
            }

            if (!lblStep2StrideLengthF.Text.Equals("") && (!lblStep2StrideLengthM2.Text.Equals("")) && (!lblStep2StrideLengthF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep2StrideLengthF.Text) - Convert.ToSingle(lblStep2StrideLengthM2.Text)) >= Convert.ToSingle(0.1))
                    lblStep2StrideLengthM2.ForeColor = Color.Red;
                else
                    lblStep2StrideLengthM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2StrideLengthM2.Text = "";
                lblStep2StrideLengthF.Text = "";
            }

            if (!lblStep3StrideLengthF.Text.Equals("") && (!lblStep3StrideLengthM2.Text.Equals("")) && (!lblStep3StrideLengthF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep3StrideLengthF.Text) - Convert.ToSingle(lblStep3StrideLengthM2.Text)) >= Convert.ToSingle(0.1))
                    lblStep3StrideLengthM2.ForeColor = Color.Red;
                else
                    lblStep3StrideLengthM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3StrideLengthM2.Text = "";
                lblStep3StrideLengthF.Text = "";
            }

            //TouchDownDistance

            if (!lblStep1TouchdownDistanceF.Text.Equals("") && (!lblStep1TouchdownDistanceM2.Text.Equals("")) && (!lblStep1TouchdownDistanceF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1TouchdownDistanceF.Text) - Convert.ToSingle(lblStep1TouchdownDistanceM2.Text) >= Convert.ToSingle(.02))
                    lblStep1TouchdownDistanceM2.ForeColor = Color.Red;
                else
                    lblStep1TouchdownDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1TouchdownDistanceM2.Text = "";
                lblStep1TouchdownDistanceF.Text = "";
            }

            if (!lblStep2TouchdownDistanceF.Text.Equals("") && (!lblStep2TouchdownDistanceM2.Text.Equals("")) && (!lblStep2TouchdownDistanceF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2TouchdownDistanceF.Text) - Convert.ToSingle(lblStep2TouchdownDistanceM2.Text) >= Convert.ToSingle(.02))
                    lblStep2TouchdownDistanceM2.ForeColor = Color.Red;
                else
                    lblStep2TouchdownDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2TouchdownDistanceM2.Text = "";
                lblStep2TouchdownDistanceF.Text = "";
            }

            if (!lblStep3TouchdownDistanceF.Text.Equals("") && (!lblStep3TouchdownDistanceM2.Text.Equals("")) && (!lblStep3TouchdownDistanceF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3TouchdownDistanceF.Text) - Convert.ToSingle(lblStep3TouchdownDistanceM2.Text) >= Convert.ToSingle(.02))
                    lblStep3TouchdownDistanceM2.ForeColor = Color.Red;
                else
                    lblStep3TouchdownDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3TouchdownDistanceM2.Text = "";
                lblStep3TouchdownDistanceF.Text = "";
            }

            if (!lblIntoHurdleTouchdownDistanceF.Text.Equals("") && (!lblIntoHurdleTouchdownDistanceM2.Text.Equals("")) && (!lblIntoHurdleTouchdownDistanceF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblIntoHurdleTouchdownDistanceF.Text) - Convert.ToSingle(lblIntoHurdleTouchdownDistanceM2.Text) >= Convert.ToSingle(.02))
                    lblIntoHurdleTouchdownDistanceM2.ForeColor = Color.Red;
                else
                    lblIntoHurdleTouchdownDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblIntoHurdleTouchdownDistanceM2.Text = "";
                lblIntoHurdleTouchdownDistanceF.Text = "";
            }
            //TouchDownKneeSeperation

            if (!lblStep1KSTouchdownF.Text.Equals("") && (!lblStep1KSTouchdownM2.Text.Equals("")) && (!lblStep1KSTouchdownF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1KSTouchdownF.Text) - Convert.ToSingle(lblStep1KSTouchdownM2.Text) >= Convert.ToSingle(.02))
                    lblStep1KSTouchdownM2.ForeColor = Color.Red;
                else
                    lblStep1KSTouchdownM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1KSTouchdownM2.Text = "";
                lblStep1KSTouchdownF.Text = "";
            }

            if (!lblStep2KSAtTouchdownF.Text.Equals("") && (!lblStep2KSAtTouchdownM2.Text.Equals("")) && (!lblStep2KSAtTouchdownF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2KSAtTouchdownF.Text) - Convert.ToSingle(lblStep2KSAtTouchdownM2.Text) >= Convert.ToSingle(.02))
                    lblStep2KSAtTouchdownM2.ForeColor = Color.Red;
                else
                    lblStep2KSAtTouchdownM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2KSAtTouchdownM2.Text = "";
                lblStep2KSAtTouchdownF.Text = "";
            }

            if (!lblStep3KSAtTouchdownF.Text.Equals("") && (!lblStep3KSAtTouchdownM2.Text.Equals("")) && (!lblStep3KSAtTouchdownF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3KSAtTouchdownF.Text) - Convert.ToSingle(lblStep3KSAtTouchdownM2.Text) >= Convert.ToSingle(.02))
                    lblStep3KSAtTouchdownM2.ForeColor = Color.Red;
                else
                    lblStep3KSAtTouchdownM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3KSAtTouchdownM2.Text = "";
                lblStep3KSAtTouchdownF.Text = "";
            }

            if (!lblIntoHurdleKSTouchdownF.Text.Equals("") && (!lblIntoHurdleKSTouchdownM2.Text.Equals("")) && (!lblIntoHurdleKSTouchdownF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblIntoHurdleKSTouchdownF.Text) - Convert.ToSingle(lblIntoHurdleKSTouchdownM2.Text) >= Convert.ToSingle(.02))
                    lblIntoHurdleKSTouchdownM2.ForeColor = Color.Red;
                else
                    lblIntoHurdleKSTouchdownM2.ForeColor = Color.Black;
            }
            else
            {
                lblIntoHurdleKSTouchdownM2.Text = "";
                lblIntoHurdleKSTouchdownF.Text = "";
            }


            //TrunkTouchdownAngle
            #region[TrunkTouchdownAngle]

            //TrunkTouchdownAngle lblStep1TrunkTouchdownAngleI

            if (!lblStep1TrunkTouchdownAngleF.Text.Equals("") && (!lblStep1TrunkTouchdownAngleM2.Text.Equals("")) && (!lblStep1TrunkTouchdownAngleF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep1TrunkTouchdownAngleF.Text) - Convert.ToInt16(lblStep1TrunkTouchdownAngleM2.Text)) <= Convert.ToInt16(7))
                    lblStep1TrunkTouchdownAngleM2.ForeColor = Color.Red;
                else
                    lblStep1TrunkTouchdownAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1TrunkTouchdownAngleM2.Text = "";
                lblStep1TrunkTouchdownAngleF.Text = "";
            }

            if (!lblStep2TrunkTouchdownAngleF.Text.Equals("") && (!lblStep2TrunkTouchdownAngleM2.Text.Equals("")) && (!lblStep2TrunkTouchdownAngleF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep2TrunkTouchdownAngleF.Text) - Convert.ToInt16(lblStep2TrunkTouchdownAngleM2.Text)) <= Convert.ToInt16(7))
                    lblStep2TrunkTouchdownAngleM2.ForeColor = Color.Red;
                else
                    lblStep2TrunkTouchdownAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2TrunkTouchdownAngleM2.Text = "";
                lblStep2TrunkTouchdownAngleF.Text = "";
            }

            if (!lblStep3TrunkTouchdownAngleF.Text.Equals("") && (!lblStep3TrunkTouchdownAngleM2.Text.Equals("")) && (!lblStep3TrunkTouchdownAngleF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep3TrunkTouchdownAngleF.Text) - Convert.ToInt16(lblStep3TrunkTouchdownAngleM2.Text)) <= Convert.ToInt16(7))
                    lblStep3TrunkTouchdownAngleM2.ForeColor = Color.Red;
                else
                    lblStep3TrunkTouchdownAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3TrunkTouchdownAngleM2.Text = "";
                lblStep3TrunkTouchdownAngleF.Text = "";
            }

            if (!lblIntoHurdleTrunkTouchdownAngleF.Text.Equals("") && (!lblIntoHurdleTrunkTouchdownAngleM2.Text.Equals("")) && (!lblIntoHurdleTrunkTouchdownAngleF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblIntoHurdleTrunkTouchdownAngleF.Text) - Convert.ToInt16(lblIntoHurdleTrunkTouchdownAngleM2.Text)) <= Convert.ToInt16(7))
                    lblIntoHurdleTrunkTouchdownAngleM2.ForeColor = Color.Red;
                else
                    lblIntoHurdleTrunkTouchdownAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblIntoHurdleTrunkTouchdownAngleM2.Text = "";
                lblIntoHurdleTrunkTouchdownAngleF.Text = "";
            }


            #endregion

            //TrunkOffAngle lblStep1TrunkTakeoffAngleI
            #region[TrunkOffAngle]
            if (!lblStep1TrunkTakeoffAngleF.Text.Equals("") && (!lblStep1TrunkTakeoffAngleM2.Text.Equals("")) && (!lblStep1TrunkTakeoffAngleF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep1TrunkTakeoffAngleF.Text) - Convert.ToInt16(lblStep1TrunkTakeoffAngleM2.Text)) <= Convert.ToInt16(7))
                    lblStep1TrunkTakeoffAngleM2.ForeColor = Color.Red;
                else
                    lblStep1TrunkTakeoffAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1TrunkTakeoffAngleM2.Text = "";
                lblStep1TrunkTakeoffAngleF.Text = "";
            }

            if (!lblStep2TrunkTakeoffAngleF.Text.Equals("") && (!lblStep2TrunkTakeoffAngleM2.Text.Equals("")) && (!lblStep2TrunkTakeoffAngleF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep2TrunkTakeoffAngleF.Text) - Convert.ToInt16(lblStep2TrunkTakeoffAngleM2.Text)) <= Convert.ToInt16(7))
                    lblStep2TrunkTakeoffAngleM2.ForeColor = Color.Red;
                else
                    lblStep2TrunkTakeoffAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2TrunkTakeoffAngleM2.Text = "";
                lblStep2TrunkTakeoffAngleF.Text = "";
            }

            if (!lblStep3TrunkTakeoffAngleF.Text.Equals("") && (!lblStep3TrunkTakeoffAngleM2.Text.Equals("")) && (!lblStep3TrunkTakeoffAngleF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep3TrunkTakeoffAngleF.Text) - Convert.ToInt16(lblStep3TrunkTakeoffAngleM2.Text)) <= Convert.ToInt16(7))
                    lblStep3TrunkTakeoffAngleM2.ForeColor = Color.Red;
                else
                    lblStep3TrunkTakeoffAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3TrunkTakeoffAngleM2.Text = "";
                lblStep3TrunkTakeoffAngleF.Text = "";
            }
            #endregion


            //UpperLegFullExtension

            if (!lblStep1ULAtFullExtensionF.Text.Equals("") && (!lblStep1ULFullExtensionM2.Text.Equals("")) && (!lblStep1ULAtFullExtensionF.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep1ULAtFullExtensionF.Text) - Convert.ToInt16(lblStep1ULFullExtensionM2.Text) <= Convert.ToInt16(-7))
                    lblStep1ULFullExtensionM2.ForeColor = Color.Red;
                else
                    lblStep1ULFullExtensionM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1ULFullExtensionM2.Text = "";
                lblStep1ULAtFullExtensionF.Text = "";
            }

            if (!lblStep1ULAtFullExtensionF.Text.Equals("") && (!lblStep2ULAtFullExtensionM2.Text.Equals("")) && (!lblStep1ULAtFullExtensionF.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep1ULAtFullExtensionF.Text) - Convert.ToInt16(lblStep2ULAtFullExtensionM2.Text) <= Convert.ToInt16(-7))
                    lblStep2ULAtFullExtensionM2.ForeColor = Color.Red;
                else
                    lblStep2ULAtFullExtensionM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2ULAtFullExtensionM2.Text = "";
                lblStep1ULAtFullExtensionF.Text = "";
            }

            if (!lblStep2ULAtFullExtensionF.Text.Equals("") && (!lblStep2ULAtFullExtensionM2.Text.Equals("")) && (!lblStep2ULAtFullExtensionF.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep2ULAtFullExtensionF.Text) - Convert.ToInt16(lblStep2ULAtFullExtensionM2.Text) <= Convert.ToInt16(-7))
                    lblStep2ULAtFullExtensionM2.ForeColor = Color.Red;
                else
                    lblStep2ULAtFullExtensionM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2ULAtFullExtensionM2.Text = "";
                lblStep2ULAtFullExtensionF.Text = "";
            }

            if (!lblStep3ULAtFullExtensionF.Text.Equals("") && (!lblStep3ULAtFullExtensionM2.Text.Equals("")) && (!lblStep3ULAtFullExtensionF.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep3ULAtFullExtensionF.Text) - Convert.ToInt16(lblStep3ULAtFullExtensionM2.Text) <= Convert.ToInt16(-7))
                    lblStep3ULAtFullExtensionM2.ForeColor = Color.Red;
                else
                    lblStep3ULAtFullExtensionM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3ULAtFullExtensionM2.Text = "";
                lblStep3ULAtFullExtensionF.Text = "";
            }

            //LowerLegAngleAtTakeOf   


            if (!lblStep1LLAtTakeoffF.Text.Equals("") && (!lblStep1LLAtTakeoffM2.Text.Equals("")) && (!lblStep1LLAtTakeoffF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1LLAtTakeoffF.Text) - Convert.ToSingle(lblStep1LLAtTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblStep1LLAtTakeoffM2.ForeColor = Color.Red;
                else
                    lblStep1LLAtTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1LLAtTakeoffM2.Text = "";
                lblStep1LLAtTakeoffF.Text = "";
            }

            if (!lblStep2LLAtTakeoffF.Text.Equals("") && (!lblStep2LLAtTakeoffM2.Text.Equals("")) && (!lblStep2LLAtTakeoffF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2LLAtTakeoffF.Text) - Convert.ToSingle(lblStep2LLAtTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblStep2LLAtTakeoffM2.ForeColor = Color.Red;
                else
                    lblStep2LLAtTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAtTakeoffM2.Text = "";
                lblStep2LLAtTakeoffF.Text = "";
            }

            if (!lblStep3LLAtTakeoffF.Text.Equals("") && (!lblStep3LLAtTakeoffM2.Text.Equals("")) && (!lblStep3LLAtTakeoffF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3LLAtTakeoffF.Text) - Convert.ToSingle(lblStep3LLAtTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblStep3LLAtTakeoffM2.ForeColor = Color.Red;
                else
                    lblStep3LLAtTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3LLAtTakeoffM2.Text = "";
                lblStep3LLAtTakeoffF.Text = "";
            }

            //LowerLegFullFlexionAngle 

            if (!lblStep2LLAtFullFlexionF.Text.Equals("") && (!lblStep2LLAtFullFlexionM2.Text.Equals("")) && (!lblStep2LLAtFullFlexionF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep2LLAtFullFlexionF.Text) - Convert.ToInt16(lblStep2LLAtFullFlexionM2.Text)) >= Convert.ToInt16(7))
                    lblStep2LLAtFullFlexionM2.ForeColor = Color.Red;
                else
                    lblStep2LLAtFullFlexionM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAtFullFlexionM2.Text = "";
                lblStep2LLAtFullFlexionF.Text = "";
            }

            if (!lblStep3LLAtFullFlexionF.Text.Equals("") && (!lblStep3LLAtFullFlexionM2.Text.Equals("")) && (!lblStep3LLAtFullFlexionF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep3LLAtFullFlexionF.Text) - Convert.ToInt16(lblStep3LLAtFullFlexionM2.Text)) >= Convert.ToInt16(7))
                    lblStep3LLAtFullFlexionM2.ForeColor = Color.Red;
                else
                    lblStep3LLAtFullFlexionM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3LLAtFullFlexionM2.Text = "";
                lblStep3LLAtFullFlexionF.Text = "";
            }

            //LowerLegAnkleCrossAngle

            if (!lblStep2LLAtAngleCrossF.Text.Equals("") && (!lblStep2LLAtAngleCrossM2.Text.Equals("")) && (!lblStep2LLAtAngleCrossF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep2LLAtAngleCrossF.Text) - Convert.ToInt16(lblStep2LLAtAngleCrossM2.Text)) >= Convert.ToInt16(7))
                    lblStep2LLAtAngleCrossM2.ForeColor = Color.Red;
                else
                    lblStep2LLAtAngleCrossM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAtAngleCrossM2.Text = "";
                lblStep2LLAtAngleCrossF.Text = "";
            }

            if (!lblStep3LLAtAngleCrossF.Text.Equals("") && (!lblStep3LLAtAngleCrossM2.Text.Equals("")) && (!lblStep3LLAtAngleCrossF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep3LLAtAngleCrossF.Text) - Convert.ToInt16(lblStep3LLAtAngleCrossM2.Text)) >= Convert.ToInt16(7))
                    lblStep3LLAtAngleCrossM2.ForeColor = Color.Red;
                else
                    lblStep3LLAtAngleCrossM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3LLAtAngleCrossM2.Text = "";
                lblStep3LLAtAngleCrossF.Text = "";
            }

            //UpperLegFullFlexionAngle

            if (!lblStep1ULFullFlexionF.Text.Equals("") && (!lblStep1ULFullFlexionM2.Text.Equals("")) && (!lblStep1ULFullFlexionF.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep1ULFullFlexionF.Text) - Convert.ToInt16(lblStep1ULFullFlexionM2.Text) <= Convert.ToInt16(-7))
                    lblStep1ULFullFlexionM2.ForeColor = Color.Red;
                else
                    lblStep1ULFullFlexionM2.ForeColor = Color.Black;
            }
            else
            {

                lblStep1ULFullFlexionM2.Text = "";
                lblStep1ULFullFlexionF.Text = "";
            }

            if (!lblStep2ULAtFullFlexionF.Text.Equals("") && (!lblStep2ULAtFullFlexionM2.Text.Equals("")) && (!lblStep2ULAtFullFlexionF.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep2ULAtFullFlexionF.Text) - Convert.ToInt16(lblStep2ULAtFullFlexionM2.Text) <= Convert.ToInt16(-7))
                    lblStep2ULAtFullFlexionM2.ForeColor = Color.Red;
                else
                    lblStep2ULAtFullFlexionM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2ULAtFullFlexionM2.Text = "";
                lblStep2ULAtFullFlexionF.Text = "";
            }

            if (!lblStep3ULAtFullFlexionF.Text.Equals("") && (!lblStep3ULAtFullFlexionM2.Text.Equals("")) && (!lblStep3ULAtFullFlexionF.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep3ULAtFullFlexionF.Text) - Convert.ToInt16(lblStep3ULAtFullFlexionM2.Text) <= Convert.ToInt16(-7))
                    lblStep3ULAtFullFlexionM2.ForeColor = Color.Red;
                else
                    lblStep3ULAtFullFlexionM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3ULAtFullFlexionM2.Text = "";
                lblStep3ULAtFullFlexionF.Text = "";
            }

            //LowerLegAngleAtTouchDownIntoHurdle

            if (!lblIntoHurdleLLTouchdownF.Text.Equals("") && (!lblIntoHurdleLLTouchdownM2.Text.Equals("")) && (!lblIntoHurdleLLTouchdownF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblIntoHurdleLLTouchdownF.Text) - Convert.ToInt16(lblIntoHurdleLLTouchdownM2.Text)) >= Convert.ToInt16(7))
                    lblIntoHurdleLLTouchdownM2.ForeColor = Color.Red;
                else
                    lblIntoHurdleLLTouchdownM2.ForeColor = Color.Black;
            }
            else
            {
                lblIntoHurdleLLTouchdownM2.Text = "";
                lblIntoHurdleLLTouchdownF.Text = "";
            }

            #endregion[Final model Values]

        }
        else if (rpath.Contains("Current"))
        {
            if (ds.Tables[2].Rows.Count > 0)
            { //Current Data

                lblHurdleStepBetweenF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetDistanceBetweenHurdleSteps"].ToString());
                lblHurdleStepIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetDistanceIntoHurdleSteps"].ToString());
                lblHurdleStepOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetDistanceOffHurdleSteps"].ToString());


                lblHurdleStepVelocityF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Velocity"].ToString());
                lblStep1HSGroundTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1GroundTime"].ToString());
                lblStep1HSAirTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1AirTime"].ToString());
                //lblStep1UlFlexTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1UlFlexTime"].ToString());


                lblStep1HSStrideRateF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1 Stride Rate"].ToString());
                lblStep1HSStrideLengthF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1StrideLength"].ToString());
                lblStep1TouchdownDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1TouchdownDistance"].ToString());

                lblStep1KSTouchdownF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1KneeSeperationatTouchdown"].ToString());
                lblStep1TrunkTouchdownAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1TrunkTouchdownAngle"].ToString());
                lblStep1TrunkTakeoffAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1TrunkTakeoffAngle"].ToString());


                lblStep1ULAtFullExtensionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1ULAtFullExtension"].ToString());
                lblStep1LLAtTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1LLAtTakeoff"].ToString());
                lblStep1ULFullFlexionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1ULAtFullFlexion"].ToString());



                lblStep2HSGroundTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2GroundTime"].ToString());
                lblStep2HSAirTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2AirTime"].ToString());
                //lblStep2UlFlexTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2UlFlexTime"].ToString());


                lblStep2HSStrideRateF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep2HSStrideLengthF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2StrideLength"].ToString());
                lblStep2TouchdownDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2TouchdownDistance"].ToString());

                lblStep2KSAtTouchdownF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2KneeSeperationatTouchdown"].ToString());
                lblStep2TrunkTouchdownAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2TrunkTouchdownAngle"].ToString());
                lblStep2TrunkTakeoffAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2TrunkTakeoffAngle"].ToString());



                lblStep2ULAtFullExtensionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2ULAtFullExtension"].ToString());
                lblStep2LLAtTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2LLAtTakeoff"].ToString());


                lblStep2LLAtFullFlexionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2LLAtFullFlexion"].ToString());
                lblStep2LLAtAngleCrossF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2LLAtatAnkleCross"].ToString());
                lblStep2ULAtFullFlexionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2ULAtFullFlexion"].ToString());

                lblStep3HSGroundTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3GroundTime"].ToString());
                lblStep3HSAirTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3AirTime"].ToString());
                //lblStep3UlFlexTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3UlFlexTime"].ToString());

                lblStep3StrideRateF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3 Stride Rate"].ToString());
                lblStep3StrideLengthF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3StrideLength"].ToString());
                lblStep3TouchdownDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3TouchdownDistance"].ToString());


                lblStep3KSAtTouchdownF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3KneeSeperationatTouchdown"].ToString());
                lblStep3TrunkTouchdownAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3TrunkTouchdownAngle"].ToString());
                lblStep3TrunkTakeoffAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3TrunkTakeoffAngle"].ToString());

                lblStep3ULAtFullExtensionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3ULAtFullExtension"].ToString());
                lblStep3LLAtTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3LLAtTakeoff"].ToString());

                lblStep3LLAtFullFlexionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3LLAtFullFlexion"].ToString());
                lblStep3LLAtAngleCrossF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3LLAtatAnkleCross"].ToString());
                lblStep3ULAtFullFlexionF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3ULAtFullFlexion"].ToString());


                lblIntoHurdleTouchdownDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetTouchdownDistanceIntoTheHurdle"].ToString());
                lblIntoHurdleKSTouchdownF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetKneeSeperationatTouchdownIntoTheHurdle"].ToString());
                lblIntoHurdleTrunkTouchdownAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetTrunkTouchdownAngleIntoTheHurdle"].ToString());


                lblIntoHurdleLLTouchdownF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetLLAtTouchdownIntoTheHurdle"].ToString());
            }
            //model 2 data 
            if (ds.Tables[3].Rows.Count > 0)
            {  //model 2 Data
                lblHurdleStepBetweenM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetDistanceBetweenHurdleSteps"].ToString());
                lblHurdleStepIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetDistanceIntoHurdleSteps"].ToString());
                lblHurdleStepOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetDistanceOffHurdleSteps"].ToString());


                lblHurdleStepVelocityM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Velocity"].ToString());
                lblStep1HSGroundTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1GroundTime"].ToString());
                lblStep1HSAirTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1AirTime"].ToString());
                //lblStep1UlFlexTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1UlFlexTime"].ToString());


                lblStep1HSStrideRateM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1 Stride Rate"].ToString());
                lblStep1HSStrideLengthM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1StrideLength"].ToString());
                lblStep1TouchdownDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1TouchdownDistance"].ToString());

                lblStep1KSTouchdownM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1KneeSeperationatTouchdown"].ToString());
                lblStep1TrunkTouchdownAngleF.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1TrunkTouchdownAngle"].ToString());
                lblStep1TrunkTakeoffAngleF.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1TrunkTakeoffAngle"].ToString());

                lblStep1ULFullExtensionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1ULAtFullExtension"].ToString());
                lblStep1LLAtTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1LLAtTakeoff"].ToString());
                lblStep1ULFullFlexionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1ULAtFullFlexion"].ToString());



                lblStep2HSGroundTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2GroundTime"].ToString());
                lblStep2HSAirTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2AirTime"].ToString());
                //lblStep2UlFlexTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2UlFlexTime"].ToString());


                lblStep2HSStrideRateM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep2HSStrideLengthM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2StrideLength"].ToString());
                lblStep2TouchdownDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2TouchdownDistance"].ToString());

                lblStep2KSAtTouchdownM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2KneeSeperationatTouchdown"].ToString());
                lblStep2TrunkTouchdownAngleF.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2TrunkTouchdownAngle"].ToString());
                lblStep2TrunkTakeoffAngleF.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2TrunkTakeoffAngle"].ToString());



                lblStep2ULAtFullExtensionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2ULAtFullExtension"].ToString());
                lblStep2LLAtTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2LLAtTakeoff"].ToString());


                lblStep2LLAtFullFlexionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2LLAtFullFlexion"].ToString());
                lblStep2LLAtAngleCrossM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2LLAtatAnkleCross"].ToString());
                lblStep2ULAtFullFlexionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2ULAtFullFlexion"].ToString());

                lblStep3HSGroundTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3GroundTime"].ToString());
                lblStep3HSAirTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3AirTime"].ToString());
                //lblStep3UlFlexTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3UlFlexTime"].ToString());

                lblStep3StrideRateM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3 Stride Rate"].ToString());
                lblStep3StrideLengthM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3StrideLength"].ToString());
                lblStep3TouchdownDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3TouchdownDistance"].ToString());


                lblStep3KSAtTouchdownM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3KneeSeperationatTouchdown"].ToString());
                lblStep3TrunkTouchdownAngleF.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3TrunkTouchdownAngle"].ToString());
                lblStep3TrunkTakeoffAngleF.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3TrunkTakeoffAngle"].ToString());

                lblStep3ULAtFullExtensionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3ULAtFullExtension"].ToString());
                lblStep3LLAtTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3LLAtTakeoff"].ToString());

                lblStep3LLAtFullFlexionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3LLAtFullFlexion"].ToString());
                lblStep3LLAtAngleCrossM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3LLAtatAnkleCross"].ToString());
                lblStep3ULAtFullFlexionM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3ULAtFullFlexion"].ToString());


                lblIntoHurdleTouchdownDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetTouchdownDistanceIntoTheHurdle"].ToString());
                lblIntoHurdleKSTouchdownM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetKneeSeperationatTouchdownIntoTheHurdle"].ToString());
                lblIntoHurdleTrunkTouchdownAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetTrunkTouchdownAngleIntoTheHurdle"].ToString());

                lblIntoHurdleLLTouchdownM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetLLAtTouchdownIntoTheHurdle"].ToString());
            }

            //Depends on Calculation
            //Current values
            #region[Final Model Values]

            //StrideLengthIntoHurdle (For Into as mentioned in the Chart)

            if (!lblHurdleStepIntoF.Text.Equals("") && (!lblHurdleStepIntoM2.Text.Equals("")) && (!lblHurdleStepIntoF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblHurdleStepIntoF.Text) - Convert.ToSingle(lblHurdleStepIntoM2.Text)) >= Convert.ToSingle(.06))
                    lblHurdleStepIntoM2.ForeColor = Color.Red;
                else
                    lblHurdleStepIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblHurdleStepIntoM2.Text = "";
                lblHurdleStepIntoF.Text = "";
            }

            //StrideLengthOffHurdle

            if (!lblHurdleStepOffF.Text.Equals("") && (!lblHurdleStepOffM2.Text.Equals("")) && (!lblHurdleStepOffF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblHurdleStepOffF.Text) - Convert.ToSingle(lblHurdleStepOffM2.Text)) >= Convert.ToSingle(.06))
                    lblHurdleStepOffM2.ForeColor = Color.Red;
                else
                    lblHurdleStepOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblHurdleStepOffM2.Text = "";
                lblHurdleStepOffF.Text = "";
            }

            //Velocity     

            if (!lblHurdleStepVelocityF.Text.Equals("") && (!lblHurdleStepVelocityM2.Text.Equals("")) && (!lblHurdleStepVelocityF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblHurdleStepVelocityF.Text) - Convert.ToSingle(lblHurdleStepVelocityM2.Text) <= Convert.ToSingle(-0.50))
                    lblHurdleStepVelocityM2.ForeColor = Color.Red;
                else
                    lblHurdleStepVelocityM2.ForeColor = Color.Black;
            }
            else
            {
                lblHurdleStepVelocityM2.Text = "";
                lblHurdleStepVelocityF.Text = "";
            }

            //Ground Time

            if (!lblStep1HSGroundTimeF.Text.Equals("") && (!lblStep1HSGroundTimeM2.Text.Equals("")) && (!lblStep1HSGroundTimeF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1HSGroundTimeF.Text) - Convert.ToSingle(lblStep1HSGroundTimeM2.Text) >= Convert.ToSingle(.007))
                    lblStep1HSGroundTimeM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep1HSGroundTimeM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep1HSGroundTimeM2.Text = "";
                lblStep1HSGroundTimeF.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblStep2HSGroundTimeF.Text.Equals("") && (!lblStep2HSGroundTimeM2.Text.Equals("")) && (!lblStep2HSGroundTimeF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2HSGroundTimeF.Text) - Convert.ToSingle(lblStep2HSGroundTimeM2.Text) >= Convert.ToSingle(.007))
                    lblStep2HSGroundTimeM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep2HSGroundTimeM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep2HSGroundTimeM2.Text = "";
                lblStep2HSGroundTimeF.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblStep3HSGroundTimeF.Text.Equals("") && (!lblStep3HSGroundTimeM2.Text.Equals("")) && (!lblStep3HSGroundTimeF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3HSGroundTimeF.Text) - Convert.ToSingle(lblStep3HSGroundTimeM2.Text) >= Convert.ToSingle(.007))
                    lblStep3HSGroundTimeM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep3HSGroundTimeM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep3HSGroundTimeM2.Text = "";
                lblStep3HSGroundTimeF.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            //Air time 

            if (!lblStep1HSAirTimeF.Text.Equals("") && (!lblStep1HSAirTimeM2.Text.Equals("")) && (!lblStep1HSAirTimeF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1HSAirTimeF.Text) - Convert.ToSingle(lblStep1HSAirTimeM2.Text) >= Convert.ToSingle(.007))
                    lblStep1HSAirTimeM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep1HSAirTimeM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep1HSAirTimeM2.Text = "";
                lblStep1HSAirTimeF.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblStep2HSAirTimeF.Text.Equals("") && (!lblStep2HSAirTimeM2.Text.Equals("")) && (!lblStep2HSAirTimeF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2HSAirTimeF.Text) - Convert.ToSingle(lblStep2HSAirTimeM2.Text) >= Convert.ToSingle(.007))
                    lblStep2HSAirTimeM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep2HSAirTimeM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep2HSAirTimeM2.Text = "";
                lblStep2HSAirTimeF.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            if (!lblStep3HSAirTimeF.Text.Equals("") && (!lblStep3HSAirTimeM2.Text.Equals("")) && (!lblStep3HSAirTimeF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3HSAirTimeF.Text) - Convert.ToSingle(lblStep3HSAirTimeM2.Text) >= Convert.ToSingle(.007))
                    lblStep3HSAirTimeM2.ForeColor = System.Drawing.Color.Red;
                else
                    lblStep3HSAirTimeM2.ForeColor = System.Drawing.Color.Black;
            }
            else
            {
                lblStep3HSAirTimeM2.Text = "";
                lblStep3HSAirTimeF.Text = "";
                //ForeColor = ColorTranslator.FromHtml("#FFFF80");
            }

            // TimeToUpperLegFullFlexion(for  UlFlexTime  ) 

            //if (!lblStep1UlFlexTimeF.Text.Equals("") && (!lblStep1UlFlexTimeM2.Text.Equals("")) && (!lblStep1UlFlexTimeF.Text.Equals("0.00")))
            //{
            //    if (Convert.ToSingle(lblStep1UlFlexTimeF.Text) - Convert.ToSingle(lblStep1UlFlexTimeM2.Text) <= Convert.ToSingle(-0.01))
            //        lblStep1UlFlexTimeM2.ForeColor = Color.Red;
            //    else
            //        lblStep1UlFlexTimeM2.ForeColor = Color.Black;
            //}
            //else
            //{
            //    lblStep1UlFlexTimeM2.Text = "";
            //    lblStep1UlFlexTimeF.Text = "";
            //}

            //if (!lblStep2UlFlexTimeF.Text.Equals("") && (!lblStep2UlFlexTimeM2.Text.Equals("")) && (!lblStep2UlFlexTimeF.Text.Equals("0.00")))
            //{
            //    if (Convert.ToSingle(lblStep2UlFlexTimeF.Text) - Convert.ToSingle(lblStep2UlFlexTimeM2.Text) <= Convert.ToSingle(-0.01))
            //        lblStep2UlFlexTimeM2.ForeColor = Color.Red;
            //    else
            //        lblStep2UlFlexTimeM2.ForeColor = Color.Black;
            //}
            //else
            //{
            //    lblStep2UlFlexTimeM2.Text = "";
            //    lblStep2UlFlexTimeF.Text = "";
            //}

            //if (!lblStep3UlFlexTimeF.Text.Equals("") && (!lblStep3UlFlexTimeM2.Text.Equals("")) && (!lblStep3UlFlexTimeF.Text.Equals("0.00")))
            //{
            //    if (Convert.ToSingle(lblStep3UlFlexTimeF.Text) - Convert.ToSingle(lblStep3UlFlexTimeM2.Text) <= Convert.ToSingle(-0.01))
            //        lblStep3UlFlexTimeM2.ForeColor = Color.Red;
            //    else
            //        lblStep3UlFlexTimeM2.ForeColor = Color.Black;
            //}
            //else
            //{
            //    lblStep3UlFlexTimeM2.Text = "";
            //    lblStep3UlFlexTimeF.Text = "";
            //}

            //Stride rate

            if (!lblStep1HSStrideRateF.Text.Equals("") && (!lblStep1HSStrideRateM2.Text.Equals("")) && (!lblStep1HSStrideRateF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1HSStrideRateF.Text) - Convert.ToSingle(lblStep1HSStrideRateM2.Text)) >= Convert.ToSingle(0.1))
                    lblStep1HSStrideRateM2.ForeColor = Color.Red;
                else
                    lblStep1HSStrideRateM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1HSStrideRateM2.Text = "";
                lblStep1HSStrideRateF.Text = "";
            }

            if (!lblStep2HSStrideRateF.Text.Equals("") && (!lblStep2HSStrideRateM2.Text.Equals("")) && (!lblStep2HSStrideRateF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep2HSStrideRateF.Text) - Convert.ToSingle(lblStep2HSStrideRateM2.Text)) >= Convert.ToSingle(0.1))
                    lblStep2HSStrideRateM2.ForeColor = Color.Red;
                else
                    lblStep2HSStrideRateM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2HSStrideRateM2.Text = "";
                lblStep2HSStrideRateF.Text = "";
            }

            if (!lblStep3StrideRateF.Text.Equals("") && (!lblStep3StrideRateM2.Text.Equals("")) && (!lblStep3StrideRateF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep3StrideRateF.Text) - Convert.ToSingle(lblStep3StrideRateM2.Text)) >= Convert.ToSingle(0.1))
                    lblStep3StrideRateM2.ForeColor = Color.Red;
                else
                    lblStep3StrideRateM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3StrideRateM2.Text = "";
                lblStep3StrideRateF.Text = "";
            }

            //Stride Length

            if (!lblStep1StrideLengthF.Text.Equals("") && (!lblStep3StrideLengthM2.Text.Equals("")) && (!lblStep1StrideLengthF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1StrideLengthF.Text) - Convert.ToSingle(lblStep1StrideLengthM2.Text)) >= Convert.ToSingle(0.1))
                    lblStep3StrideLengthM2.ForeColor = Color.Red;
                else
                    lblStep3StrideLengthM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1StrideLengthM2.Text = "";
                lblStep1StrideLengthF.Text = "";
            }

            if (!lblStep2StrideLengthF.Text.Equals("") && (!lblStep2StrideLengthM2.Text.Equals("")) && (!lblStep2StrideLengthF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep2StrideLengthF.Text) - Convert.ToSingle(lblStep2StrideLengthM2.Text)) >= Convert.ToSingle(0.1))
                    lblStep2StrideLengthM2.ForeColor = Color.Red;
                else
                    lblStep2StrideLengthM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2StrideLengthM2.Text = "";
                lblStep2StrideLengthF.Text = "";
            }

            if (!lblStep3StrideLengthF.Text.Equals("") && (!lblStep3StrideLengthM2.Text.Equals("")) && (!lblStep3StrideLengthF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep3StrideLengthF.Text) - Convert.ToSingle(lblStep3StrideLengthM2.Text)) >= Convert.ToSingle(0.1))
                    lblStep3StrideLengthM2.ForeColor = Color.Red;
                else
                    lblStep3StrideLengthM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3StrideLengthM2.Text = "";
                lblStep3StrideLengthF.Text = "";
            }

            //TouchDownDistance

            if (!lblStep1TouchdownDistanceF.Text.Equals("") && (!lblStep1TouchdownDistanceM2.Text.Equals("")) && (!lblStep1TouchdownDistanceF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1TouchdownDistanceF.Text) - Convert.ToSingle(lblStep1TouchdownDistanceM2.Text) >= Convert.ToSingle(.02))
                    lblStep1TouchdownDistanceM2.ForeColor = Color.Red;
                else
                    lblStep1TouchdownDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1TouchdownDistanceM2.Text = "";
                lblStep1TouchdownDistanceF.Text = "";
            }

            if (!lblStep2TouchdownDistanceF.Text.Equals("") && (!lblStep2TouchdownDistanceM2.Text.Equals("")) && (!lblStep2TouchdownDistanceF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2TouchdownDistanceF.Text) - Convert.ToSingle(lblStep2TouchdownDistanceM2.Text) >= Convert.ToSingle(.02))
                    lblStep2TouchdownDistanceM2.ForeColor = Color.Red;
                else
                    lblStep2TouchdownDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2TouchdownDistanceM2.Text = "";
                lblStep2TouchdownDistanceF.Text = "";
            }

            if (!lblStep3TouchdownDistanceF.Text.Equals("") && (!lblStep3TouchdownDistanceM2.Text.Equals("")) && (!lblStep3TouchdownDistanceF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3TouchdownDistanceF.Text) - Convert.ToSingle(lblStep3TouchdownDistanceM2.Text) >= Convert.ToSingle(.02))
                    lblStep3TouchdownDistanceM2.ForeColor = Color.Red;
                else
                    lblStep3TouchdownDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3TouchdownDistanceM2.Text = "";
                lblStep3TouchdownDistanceF.Text = "";
            }

            if (!lblIntoHurdleTouchdownDistanceF.Text.Equals("") && (!lblIntoHurdleTouchdownDistanceM2.Text.Equals("")) && (!lblIntoHurdleTouchdownDistanceF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblIntoHurdleTouchdownDistanceF.Text) - Convert.ToSingle(lblIntoHurdleTouchdownDistanceM2.Text) >= Convert.ToSingle(.02))
                    lblIntoHurdleTouchdownDistanceM2.ForeColor = Color.Red;
                else
                    lblIntoHurdleTouchdownDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblIntoHurdleTouchdownDistanceM2.Text = "";
                lblIntoHurdleTouchdownDistanceF.Text = "";
            }
            //TouchDownKneeSeperation

            if (!lblStep1KSTouchdownF.Text.Equals("") && (!lblStep1KSTouchdownM2.Text.Equals("")) && (!lblStep1KSTouchdownF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1KSTouchdownF.Text) - Convert.ToSingle(lblStep1KSTouchdownM2.Text) >= Convert.ToSingle(.02))
                    lblStep1KSTouchdownM2.ForeColor = Color.Red;
                else
                    lblStep1KSTouchdownM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1KSTouchdownM2.Text = "";
                lblStep1KSTouchdownF.Text = "";
            }

            if (!lblStep2KSAtTouchdownF.Text.Equals("") && (!lblStep2KSAtTouchdownM2.Text.Equals("")) && (!lblStep2KSAtTouchdownF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2KSAtTouchdownF.Text) - Convert.ToSingle(lblStep2KSAtTouchdownM2.Text) >= Convert.ToSingle(.02))
                    lblStep2KSAtTouchdownM2.ForeColor = Color.Red;
                else
                    lblStep2KSAtTouchdownM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2KSAtTouchdownM2.Text = "";
                lblStep2KSAtTouchdownF.Text = "";
            }

            if (!lblStep3KSAtTouchdownF.Text.Equals("") && (!lblStep3KSAtTouchdownM2.Text.Equals("")) && (!lblStep3KSAtTouchdownF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3KSAtTouchdownF.Text) - Convert.ToSingle(lblStep3KSAtTouchdownM2.Text) >= Convert.ToSingle(.02))
                    lblStep3KSAtTouchdownM2.ForeColor = Color.Red;
                else
                    lblStep3KSAtTouchdownM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3KSAtTouchdownM2.Text = "";
                lblStep3KSAtTouchdownF.Text = "";
            }

            if (!lblIntoHurdleKSTouchdownF.Text.Equals("") && (!lblIntoHurdleKSTouchdownM2.Text.Equals("")) && (!lblIntoHurdleKSTouchdownF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblIntoHurdleKSTouchdownF.Text) - Convert.ToSingle(lblIntoHurdleKSTouchdownM2.Text) >= Convert.ToSingle(.02))
                    lblIntoHurdleKSTouchdownM2.ForeColor = Color.Red;
                else
                    lblIntoHurdleKSTouchdownM2.ForeColor = Color.Black;
            }
            else
            {
                lblIntoHurdleKSTouchdownM2.Text = "";
                lblIntoHurdleKSTouchdownF.Text = "";
            }

            //UpperLegFullExtension

            if (!lblStep1ULAtFullExtensionF.Text.Equals("") && (!lblStep2ULAtFullExtensionM2.Text.Equals("")) && (!lblStep1ULAtFullExtensionF.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep1ULAtFullExtensionF.Text) - Convert.ToInt16(lblStep2ULAtFullExtensionM2.Text) <= Convert.ToInt16(-7))
                    lblStep2ULAtFullExtensionM2.ForeColor = Color.Red;
                else
                    lblStep2ULAtFullExtensionM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2ULAtFullExtensionM2.Text = "";
                lblStep1ULAtFullExtensionF.Text = "";
            }

            if (!lblStep2ULAtFullExtensionF.Text.Equals("") && (!lblStep2ULAtFullExtensionM2.Text.Equals("")) && (!lblStep2ULAtFullExtensionF.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep2ULAtFullExtensionF.Text) - Convert.ToInt16(lblStep2ULAtFullExtensionM2.Text) <= Convert.ToInt16(-7))
                    lblStep2ULAtFullExtensionM2.ForeColor = Color.Red;
                else
                    lblStep2ULAtFullExtensionM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2ULAtFullExtensionM2.Text = "";
                lblStep2ULAtFullExtensionF.Text = "";
            }

            if (!lblStep3ULAtFullExtensionF.Text.Equals("") && (!lblStep3ULAtFullExtensionM2.Text.Equals("")) && (!lblStep3ULAtFullExtensionF.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep3ULAtFullExtensionF.Text) - Convert.ToInt16(lblStep3ULAtFullExtensionM2.Text) <= Convert.ToInt16(-7))
                    lblStep3ULAtFullExtensionM2.ForeColor = Color.Red;
                else
                    lblStep3ULAtFullExtensionM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3ULAtFullExtensionM2.Text = "";
                lblStep3ULAtFullExtensionF.Text = "";
            }

            //LowerLegAngleAtTakeOf   


            if (!lblStep1LLAtTakeoffF.Text.Equals("") && (!lblStep1LLAtTakeoffM2.Text.Equals("")) && (!lblStep1LLAtTakeoffF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep1LLAtTakeoffF.Text) - Convert.ToSingle(lblStep1LLAtTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblStep1LLAtTakeoffM2.ForeColor = Color.Red;
                else
                    lblStep1LLAtTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1LLAtTakeoffM2.Text = "";
                lblStep1LLAtTakeoffF.Text = "";
            }

            if (!lblStep2LLAtTakeoffF.Text.Equals("") && (!lblStep2LLAtTakeoffM2.Text.Equals("")) && (!lblStep2LLAtTakeoffF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep2LLAtTakeoffF.Text) - Convert.ToSingle(lblStep2LLAtTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblStep2LLAtTakeoffM2.ForeColor = Color.Red;
                else
                    lblStep2LLAtTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAtTakeoffM2.Text = "";
                lblStep2LLAtTakeoffF.Text = "";
            }

            if (!lblStep3LLAtTakeoffF.Text.Equals("") && (!lblStep3LLAtTakeoffM2.Text.Equals("")) && (!lblStep3LLAtTakeoffF.Text.Equals("0.00")))
            {
                if (Convert.ToSingle(lblStep3LLAtTakeoffF.Text) - Convert.ToSingle(lblStep3LLAtTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblStep3LLAtTakeoffM2.ForeColor = Color.Red;
                else
                    lblStep3LLAtTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3LLAtTakeoffM2.Text = "";
                lblStep3LLAtTakeoffF.Text = "";
            }

            //LowerLegFullFlexionAngle 

            if (!lblStep2LLAtFullFlexionF.Text.Equals("") && (!lblStep2LLAtFullFlexionM2.Text.Equals("")) && (!lblStep2LLAtFullFlexionF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep2LLAtFullFlexionF.Text) - Convert.ToInt16(lblStep2LLAtFullFlexionM2.Text)) >= Convert.ToInt16(7))
                    lblStep2LLAtFullFlexionM2.ForeColor = Color.Red;
                else
                    lblStep2LLAtFullFlexionM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAtFullFlexionM2.Text = "";
                lblStep2LLAtFullFlexionF.Text = "";
            }

            if (!lblStep3LLAtFullFlexionF.Text.Equals("") && (!lblStep3LLAtFullFlexionM2.Text.Equals("")) && (!lblStep3LLAtFullFlexionF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep3LLAtFullFlexionF.Text) - Convert.ToInt16(lblStep3LLAtFullFlexionM2.Text)) >= Convert.ToInt16(7))
                    lblStep3LLAtFullFlexionM2.ForeColor = Color.Red;
                else
                    lblStep3LLAtFullFlexionM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3LLAtFullFlexionM2.Text = "";
                lblStep3LLAtFullFlexionF.Text = "";
            }

            //LowerLegAnkleCrossAngle

            if (!lblStep2LLAtAngleCrossF.Text.Equals("") && (!lblStep2LLAtAngleCrossM2.Text.Equals("")) && (!lblStep2LLAtAngleCrossF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep2LLAtAngleCrossF.Text) - Convert.ToInt16(lblStep2LLAtAngleCrossM2.Text)) >= Convert.ToInt16(7))
                    lblStep2LLAtAngleCrossM2.ForeColor = Color.Red;
                else
                    lblStep2LLAtAngleCrossM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAtAngleCrossM2.Text = "";
                lblStep2LLAtAngleCrossF.Text = "";
            }

            if (!lblStep3LLAtAngleCrossF.Text.Equals("") && (!lblStep3LLAtAngleCrossM2.Text.Equals("")) && (!lblStep3LLAtAngleCrossF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblStep3LLAtAngleCrossF.Text) - Convert.ToInt16(lblStep3LLAtAngleCrossM2.Text)) >= Convert.ToInt16(7))
                    lblStep3LLAtAngleCrossM2.ForeColor = Color.Red;
                else
                    lblStep3LLAtAngleCrossM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3LLAtAngleCrossM2.Text = "";
                lblStep3LLAtAngleCrossF.Text = "";
            }

            //UpperLegFullFlexionAngle

            if (!lblStep1ULFullFlexionF.Text.Equals("") && (!lblStep1ULFullFlexionM2.Text.Equals("")) && (!lblStep1ULFullFlexionF.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep1ULFullFlexionF.Text) - Convert.ToInt16(lblStep1ULFullFlexionM2.Text) <= Convert.ToInt16(-7))
                    lblStep1ULFullFlexionM2.ForeColor = Color.Red;
                else
                    lblStep1ULFullFlexionM2.ForeColor = Color.Black;
            }
            else
            {

                lblStep1ULFullFlexionM2.Text = "";
                lblStep1ULFullFlexionF.Text = "";
            }

            if (!lblStep2ULAtFullFlexionF.Text.Equals("") && (!lblStep2ULAtFullFlexionM2.Text.Equals("")) && (!lblStep2ULAtFullFlexionF.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep2ULAtFullFlexionF.Text) - Convert.ToInt16(lblStep2ULAtFullFlexionM2.Text) <= Convert.ToInt16(-7))
                    lblStep2ULAtFullFlexionM2.ForeColor = Color.Red;
                else
                    lblStep2ULAtFullFlexionM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2ULAtFullFlexionM2.Text = "";
                lblStep2ULAtFullFlexionF.Text = "";
            }

            if (!lblStep3ULAtFullFlexionF.Text.Equals("") && (!lblStep3ULAtFullFlexionM2.Text.Equals("")) && (!lblStep3ULAtFullFlexionF.Text.Equals("0.00")))
            {
                if (Convert.ToInt16(lblStep3ULAtFullFlexionF.Text) - Convert.ToInt16(lblStep3ULAtFullFlexionM2.Text) <= Convert.ToInt16(-7))
                    lblStep3ULAtFullFlexionM2.ForeColor = Color.Red;
                else
                    lblStep3ULAtFullFlexionM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3ULAtFullFlexionM2.Text = "";
                lblStep3ULAtFullFlexionF.Text = "";
            }

            //LowerLegAngleAtTouchDownIntoHurdle

            if (!lblIntoHurdleLLTouchdownF.Text.Equals("") && (!lblIntoHurdleLLTouchdownM2.Text.Equals("")) && (!lblIntoHurdleLLTouchdownF.Text.Equals("0.00")))
            {
                if (Math.Abs(Convert.ToInt16(lblIntoHurdleLLTouchdownF.Text) - Convert.ToInt16(lblIntoHurdleLLTouchdownM2.Text)) >= Convert.ToInt16(7))
                    lblIntoHurdleLLTouchdownM2.ForeColor = Color.Red;
                else
                    lblIntoHurdleLLTouchdownM2.ForeColor = Color.Black;
            }
            else
            {
                lblIntoHurdleLLTouchdownM2.Text = "";
                lblIntoHurdleLLTouchdownF.Text = "";
            }

            #endregion[Final model Values]
        }

        //   WriteObjectsToPageAjax();
    }

    public void GetStartLeftMovieVariablesforNonTires(int LessonId, string lpath)
    {
        ds = sae.GetAllStartAthletesData(LessonId);
        if (DropDownList1.SelectedValue != "")
        {
            try
            {
                int movieid = Convert.ToInt32(DropDownList1.SelectedItem.Value);
                leftMovie = DataRepository.MovieProvider.GetByMovieId(movieid);
                string location = sae.SelectLessonlocation(LessonId.ToString());
                string date = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
                string LeftSession = date + "-" + location;
                lblStartLeftMovie.Text = LeftSession;
            }
            catch { }
        }
        if (lpath.Contains("Initial"))
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                lblSetFrontBlockDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetFrontBlockDistance"].ToString());
                lblSetRearBlockDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetRearBlockDistance"].ToString());
                lblSetFrontULAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetFrontULAngle"].ToString());
                lblSetRearULAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetRearULAngle"].ToString());
                lblSetFrontLLAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetFrontLLAngle"].ToString());
                lblSetRearLLAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetRearLLAngle"].ToString());
                lblSetTrunkAngleI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetTrunkAngle"].ToString());
                lblSetCOGDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetCOGDistance"].ToString());

                lblBCRearFootClearanceTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCRearFootClearanceTime"].ToString());
                lblBCFrontFootClearanceTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCFrontFootClearanceTime"].ToString());
                lblBCRearLLAngleTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCRearLLAngleTakeoff"].ToString());
                lblBCFrontLLAngleTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCFrontLLAngleTakeoff"].ToString());
                lblBCTrunkAngleTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCTrunkAngleTakeoff"].ToString());
                lblBCLLAngleACI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCLLAngleAC"].ToString());
                lblBCAirTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCAirTime"].ToString());
                lblBCStrideRateI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BC StrideRate"].ToString());
                lblBCStrideLengthI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BC Stride Length"].ToString());
                lblBCVelocityI.Text = Convert.ToString(ds.Tables[0].Rows[0]["BC Velocity"].ToString());

                lblStep1COGDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1COGDistance"].ToString());
                lblStep1LLAngleTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1LLAngleTakeoff"].ToString());
                lblStep1TrunkAngleTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1TrunkAngleTakeoff"].ToString());
                lblStep1LLAngleACI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1LLAngleAC"].ToString());
                lblStep1GroundTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1GroundTime"].ToString());
                lblStep1AirTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1AirTime"].ToString());
                lblStep1StrideRateI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1 Stride Rate"].ToString());
                lblStep1StrideLengthI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1StrideLength"].ToString());
                lblStep1VelocityI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1 Velocity"].ToString());

                lblStep2COGDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2COGDistance"].ToString());
                lblStep2LLAngleTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2LLAngleTakeoff"].ToString());
                lblStep2TrunkAngleTakeoffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2TrunkAngleTakeoff"].ToString());
                lblStep2LLAngleACI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2LLAngleAC"].ToString());
                lblStep2GroundTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2GroundTime"].ToString());
                lblStep2AirTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2AirTime"].ToString());
                lblStep2StrideRateI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep2StrideLengthI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2StrideLength"].ToString());
                lblStep2VelocityI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2 Velocity"].ToString());

                lblStep3COGDistanceI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3COGDistance"].ToString());
                lblTimeTo3mI.Text = Convert.ToString(ds.Tables[0].Rows[0]["TimeTo3m"].ToString());
                lblTimeTo5mI.Text = Convert.ToString(ds.Tables[0].Rows[0]["TimeTo5m"].ToString());
            }
            //model data
            if (ds.Tables[1].Rows.Count > 0)
            {
                lblSetFrontBlockDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetFrontBlockDistance"].ToString());
                lblSetRearBlockDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetRearBlockDistance"].ToString());
                lblSetFrontULAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetFrontULAngle"].ToString());
                lblSetRearULAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetRearULAngle"].ToString());
                lblSetFrontLLAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetFrontLLAngle"].ToString());
                lblSetRearLLAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetRearLLAngle"].ToString());
                lblSetTrunkAngleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetTrunkAngle"].ToString());
                lblSetCOGDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetCOGDistance"].ToString());

                lblBCRearFootClearanceTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCRearFootClearanceTime"].ToString());
                lblBCFrontFootClearanceTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCFrontFootClearanceTime"].ToString());
                lblBCRearLLAngleTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCRearLLAngleTakeoff"].ToString());
                lblBCFrontLLAngleTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCFrontLLAngleTakeoff"].ToString());
                lblBCTrunkAngleTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCTrunkAngleTakeoff"].ToString());
                lblBCLLAngleACM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCLLAngleAC"].ToString());
                lblBCAirTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCAirTime"].ToString());
                lblBCStrideRateM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BC StrideRate"].ToString());
                lblBCStrideLengthM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCStrideLength"].ToString());
                lblBCVelocityM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["BC Velocity"].ToString());

                lblStep1COGDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1COGDistance"].ToString());
                lblStep1LLAngleTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1LLAngleTakeoff"].ToString());
                lblStep1TrunkAngleTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1TrunkAngleTakeoff"].ToString());
                lblStep1LLAngleACM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1LLAngleAC"].ToString());
                lblStep1GroundTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1GroundTime"].ToString());
                lblStep1AirTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1AirTime"].ToString());
                lblStep1StrideRateM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep1StrideLengthM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1StrideLength"].ToString());
                lblStep1VelocityM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1 Velocity"].ToString());

                lblStep2COGDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2COGDistance"].ToString());
                lblStep2LLAngleTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2LLAngleTakeoff"].ToString());
                lblStep2TrunkAngleTakeoffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2TrunkAngleTakeoff"].ToString());
                lblStep2LLAngleACM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2LLAngleAC"].ToString());
                lblStep2GroundTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2GroundTime"].ToString());
                lblStep2AirTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2AirTime"].ToString());
                lblStep2StrideRateM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep2StrideLengthM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2StrideLength"].ToString());
                lblStep2VelocityM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2 Velocity"].ToString());

                lblStep3COGDistanceM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3COGDistance"].ToString());
                lblTimeTo3mM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["TimeTo3m"].ToString());
                lblTimeTo5mM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["TimeTo5m"].ToString());
            }

            #region[Initial Values for left]
            if (!lblSetFrontBlockDistanceI.Text.Equals("") && (!lblSetFrontBlockDistanceM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetFrontBlockDistanceI.Text) - Convert.ToSingle(lblSetFrontBlockDistanceM1.Text)) >= Convert.ToSingle(.04))
                    lblSetFrontBlockDistanceM1.ForeColor = Color.Red;
                else
                    lblSetFrontBlockDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblSetFrontBlockDistanceM1.ForeColor = Color.Black;
            }

            if (!lblSetRearBlockDistanceI.Text.Equals("") && (!lblSetRearBlockDistanceM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetRearBlockDistanceI.Text) - Convert.ToSingle(lblSetRearBlockDistanceM1.Text)) >= Convert.ToSingle(.04))
                    lblSetRearBlockDistanceM1.ForeColor = Color.Red;
                else
                    lblSetRearBlockDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearBlockDistanceM1.ForeColor = Color.Black;
            }

            if (!lblSetFrontULAngleI.Text.Equals("") && (!lblSetFrontULAngleM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetFrontULAngleI.Text) - Convert.ToSingle(lblSetFrontULAngleM1.Text)) >= Convert.ToInt16(7))
                    lblSetFrontULAngleM1.ForeColor = Color.Red;
                else
                    lblSetFrontULAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblSetFrontULAngleM1.ForeColor = Color.Black;
            }

            if (!lblSetRearULAngleI.Text.Equals("") && (!lblSetRearULAngleM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetRearULAngleI.Text) - Convert.ToSingle(lblSetRearULAngleM1.Text)) >= Convert.ToInt16(7))
                    lblSetRearULAngleM1.ForeColor = Color.Red;
                else
                    lblSetRearULAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearULAngleM1.ForeColor = Color.Black;
            }

            if (!lblSetFrontLLAngleI.Text.Equals("") && (!lblSetFrontLLAngleM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetFrontLLAngleI.Text) - Convert.ToSingle(lblSetFrontLLAngleM1.Text)) >= Convert.ToInt16(7))
                    lblSetFrontLLAngleM1.ForeColor = Color.Red;
                else
                    lblSetFrontLLAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearULAngleM1.ForeColor = Color.Black;
            }

            if (!lblSetRearLLAngleI.Text.Equals("") && (!lblSetRearLLAngleM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetRearLLAngleI.Text) - Convert.ToSingle(lblSetRearLLAngleM1.Text)) >= Convert.ToInt16(7))
                    lblSetRearLLAngleM1.ForeColor = Color.Red;
                else
                    lblSetRearLLAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearLLAngleM1.ForeColor = Color.Black;
            }

            if (!lblSetTrunkAngleI.Text.Equals("") && (!lblSetTrunkAngleM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetTrunkAngleI.Text) - Convert.ToSingle(lblSetTrunkAngleM1.Text)) >= Convert.ToInt16(7))
                    lblSetTrunkAngleM1.ForeColor = Color.Red;
                else
                    lblSetTrunkAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblSetTrunkAngleM1.ForeColor = Color.Black;
            }

            if (!lblStep1COGDistanceI.Text.Equals("") && (!lblStep1COGDistanceM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1COGDistanceI.Text) - Convert.ToSingle(lblStep1COGDistanceM1.Text)) >= Convert.ToSingle(.05))
                    lblStep1COGDistanceM1.ForeColor = Color.Red;
                else
                    lblStep1COGDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1COGDistanceM1.ForeColor = Color.Black;
            }

            if (!lblBCRearFootClearanceTimeI.Text.Equals("") && (!lblBCRearFootClearanceTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCRearFootClearanceTimeI.Text) - Convert.ToSingle(lblBCRearFootClearanceTimeM1.Text) >= Convert.ToSingle(.02))
                    lblBCRearFootClearanceTimeM1.ForeColor = Color.Red;
                else
                    lblBCRearFootClearanceTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCRearFootClearanceTimeM1.ForeColor = Color.Black;
            }

            if (!lblBCFrontFootClearanceTimeI.Text.Equals("") && (!lblBCFrontFootClearanceTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCFrontFootClearanceTimeI.Text) - Convert.ToSingle(lblBCFrontFootClearanceTimeM1.Text) >= Convert.ToSingle(.04))
                    lblBCFrontFootClearanceTimeM1.ForeColor = Color.Red;
                else
                    lblBCFrontFootClearanceTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCFrontFootClearanceTimeM1.ForeColor = Color.Black;
            }

            if (!lblBCRearLLAngleTakeoffI.Text.Equals("") && (!lblBCRearLLAngleTakeoffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCRearLLAngleTakeoffI.Text) - Convert.ToInt16(lblBCRearLLAngleTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblBCRearLLAngleTakeoffM1.ForeColor = Color.Red;
                else
                    lblBCRearLLAngleTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCRearLLAngleTakeoffM1.ForeColor = Color.Black;
            }

            if (!lblBCFrontLLAngleTakeoffI.Text.Equals("") && (!lblBCFrontLLAngleTakeoffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCFrontLLAngleTakeoffI.Text) - Convert.ToInt16(lblBCFrontLLAngleTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblBCFrontLLAngleTakeoffM1.ForeColor = Color.Red;
                else
                    lblBCFrontLLAngleTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCFrontLLAngleTakeoffM1.ForeColor = Color.Black;
            }

            if (!lblBCTrunkAngleTakeoffI.Text.Equals("") && (!lblBCTrunkAngleTakeoffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCTrunkAngleTakeoffI.Text) - Convert.ToInt16(lblBCTrunkAngleTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblBCTrunkAngleTakeoffM1.ForeColor = Color.Red;
                else
                    lblBCTrunkAngleTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCTrunkAngleTakeoffM1.ForeColor = Color.Black;
            }

            if (!lblBCLLAngleACI.Text.Equals("") && (!lblBCLLAngleACM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCLLAngleACI.Text) - Convert.ToInt16(lblBCLLAngleACM1.Text) <= Convert.ToInt16(-7))
                    lblBCLLAngleACM1.ForeColor = Color.Red;
                else
                    lblBCLLAngleACM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCLLAngleACM1.ForeColor = Color.Black;
            }

            if (!lblBCAirTimeI.Text.Equals("") && (!lblBCAirTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCAirTimeI.Text) - Convert.ToSingle(lblBCAirTimeM1.Text) >= Convert.ToSingle(.02))
                    lblBCAirTimeM1.ForeColor = Color.Red;
                else
                    lblBCAirTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCAirTimeM1.ForeColor = Color.Black;
            }
            if (!lblBCStrideRateI.Text.Equals("") && (!lblBCStrideRateM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCStrideRateI.Text) - Convert.ToSingle(lblBCStrideRateM1.Text) <= Convert.ToSingle(-0.2))
                    lblBCStrideRateM1.ForeColor = Color.Red;
                else
                    lblBCStrideRateM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCStrideRateM1.ForeColor = Color.Black;
            }

            if (!lblBCStrideLengthI.Text.Equals("") && (!lblBCStrideLengthM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCStrideLengthI.Text) - Convert.ToSingle(lblBCStrideLengthM1.Text) >= Convert.ToSingle(.05))
                    lblBCStrideLengthM1.ForeColor = Color.Red;
                else
                    lblBCStrideLengthM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCStrideLengthM1.ForeColor = Color.Black;
            }

            if (!lblBCVelocityI.Text.Equals("") && (!lblBCVelocityM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCVelocityI.Text) - Convert.ToSingle(lblBCVelocityM1.Text) <= Convert.ToSingle(-0.5))
                    lblBCVelocityM1.ForeColor = Color.Red;
                else
                    lblBCVelocityM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCVelocityM1.ForeColor = Color.Black;
            }

            if (!lblStep1COGDistanceI.Text.Equals("") && (!lblStep1COGDistanceM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1COGDistanceI.Text) - Convert.ToSingle(lblStep1COGDistanceM1.Text)) >= Convert.ToSingle(.05))
                    lblStep1COGDistanceM1.ForeColor = Color.Red;
                else
                    lblStep1COGDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1COGDistanceM1.ForeColor = Color.Black;
            }
            if (!lblStep1LLAngleTakeoffI.Text.Equals("") && (!lblStep1LLAngleTakeoffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep1LLAngleTakeoffI.Text) - Convert.ToInt16(lblStep1LLAngleTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblStep1LLAngleTakeoffM1.ForeColor = Color.Red;
                else
                    lblStep1LLAngleTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1LLAngleTakeoffM1.ForeColor = Color.Black;
            }

            if (!lblStep1TrunkAngleTakeoffI.Text.Equals("") && (!lblStep1TrunkAngleTakeoffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep1TrunkAngleTakeoffI.Text) - Convert.ToInt16(lblStep1TrunkAngleTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblStep1TrunkAngleTakeoffM1.ForeColor = Color.Red;
                else
                    lblStep1TrunkAngleTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1TrunkAngleTakeoffM1.ForeColor = Color.Black;
            }


            if (!lblStep1LLAngleACI.Text.Equals("") && (!lblStep1LLAngleACM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep1LLAngleACI.Text) - Convert.ToInt16(lblStep1LLAngleACM1.Text) <= Convert.ToInt16(-7))
                    lblStep1LLAngleACM1.ForeColor = Color.Red;
                else
                    lblStep1LLAngleACM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1LLAngleACM1.ForeColor = Color.Black;
            }


            if (!lblStep1GroundTimeI.Text.Equals("") && (!lblStep1GroundTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1GroundTimeI.Text) - Convert.ToSingle(lblStep1GroundTimeM1.Text) >= Convert.ToSingle(.02))
                    lblStep1GroundTimeM1.ForeColor = Color.Red;
                else
                    lblStep1GroundTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1GroundTimeM1.ForeColor = Color.Black;
            }

            if (!lblStep1AirTimeI.Text.Equals("") && (!lblStep1AirTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1AirTimeI.Text) - Convert.ToSingle(lblStep1AirTimeM1.Text) >= Convert.ToSingle(.02))
                    lblStep1AirTimeM1.ForeColor = Color.Red;
                else
                    lblStep1AirTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1AirTimeM1.ForeColor = Color.Black;
            }

            if (!lblStep1StrideRateI.Text.Equals("") && (!lblStep1StrideRateM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1StrideRateI.Text) - Convert.ToSingle(lblStep1StrideRateM1.Text) <= Convert.ToSingle(-0.2))
                    lblStep1StrideRateM1.ForeColor = Color.Red;
                else
                    lblStep1StrideRateM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1StrideRateM1.ForeColor = Color.Black;
            }

            if (!lblStep1StrideLengthI.Text.Equals("") && (!lblStep1StrideLengthM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1StrideLengthI.Text) - Convert.ToSingle(lblStep1StrideLengthM1.Text) >= Convert.ToSingle(.05))
                    lblStep1StrideLengthM1.ForeColor = Color.Red;
                else
                    lblStep1StrideLengthM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1StrideLengthM1.ForeColor = Color.Black;
            }
            if (!lblStep1VelocityI.Text.Equals("") && (!lblStep1VelocityM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1VelocityI.Text) - Convert.ToSingle(lblStep1VelocityM1.Text) <= Convert.ToSingle(-0.5))
                    lblStep1VelocityM1.ForeColor = Color.Red;
                else
                    lblStep1VelocityM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1VelocityM1.ForeColor = Color.Black;
            }

            if (!lblStep2COGDistanceI.Text.Equals("") && (!lblStep2COGDistanceM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep2COGDistanceI.Text) - Convert.ToSingle(lblStep2COGDistanceM1.Text)) >= Convert.ToSingle(.05))
                    lblStep2COGDistanceM1.ForeColor = Color.Red;
                else
                    lblStep2COGDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2COGDistanceM1.ForeColor = Color.Black;
            }

            if (!lblStep2LLAngleTakeoffI.Text.Equals("") && (!lblStep2LLAngleTakeoffM1.Text.Equals("")))
            {
                if (Convert.ToInt32(lblStep2LLAngleTakeoffI.Text) - Convert.ToInt32(lblStep2LLAngleTakeoffM1.Text) >= Convert.ToInt32(7))
                    lblStep2LLAngleTakeoffM1.ForeColor = Color.Red;
                else
                    lblStep2LLAngleTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAngleTakeoffM1.ForeColor = Color.Black;
            }

            if (!lblStep2TrunkAngleTakeoffI.Text.Equals("") && (!lblStep2TrunkAngleTakeoffM1.Text.Equals("")))
            {
                if (Convert.ToInt32(lblStep2TrunkAngleTakeoffI.Text) - Convert.ToInt32(lblStep2TrunkAngleTakeoffM1.Text) >= Convert.ToInt32(7))
                    lblStep2TrunkAngleTakeoffM1.ForeColor = Color.Red;
                else
                    lblStep2TrunkAngleTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2TrunkAngleTakeoffM1.ForeColor = Color.Black;
            }
            if (!lblStep2LLAngleACI.Text.Equals("") && (!lblStep2LLAngleACM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep2LLAngleACI.Text) - Convert.ToInt16(lblStep2LLAngleACM1.Text) <= Convert.ToInt16(-7))
                    lblStep2LLAngleACM1.ForeColor = Color.Red;
                else
                    lblStep2LLAngleACM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAngleACM1.ForeColor = Color.Black;
            }

            if (!lblStep2GroundTimeI.Text.Equals("") && (!lblStep2GroundTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2GroundTimeI.Text) - Convert.ToSingle(lblStep2GroundTimeM1.Text) >= Convert.ToSingle(.02))
                    lblStep2GroundTimeM1.ForeColor = Color.Red;
                else
                    lblStep2GroundTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2GroundTimeM1.ForeColor = Color.Black;
            }
            if (!lblStep2AirTimeI.Text.Equals("") && (!lblStep2AirTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2AirTimeI.Text) - Convert.ToSingle(lblStep2AirTimeM1.Text) >= Convert.ToSingle(.02))
                    lblStep2AirTimeM1.ForeColor = Color.Red;
                else
                    lblStep2AirTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2AirTimeM1.ForeColor = Color.Black;
            }

            if (!lblStep2StrideRateI.Text.Equals("") && (!lblStep2StrideRateM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2StrideRateI.Text) - Convert.ToSingle(lblStep2StrideRateM1.Text) <= Convert.ToSingle(-0.2))
                    lblStep2StrideRateM1.ForeColor = Color.Red;
                else
                    lblStep2StrideRateM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2StrideRateM1.ForeColor = Color.Black;
            }
            if (!lblStep2StrideLengthI.Text.Equals("") && (!lblStep2StrideLengthM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2StrideLengthI.Text) - Convert.ToSingle(lblStep2StrideLengthM1.Text) >= Convert.ToSingle(.05))
                    lblStep2StrideLengthM1.ForeColor = Color.Red;
                else
                    lblStep2StrideLengthM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2StrideLengthM1.ForeColor = Color.Black;
            }
            if (!lblStep2VelocityI.Text.Equals("") && (!lblStep2VelocityM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2VelocityI.Text) - Convert.ToSingle(lblStep2VelocityM1.Text) <= Convert.ToSingle(-0.5))
                    lblStep2VelocityM1.ForeColor = Color.Red;
                else
                    lblStep2VelocityM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2VelocityM1.ForeColor = Color.Black;
            }
            if (!lblStep3COGDistanceI.Text.Equals("") && (!lblStep3COGDistanceM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep3COGDistanceI.Text) - Convert.ToSingle(lblStep3COGDistanceM1.Text)) >= Convert.ToSingle(.05))
                    lblStep3COGDistanceM1.ForeColor = Color.Red;
                else
                    lblStep3COGDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3COGDistanceM1.ForeColor = Color.Black;
            }
            if (!lblTimeTo3mI.Text.Equals("") && (!lblTimeTo3mM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTimeTo3mI.Text) - Convert.ToSingle(lblTimeTo3mM1.Text) >= Convert.ToSingle(0.05))
                    lblTimeTo3mM1.ForeColor = Color.Red;
                else
                    lblTimeTo3mM1.ForeColor = Color.Black;
            }
            else
            {
                lblTimeTo3mM1.ForeColor = Color.Black;
            }
            if (!lblTimeTo5mI.Text.Equals("") && (!lblTimeTo5mM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTimeTo5mI.Text) - Convert.ToSingle(lblTimeTo5mM1.Text) >= Convert.ToSingle(0.05))
                    lblTimeTo5mM1.ForeColor = Color.Red;
                else
                    lblTimeTo5mM1.ForeColor = Color.Black;
            }
            else
            {
                lblTimeTo5mM1.ForeColor = Color.Black;
            }

            #endregion[Initial Values for left]


        }
        else if (lpath.Contains("Current"))
        {
            if (ds.Tables[2].Rows.Count > 0)
            {
                lblSetFrontBlockDistanceI.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetFrontBlockDistance"].ToString());
                lblSetRearBlockDistanceI.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetRearBlockDistance"].ToString());
                lblSetFrontULAngleI.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetFrontULAngle"].ToString());
                lblSetRearULAngleI.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetRearULAngle"].ToString());
                lblSetFrontLLAngleI.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetFrontLLAngle"].ToString());
                lblSetRearLLAngleI.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetRearLLAngle"].ToString());
                lblSetTrunkAngleI.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetTrunkAngle"].ToString());
                lblSetCOGDistanceI.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetCOGDistance"].ToString());

                lblBCRearFootClearanceTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCRearFootClearanceTime"].ToString());
                lblBCFrontFootClearanceTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCFrontFootClearanceTime"].ToString());
                lblBCRearLLAngleTakeoffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCRearLLAngleTakeoff"].ToString());
                lblBCFrontLLAngleTakeoffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCFrontLLAngleTakeoff"].ToString());
                lblBCTrunkAngleTakeoffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCTrunkAngleTakeoff"].ToString());
                lblBCLLAngleACI.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCLLAngleAC"].ToString());
                lblBCAirTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCAirTime"].ToString());
                lblBCStrideRateI.Text = Convert.ToString(ds.Tables[2].Rows[0]["BC StrideRate"].ToString());
                lblBCStrideLengthI.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCStrideLength"].ToString());
                lblBCVelocityI.Text = Convert.ToString(ds.Tables[2].Rows[0]["BC Velocity"].ToString());

                lblStep1COGDistanceI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1COGDistance"].ToString());
                lblStep1LLAngleTakeoffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1LLAngleTakeoff"].ToString());
                lblStep1TrunkAngleTakeoffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1TrunkAngleTakeoff"].ToString());
                lblStep1LLAngleACI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1LLAngleAC"].ToString());
                lblStep1GroundTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1GroundTime"].ToString());
                lblStep1AirTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1AirTime"].ToString());
                lblStep1StrideRateI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep1StrideLengthI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1StrideLength"].ToString());
                lblStep1VelocityI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1 Velocity"].ToString());

                lblStep2COGDistanceI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2COGDistance"].ToString());
                lblStep2LLAngleTakeoffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2LLAngleTakeoff"].ToString());
                lblStep2TrunkAngleTakeoffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2TrunkAngleTakeoff"].ToString());
                lblStep2LLAngleACI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2LLAngleAC"].ToString());
                lblStep2GroundTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2GroundTime"].ToString());
                lblStep2AirTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2AirTime"].ToString());
                lblStep2StrideRateI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep2StrideLengthI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2StrideLength"].ToString());
                lblStep2VelocityI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2 Velocity"].ToString());

                lblStep3COGDistanceI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3COGDistance"].ToString());
                lblTimeTo3mI.Text = Convert.ToString(ds.Tables[2].Rows[0]["TimeTo3m"].ToString());
                lblTimeTo5mI.Text = Convert.ToString(ds.Tables[2].Rows[0]["TimeTo5m"].ToString());
            }
            //model data
            if (ds.Tables[3].Rows.Count > 0)
            {
                lblSetFrontBlockDistanceM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetFrontBlockDistance"].ToString());
                lblSetRearBlockDistanceM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetRearBlockDistance"].ToString());
                lblSetFrontULAngleM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetFrontULAngle"].ToString());
                lblSetRearULAngleM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetRearULAngle"].ToString());
                lblSetFrontLLAngleM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetFrontLLAngle"].ToString());
                lblSetRearLLAngleM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetRearLLAngle"].ToString());
                lblSetTrunkAngleM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetTrunkAngle"].ToString());
                lblSetCOGDistanceM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetCOGDistance"].ToString());

                lblBCRearFootClearanceTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCRearFootClearanceTime"].ToString());
                lblBCFrontFootClearanceTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCFrontFootClearanceTime"].ToString());
                lblBCRearLLAngleTakeoffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCRearLLAngleTakeoff"].ToString());
                lblBCFrontLLAngleTakeoffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCFrontLLAngleTakeoff"].ToString());
                lblBCTrunkAngleTakeoffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCTrunkAngleTakeoff"].ToString());
                lblBCLLAngleACM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCLLAngleAC"].ToString());
                lblBCAirTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCAirTime"].ToString());
                lblBCStrideRateM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["BC StrideRate"].ToString());
                lblBCStrideLengthM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCStrideLength"].ToString());
                lblBCVelocityM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["BC Velocity"].ToString());

                lblStep1COGDistanceM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1COGDistance"].ToString());
                lblStep1LLAngleTakeoffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1LLAngleTakeoff"].ToString());
                lblStep1TrunkAngleTakeoffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1TrunkAngleTakeoff"].ToString());
                lblStep1LLAngleACM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1LLAngleAC"].ToString());
                lblStep1GroundTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1GroundTime"].ToString());
                lblStep1AirTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1AirTime"].ToString());
                lblStep1StrideRateM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep1StrideLengthM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1StrideLength"].ToString());
                lblStep1VelocityM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1 Velocity"].ToString());

                lblStep2COGDistanceM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2COGDistance"].ToString());
                lblStep2LLAngleTakeoffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2LLAngleTakeoff"].ToString());
                lblStep2TrunkAngleTakeoffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2TrunkAngleTakeoff"].ToString());
                lblStep2LLAngleACM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2LLAngleAC"].ToString());
                lblStep2GroundTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2GroundTime"].ToString());
                lblStep2AirTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2AirTime"].ToString());
                lblStep2StrideRateM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep2StrideLengthM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2StrideLength"].ToString());
                lblStep2VelocityM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2 Velocity"].ToString());

                lblStep3COGDistanceM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3COGDistance"].ToString());
                lblTimeTo3mM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["TimeTo3m"].ToString());
                lblTimeTo5mM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["TimeTo5m"].ToString());
            }
            #region[Current values for left]
            if (!lblSetFrontBlockDistanceI.Text.Equals("") && (!lblSetFrontBlockDistanceM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetFrontBlockDistanceI.Text) - Convert.ToSingle(lblSetFrontBlockDistanceM1.Text)) >= Convert.ToSingle(.04))
                    lblSetFrontBlockDistanceM1.ForeColor = Color.Red;
                else
                    lblSetFrontBlockDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblSetFrontBlockDistanceM1.ForeColor = Color.Black;
            }

            if (!lblSetRearBlockDistanceI.Text.Equals("") && (!lblSetRearBlockDistanceM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetRearBlockDistanceI.Text) - Convert.ToSingle(lblSetRearBlockDistanceM1.Text)) >= Convert.ToSingle(.04))
                    lblSetRearBlockDistanceM1.ForeColor = Color.Red;
                else
                    lblSetRearBlockDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearBlockDistanceM1.ForeColor = Color.Black;
            }

            if (!lblSetFrontULAngleI.Text.Equals("") && (!lblSetFrontULAngleM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetFrontULAngleI.Text) - Convert.ToSingle(lblSetFrontULAngleM1.Text)) >= Convert.ToInt16(7))
                    lblSetFrontULAngleM1.ForeColor = Color.Red;
                else
                    lblSetFrontULAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblSetFrontULAngleM1.ForeColor = Color.Black;
            }

            if (!lblSetRearULAngleI.Text.Equals("") && (!lblSetRearULAngleM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetRearULAngleI.Text) - Convert.ToSingle(lblSetRearULAngleM1.Text)) >= Convert.ToInt16(7))
                    lblSetRearULAngleM1.ForeColor = Color.Red;
                else
                    lblSetRearULAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearULAngleM1.ForeColor = Color.Black;
            }

            if (!lblSetFrontLLAngleI.Text.Equals("") && (!lblSetFrontLLAngleM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetFrontLLAngleI.Text) - Convert.ToSingle(lblSetFrontLLAngleM1.Text)) >= Convert.ToInt16(7))
                    lblSetFrontLLAngleM1.ForeColor = Color.Red;
                else
                    lblSetFrontLLAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearULAngleM1.ForeColor = Color.Black;
            }

            if (!lblSetRearLLAngleI.Text.Equals("") && (!lblSetRearLLAngleM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetRearLLAngleI.Text) - Convert.ToSingle(lblSetRearLLAngleM1.Text)) >= Convert.ToInt16(7))
                    lblSetRearLLAngleM1.ForeColor = Color.Red;
                else
                    lblSetRearLLAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearLLAngleM1.ForeColor = Color.Black;
            }

            if (!lblSetTrunkAngleI.Text.Equals("") && (!lblSetTrunkAngleM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetTrunkAngleI.Text) - Convert.ToSingle(lblSetTrunkAngleM1.Text)) >= Convert.ToInt16(7))
                    lblSetTrunkAngleM1.ForeColor = Color.Red;
                else
                    lblSetTrunkAngleM1.ForeColor = Color.Black;
            }
            else
            {
                lblSetTrunkAngleM1.ForeColor = Color.Black;
            }

            if (!lblStep1COGDistanceI.Text.Equals("") && (!lblStep1COGDistanceM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1COGDistanceI.Text) - Convert.ToSingle(lblStep1COGDistanceM1.Text)) >= Convert.ToSingle(.05))
                    lblStep1COGDistanceM1.ForeColor = Color.Red;
                else
                    lblStep1COGDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1COGDistanceM1.ForeColor = Color.Black;
            }

            if (!lblBCRearFootClearanceTimeI.Text.Equals("") && (!lblBCRearFootClearanceTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCRearFootClearanceTimeI.Text) - Convert.ToSingle(lblBCRearFootClearanceTimeM1.Text) >= Convert.ToSingle(.02))
                    lblBCRearFootClearanceTimeM1.ForeColor = Color.Red;
                else
                    lblBCRearFootClearanceTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCRearFootClearanceTimeM1.ForeColor = Color.Black;
            }

            if (!lblBCFrontFootClearanceTimeI.Text.Equals("") && (!lblBCFrontFootClearanceTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCFrontFootClearanceTimeI.Text) - Convert.ToSingle(lblBCFrontFootClearanceTimeM1.Text) >= Convert.ToSingle(.04))
                    lblBCFrontFootClearanceTimeM1.ForeColor = Color.Red;
                else
                    lblBCFrontFootClearanceTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCFrontFootClearanceTimeM1.ForeColor = Color.Black;
            }

            if (!lblBCRearLLAngleTakeoffI.Text.Equals("") && (!lblBCRearLLAngleTakeoffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCRearLLAngleTakeoffI.Text) - Convert.ToInt16(lblBCRearLLAngleTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblBCRearLLAngleTakeoffM1.ForeColor = Color.Red;
                else
                    lblBCRearLLAngleTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCRearLLAngleTakeoffM1.ForeColor = Color.Black;
            }

            if (!lblBCFrontLLAngleTakeoffI.Text.Equals("") && (!lblBCFrontLLAngleTakeoffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCFrontLLAngleTakeoffI.Text) - Convert.ToInt16(lblBCFrontLLAngleTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblBCFrontLLAngleTakeoffM1.ForeColor = Color.Red;
                else
                    lblBCFrontLLAngleTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCFrontLLAngleTakeoffM1.ForeColor = Color.Black;
            }

            if (!lblBCTrunkAngleTakeoffI.Text.Equals("") && (!lblBCTrunkAngleTakeoffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCTrunkAngleTakeoffI.Text) - Convert.ToInt16(lblBCTrunkAngleTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblBCTrunkAngleTakeoffM1.ForeColor = Color.Red;
                else
                    lblBCTrunkAngleTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCTrunkAngleTakeoffM1.ForeColor = Color.Black;
            }

            if (!lblBCLLAngleACI.Text.Equals("") && (!lblBCLLAngleACM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCLLAngleACI.Text) - Convert.ToInt16(lblBCLLAngleACM1.Text) <= Convert.ToInt16(-7))
                    lblBCLLAngleACM1.ForeColor = Color.Red;
                else
                    lblBCLLAngleACM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCLLAngleACM1.ForeColor = Color.Black;
            }

            if (!lblBCAirTimeI.Text.Equals("") && (!lblBCAirTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCAirTimeI.Text) - Convert.ToSingle(lblBCAirTimeM1.Text) >= Convert.ToSingle(.02))
                    lblBCAirTimeM1.ForeColor = Color.Red;
                else
                    lblBCAirTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCAirTimeM1.ForeColor = Color.Black;
            }
            if (!lblBCStrideRateI.Text.Equals("") && (!lblBCStrideRateM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCStrideRateI.Text) - Convert.ToSingle(lblBCStrideRateM1.Text) <= Convert.ToSingle(-0.2))
                    lblBCStrideRateM1.ForeColor = Color.Red;
                else
                    lblBCStrideRateM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCStrideRateM1.ForeColor = Color.Black;
            }

            if (!lblBCStrideLengthI.Text.Equals("") && (!lblBCStrideLengthM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCStrideLengthI.Text) - Convert.ToSingle(lblBCStrideLengthM1.Text) >= Convert.ToSingle(.05))
                    lblBCStrideLengthM1.ForeColor = Color.Red;
                else
                    lblBCStrideLengthM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCStrideLengthM1.ForeColor = Color.Black;
            }

            if (!lblBCVelocityI.Text.Equals("") && (!lblBCVelocityM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCVelocityI.Text) - Convert.ToSingle(lblBCVelocityM1.Text) <= Convert.ToSingle(-0.5))
                    lblBCVelocityM1.ForeColor = Color.Red;
                else
                    lblBCVelocityM1.ForeColor = Color.Black;
            }
            else
            {
                lblBCVelocityM1.ForeColor = Color.Black;
            }

            if (!lblStep1COGDistanceI.Text.Equals("") && (!lblStep1COGDistanceM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1COGDistanceI.Text) - Convert.ToSingle(lblStep1COGDistanceM1.Text)) >= Convert.ToSingle(.05))
                    lblStep1COGDistanceM1.ForeColor = Color.Red;
                else
                    lblStep1COGDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1COGDistanceM1.ForeColor = Color.Black;
            }
            if (!lblStep1LLAngleTakeoffI.Text.Equals("") && (!lblStep1LLAngleTakeoffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep1LLAngleTakeoffI.Text) - Convert.ToInt16(lblStep1LLAngleTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblStep1LLAngleTakeoffM1.ForeColor = Color.Red;
                else
                    lblStep1LLAngleTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1LLAngleTakeoffM1.ForeColor = Color.Black;
            }

            if (!lblStep1TrunkAngleTakeoffI.Text.Equals("") && (!lblStep1TrunkAngleTakeoffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep1TrunkAngleTakeoffI.Text) - Convert.ToInt16(lblStep1TrunkAngleTakeoffM1.Text) >= Convert.ToInt16(7))
                    lblStep1TrunkAngleTakeoffM1.ForeColor = Color.Red;
                else
                    lblStep1TrunkAngleTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1TrunkAngleTakeoffM1.ForeColor = Color.Black;
            }


            if (!lblStep1LLAngleACI.Text.Equals("") && (!lblStep1LLAngleACM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep1LLAngleACI.Text) - Convert.ToInt16(lblStep1LLAngleACM1.Text) <= Convert.ToInt16(-7))
                    lblStep1LLAngleACM1.ForeColor = Color.Red;
                else
                    lblStep1LLAngleACM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1LLAngleACM1.ForeColor = Color.Black;
            }


            if (!lblStep1GroundTimeI.Text.Equals("") && (!lblStep1GroundTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1GroundTimeI.Text) - Convert.ToSingle(lblStep1GroundTimeM1.Text) >= Convert.ToSingle(.02))
                    lblStep1GroundTimeM1.ForeColor = Color.Red;
                else
                    lblStep1GroundTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1GroundTimeM1.ForeColor = Color.Black;
            }

            if (!lblStep1AirTimeI.Text.Equals("") && (!lblStep1AirTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1AirTimeI.Text) - Convert.ToSingle(lblStep1AirTimeM1.Text) >= Convert.ToSingle(.02))
                    lblStep1AirTimeM1.ForeColor = Color.Red;
                else
                    lblStep1AirTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1AirTimeM1.ForeColor = Color.Black;
            }

            if (!lblStep1StrideRateI.Text.Equals("") && (!lblStep1StrideRateM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1StrideRateI.Text) - Convert.ToSingle(lblStep1StrideRateM1.Text) <= Convert.ToSingle(-0.2))
                    lblStep1StrideRateM1.ForeColor = Color.Red;
                else
                    lblStep1StrideRateM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1StrideRateM1.ForeColor = Color.Black;
            }

            if (!lblStep1StrideLengthI.Text.Equals("") && (!lblStep1StrideLengthM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1StrideLengthI.Text) - Convert.ToSingle(lblStep1StrideLengthM1.Text) >= Convert.ToSingle(.05))
                    lblStep1StrideLengthM1.ForeColor = Color.Red;
                else
                    lblStep1StrideLengthM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1StrideLengthM1.ForeColor = Color.Black;
            }
            if (!lblStep1VelocityI.Text.Equals("") && (!lblStep1VelocityM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1VelocityI.Text) - Convert.ToSingle(lblStep1VelocityM1.Text) <= Convert.ToSingle(-0.5))
                    lblStep1VelocityM1.ForeColor = Color.Red;
                else
                    lblStep1VelocityM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep1VelocityM1.ForeColor = Color.Black;
            }

            if (!lblStep2COGDistanceI.Text.Equals("") && (!lblStep2COGDistanceM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep2COGDistanceI.Text) - Convert.ToSingle(lblStep2COGDistanceM1.Text)) >= Convert.ToSingle(.05))
                    lblStep2COGDistanceM1.ForeColor = Color.Red;
                else
                    lblStep2COGDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2COGDistanceM1.ForeColor = Color.Black;
            }

            if (!lblStep2LLAngleTakeoffI.Text.Equals("") && (!lblStep2LLAngleTakeoffM1.Text.Equals("")))
            {
                if (Convert.ToInt32(lblStep2LLAngleTakeoffI.Text) - Convert.ToInt32(lblStep2LLAngleTakeoffM1.Text) >= Convert.ToInt32(7))
                    lblStep2LLAngleTakeoffM1.ForeColor = Color.Red;
                else
                    lblStep2LLAngleTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAngleTakeoffM1.ForeColor = Color.Black;
            }

            if (!lblStep2TrunkAngleTakeoffI.Text.Equals("") && (!lblStep2TrunkAngleTakeoffM1.Text.Equals("")))
            {
                if (Convert.ToInt32(lblStep2TrunkAngleTakeoffI.Text) - Convert.ToInt32(lblStep2TrunkAngleTakeoffM1.Text) >= Convert.ToInt32(7))
                    lblStep2TrunkAngleTakeoffM1.ForeColor = Color.Red;
                else
                    lblStep2TrunkAngleTakeoffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2TrunkAngleTakeoffM1.ForeColor = Color.Black;
            }
            if (!lblStep2LLAngleACI.Text.Equals("") && (!lblStep2LLAngleACM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep2LLAngleACI.Text) - Convert.ToInt16(lblStep2LLAngleACM1.Text) <= Convert.ToInt16(-7))
                    lblStep2LLAngleACM1.ForeColor = Color.Red;
                else
                    lblStep2LLAngleACM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAngleACM1.ForeColor = Color.Black;
            }

            if (!lblStep2GroundTimeI.Text.Equals("") && (!lblStep2GroundTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2GroundTimeI.Text) - Convert.ToSingle(lblStep2GroundTimeM1.Text) >= Convert.ToSingle(.02))
                    lblStep2GroundTimeM1.ForeColor = Color.Red;
                else
                    lblStep2GroundTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2GroundTimeM1.ForeColor = Color.Black;
            }
            if (!lblStep2AirTimeI.Text.Equals("") && (!lblStep2AirTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2AirTimeI.Text) - Convert.ToSingle(lblStep2AirTimeM1.Text) >= Convert.ToSingle(.02))
                    lblStep2AirTimeM1.ForeColor = Color.Red;
                else
                    lblStep2AirTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2AirTimeM1.ForeColor = Color.Black;
            }

            if (!lblStep2StrideRateI.Text.Equals("") && (!lblStep2StrideRateM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2StrideRateI.Text) - Convert.ToSingle(lblStep2StrideRateM1.Text) <= Convert.ToSingle(-0.2))
                    lblStep2StrideRateM1.ForeColor = Color.Red;
                else
                    lblStep2StrideRateM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2StrideRateM1.ForeColor = Color.Black;
            }
            if (!lblStep2StrideLengthI.Text.Equals("") && (!lblStep2StrideLengthM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2StrideLengthI.Text) - Convert.ToSingle(lblStep2StrideLengthM1.Text) >= Convert.ToSingle(.05))
                    lblStep2StrideLengthM1.ForeColor = Color.Red;
                else
                    lblStep2StrideLengthM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2StrideLengthM1.ForeColor = Color.Black;
            }
            if (!lblStep2VelocityI.Text.Equals("") && (!lblStep2VelocityM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2VelocityI.Text) - Convert.ToSingle(lblStep2VelocityM1.Text) <= Convert.ToSingle(-0.5))
                    lblStep2VelocityM1.ForeColor = Color.Red;
                else
                    lblStep2VelocityM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep2VelocityM1.ForeColor = Color.Black;
            }
            if (!lblStep3COGDistanceI.Text.Equals("") && (!lblStep3COGDistanceM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep3COGDistanceI.Text) - Convert.ToSingle(lblStep3COGDistanceM1.Text)) >= Convert.ToSingle(.05))
                    lblStep3COGDistanceM1.ForeColor = Color.Red;
                else
                    lblStep3COGDistanceM1.ForeColor = Color.Black;
            }
            else
            {
                lblStep3COGDistanceM1.ForeColor = Color.Black;
            }
            if (!lblTimeTo3mI.Text.Equals("") && (!lblTimeTo3mM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTimeTo3mI.Text) - Convert.ToSingle(lblTimeTo3mM1.Text) >= Convert.ToSingle(0.05))
                    lblTimeTo3mM1.ForeColor = Color.Red;
                else
                    lblTimeTo3mM1.ForeColor = Color.Black;
            }
            else
            {
                lblTimeTo3mM1.ForeColor = Color.Black;
            }
            if (!lblTimeTo5mI.Text.Equals("") && (!lblTimeTo5mM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTimeTo5mI.Text) - Convert.ToSingle(lblTimeTo5mM1.Text) >= Convert.ToSingle(0.05))
                    lblTimeTo5mM1.ForeColor = Color.Red;
                else
                    lblTimeTo5mM1.ForeColor = Color.Black;
            }
            else
            {
                lblTimeTo5mM1.ForeColor = Color.Black;
            }

            #endregion[Current Values for left]
        }
        //  WriteObjectsToPageAjax();
    }

    public void GetStartRightMovieVariablesforNonTires(int LessonId, string rpath)
    {
        ds = sae.GetAllStartAthletesData(LessonId);
        if (DropDownList3.SelectedValue != "")
        {
            try
            {
                int movieidF = Convert.ToInt32(DropDownList3.SelectedItem.Value);
                leftMovie = DataRepository.MovieProvider.GetByMovieId(movieidF);
                string locationF = sae.SelectLessonlocation(LessonId.ToString());
                string dateF = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
                string RightSession = dateF + "-" + locationF;
                lblStartRightMovie.Text = RightSession;
            }
            catch { }
        }
        if (rpath.Contains("Initial"))
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                lblSetFrontBlockDistanceF.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetFrontBlockDistance"].ToString());
                lblSetRearBlockDistanceF.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetRearBlockDistance"].ToString());
                lblSetFrontULAngleF.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetFrontULAngle"].ToString());
                lblSetRearULAngleF.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetRearULAngle"].ToString());
                lblSetFrontLLAngleF.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetFrontLLAngle"].ToString());
                lblSetRearLLAngleF.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetRearLLAngle"].ToString());
                lblSetTrunkAngleF.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetTrunkAngle"].ToString());
                lblSetCOGDistanceF.Text = Convert.ToString(ds.Tables[0].Rows[0]["SetCOGDistance"].ToString());

                lblBCRearFootClearanceTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCRearFootClearanceTime"].ToString());
                lblBCFrontFootClearanceTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCFrontFootClearanceTime"].ToString());
                lblBCRearLLAngleTakeoffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCRearLLAngleTakeoff"].ToString());
                lblBCFrontLLAngleTakeoffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCFrontLLAngleTakeoff"].ToString());
                lblBCTrunkAngleTakeoffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCTrunkAngleTakeoff"].ToString());
                lblBCLLAngleACF.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCLLAngleAC"].ToString());
                lblBCAirTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["BCAirTime"].ToString());
                lblBCStrideRateF.Text = Convert.ToString(ds.Tables[0].Rows[0]["BC StrideRate"].ToString());
                lblBCStrideLengthF.Text = Convert.ToString(ds.Tables[0].Rows[0]["BC Stride Length"].ToString());
                lblBCVelocityF.Text = Convert.ToString(ds.Tables[0].Rows[0]["BC Velocity"].ToString());

                lblStep1COGDistanceF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1COGDistance"].ToString());
                lblStep1LLAngleTakeoffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1LLAngleTakeoff"].ToString());
                lblStep1TrunkAngleTakeoffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1TrunkAngleTakeoff"].ToString());
                lblStep1LLAngleACF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1LLAngleAC"].ToString());
                lblStep1GroundTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1GroundTime"].ToString());
                lblStep1AirTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1AirTime"].ToString());
                lblStep1StrideRateF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1 Stride Rate"].ToString());
                lblStep1StrideLengthF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1StrideLength"].ToString());
                lblStep1VelocityF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step1 Velocity"].ToString());

                lblStep2COGDistanceF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2COGDistance"].ToString());
                lblStep2LLAngleTakeoffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2LLAngleTakeoff"].ToString());
                lblStep2TrunkAngleTakeoffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2TrunkAngleTakeoff"].ToString());
                lblStep2LLAngleACF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2LLAngleAC"].ToString());
                lblStep2GroundTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2GroundTime"].ToString());
                lblStep2AirTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2AirTime"].ToString());
                lblStep2StrideRateF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep2StrideLengthF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2StrideLength"].ToString());
                lblStep2VelocityF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step2 Velocity"].ToString());

                lblStep3COGDistanceF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Step3COGDistance"].ToString());
                lblTimeTo3mF.Text = Convert.ToString(ds.Tables[0].Rows[0]["TimeTo3m"].ToString());
                lblTimeTo5mF.Text = Convert.ToString(ds.Tables[0].Rows[0]["TimeTo5m"].ToString());
            }
            //model 2 data
            if (ds.Tables[1].Rows.Count > 0)
            {
                lblSetFrontBlockDistanceM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetFrontBlockDistance"].ToString());
                lblSetRearBlockDistanceM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetRearBlockDistance"].ToString());
                lblSetFrontULAngleM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetFrontULAngle"].ToString());
                lblSetRearULAngleM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetRearULAngle"].ToString());
                lblSetFrontLLAngleM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetFrontLLAngle"].ToString());
                lblSetRearLLAngleM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetRearLLAngle"].ToString());
                lblSetTrunkAngleM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetTrunkAngle"].ToString());
                lblSetCOGDistanceM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["SetCOGDistance"].ToString());

                lblBCRearFootClearanceTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCRearFootClearanceTime"].ToString());
                lblBCFrontFootClearanceTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCFrontFootClearanceTime"].ToString());
                lblBCRearLLAngleTakeoffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCRearLLAngleTakeoff"].ToString());
                lblBCFrontLLAngleTakeoffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCFrontLLAngleTakeoff"].ToString());
                lblBCTrunkAngleTakeoffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCTrunkAngleTakeoff"].ToString());
                lblBCLLAngleACM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCLLAngleAC"].ToString());
                lblBCAirTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCAirTime"].ToString());
                lblBCStrideRateM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["BC StrideRate"].ToString());
                lblBCStrideLengthM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["BCStrideLength"].ToString());
                lblBCVelocityM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["BC Velocity"].ToString());

                lblStep1COGDistanceM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1COGDistance"].ToString());
                lblStep1LLAngleTakeoffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1LLAngleTakeoff"].ToString());
                lblStep1TrunkAngleTakeoffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1TrunkAngleTakeoff"].ToString());
                lblStep1LLAngleACM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1LLAngleAC"].ToString());
                lblStep1GroundTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1GroundTime"].ToString());
                lblStep1AirTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1AirTime"].ToString());
                lblStep1StrideRateM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep1StrideLengthM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1StrideLength"].ToString());
                lblStep1VelocityM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step1 Velocity"].ToString());

                lblStep2COGDistanceM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2COGDistance"].ToString());
                lblStep2LLAngleTakeoffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2LLAngleTakeoff"].ToString());
                lblStep2TrunkAngleTakeoffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2TrunkAngleTakeoff"].ToString());
                lblStep2LLAngleACM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2LLAngleAC"].ToString());
                lblStep2GroundTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2GroundTime"].ToString());
                lblStep2AirTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2AirTime"].ToString());
                lblStep2StrideRateM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep2StrideLengthM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2StrideLength"].ToString());
                lblStep2VelocityM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step2 Velocity"].ToString());

                lblStep3COGDistanceM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Step3COGDistance"].ToString());
                lblTimeTo3mM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["TimeTo3m"].ToString());
                lblTimeTo5mM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["TimeTo5m"].ToString());
            }
            #region[initial values for left]
            if (!lblSetFrontBlockDistanceF.Text.Equals("") && (!lblSetFrontBlockDistanceM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetFrontBlockDistanceF.Text) - Convert.ToSingle(lblSetFrontBlockDistanceM2.Text)) >= Convert.ToSingle(.04))
                    lblSetFrontBlockDistanceM2.ForeColor = Color.Red;
                else
                    lblSetFrontBlockDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblSetFrontBlockDistanceM2.ForeColor = Color.Black;
            }

            if (!lblSetRearBlockDistanceF.Text.Equals("") && (!lblSetRearBlockDistanceM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetRearBlockDistanceF.Text) - Convert.ToSingle(lblSetRearBlockDistanceM2.Text)) >= Convert.ToSingle(.04))
                    lblSetRearBlockDistanceM2.ForeColor = Color.Red;
                else
                    lblSetRearBlockDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearBlockDistanceM2.ForeColor = Color.Black;
            }

            if (!lblSetFrontULAngleF.Text.Equals("") && (!lblSetFrontULAngleM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetFrontULAngleF.Text) - Convert.ToSingle(lblSetFrontULAngleM2.Text)) >= Convert.ToInt16(7))
                    lblSetFrontULAngleM2.ForeColor = Color.Red;
                else
                    lblSetFrontULAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblSetFrontULAngleM2.ForeColor = Color.Black;
            }

            if (!lblSetRearULAngleF.Text.Equals("") && (!lblSetRearULAngleM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetRearULAngleF.Text) - Convert.ToSingle(lblSetRearULAngleM2.Text)) >= Convert.ToInt16(7))
                    lblSetRearULAngleM2.ForeColor = Color.Red;
                else
                    lblSetRearULAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearULAngleM2.ForeColor = Color.Black;
            }

            if (!lblSetFrontLLAngleF.Text.Equals("") && (!lblSetFrontLLAngleM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetFrontLLAngleF.Text) - Convert.ToSingle(lblSetFrontLLAngleM2.Text)) >= Convert.ToInt16(7))
                    lblSetFrontLLAngleM2.ForeColor = Color.Red;
                else
                    lblSetFrontLLAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearULAngleM2.ForeColor = Color.Black;
            }

            if (!lblSetRearLLAngleF.Text.Equals("") && (!lblSetRearLLAngleM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetRearLLAngleF.Text) - Convert.ToSingle(lblSetRearLLAngleM2.Text)) >= Convert.ToInt16(7))
                    lblSetRearLLAngleM2.ForeColor = Color.Red;
                else
                    lblSetRearLLAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearLLAngleM2.ForeColor = Color.Black;
            }

            if (!lblSetTrunkAngleF.Text.Equals("") && (!lblSetTrunkAngleM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetTrunkAngleF.Text) - Convert.ToSingle(lblSetTrunkAngleM2.Text)) >= Convert.ToInt16(7))
                    lblSetTrunkAngleM2.ForeColor = Color.Red;
                else
                    lblSetTrunkAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblSetTrunkAngleM2.ForeColor = Color.Black;
            }

            if (!lblStep1COGDistanceF.Text.Equals("") && (!lblStep1COGDistanceM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1COGDistanceF.Text) - Convert.ToSingle(lblStep1COGDistanceM2.Text)) >= Convert.ToSingle(.05))
                    lblStep1COGDistanceM2.ForeColor = Color.Red;
                else
                    lblStep1COGDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1COGDistanceM2.ForeColor = Color.Black;
            }

            if (!lblBCRearFootClearanceTimeF.Text.Equals("") && (!lblBCRearFootClearanceTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCRearFootClearanceTimeF.Text) - Convert.ToSingle(lblBCRearFootClearanceTimeM2.Text) >= Convert.ToSingle(.02))
                    lblBCRearFootClearanceTimeM2.ForeColor = Color.Red;
                else
                    lblBCRearFootClearanceTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCRearFootClearanceTimeM2.ForeColor = Color.Black;
            }

            if (!lblBCFrontFootClearanceTimeF.Text.Equals("") && (!lblBCFrontFootClearanceTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCFrontFootClearanceTimeF.Text) - Convert.ToSingle(lblBCFrontFootClearanceTimeM2.Text) >= Convert.ToSingle(.04))
                    lblBCFrontFootClearanceTimeM2.ForeColor = Color.Red;
                else
                    lblBCFrontFootClearanceTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCFrontFootClearanceTimeM2.ForeColor = Color.Black;
            }

            if (!lblBCRearLLAngleTakeoffF.Text.Equals("") && (!lblBCRearLLAngleTakeoffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCRearLLAngleTakeoffF.Text) - Convert.ToInt16(lblBCRearLLAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblBCRearLLAngleTakeoffM2.ForeColor = Color.Red;
                else
                    lblBCRearLLAngleTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCRearLLAngleTakeoffM2.ForeColor = Color.Black;
            }

            if (!lblBCFrontLLAngleTakeoffF.Text.Equals("") && (!lblBCFrontLLAngleTakeoffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCFrontLLAngleTakeoffF.Text) - Convert.ToInt16(lblBCFrontLLAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblBCFrontLLAngleTakeoffM2.ForeColor = Color.Red;
                else
                    lblBCFrontLLAngleTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCFrontLLAngleTakeoffM2.ForeColor = Color.Black;
            }

            if (!lblBCTrunkAngleTakeoffF.Text.Equals("") && (!lblBCTrunkAngleTakeoffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCTrunkAngleTakeoffF.Text) - Convert.ToInt16(lblBCTrunkAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblBCTrunkAngleTakeoffM2.ForeColor = Color.Red;
                else
                    lblBCTrunkAngleTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCTrunkAngleTakeoffM2.ForeColor = Color.Black;
            }

            if (!lblBCLLAngleACF.Text.Equals("") && (!lblBCLLAngleACM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCLLAngleACF.Text) - Convert.ToInt16(lblBCLLAngleACM2.Text) <= Convert.ToInt16(-7))
                    lblBCLLAngleACM2.ForeColor = Color.Red;
                else
                    lblBCLLAngleACM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCLLAngleACM2.ForeColor = Color.Black;
            }

            if (!lblBCAirTimeF.Text.Equals("") && (!lblBCAirTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCAirTimeF.Text) - Convert.ToSingle(lblBCAirTimeM2.Text) >= Convert.ToSingle(.02))
                    lblBCAirTimeM2.ForeColor = Color.Red;
                else
                    lblBCAirTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCAirTimeM2.ForeColor = Color.Black;
            }
            if (!lblBCStrideRateF.Text.Equals("") && (!lblBCStrideRateM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCStrideRateF.Text) - Convert.ToSingle(lblBCStrideRateM2.Text) <= Convert.ToSingle(-0.2))
                    lblBCStrideRateM2.ForeColor = Color.Red;
                else
                    lblBCStrideRateM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCStrideRateM2.ForeColor = Color.Black;
            }

            if (!lblBCStrideLengthF.Text.Equals("") && (!lblBCStrideLengthM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCStrideLengthF.Text) - Convert.ToSingle(lblBCStrideLengthM2.Text) >= Convert.ToSingle(.05))
                    lblBCStrideLengthM2.ForeColor = Color.Red;
                else
                    lblBCStrideLengthM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCStrideLengthM2.ForeColor = Color.Black;
            }

            if (!lblBCVelocityF.Text.Equals("") && (!lblBCVelocityM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCVelocityF.Text) - Convert.ToSingle(lblBCVelocityM2.Text) <= Convert.ToSingle(-0.5))
                    lblBCVelocityM2.ForeColor = Color.Red;
                else
                    lblBCVelocityM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCVelocityM2.ForeColor = Color.Black;
            }

            if (!lblStep1COGDistanceF.Text.Equals("") && (!lblStep1COGDistanceM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1COGDistanceF.Text) - Convert.ToSingle(lblStep1COGDistanceM2.Text)) >= Convert.ToSingle(.05))
                    lblStep1COGDistanceM2.ForeColor = Color.Red;
                else
                    lblStep1COGDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1COGDistanceM2.ForeColor = Color.Black;
            }
            if (!lblStep1LLAngleTakeoffF.Text.Equals("") && (!lblStep1LLAngleTakeoffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep1LLAngleTakeoffF.Text) - Convert.ToInt16(lblStep1LLAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblStep1LLAngleTakeoffM2.ForeColor = Color.Red;
                else
                    lblStep1LLAngleTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1LLAngleTakeoffM2.ForeColor = Color.Black;
            }

            if (!lblStep1TrunkAngleTakeoffF.Text.Equals("") && (!lblStep1TrunkAngleTakeoffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep1TrunkAngleTakeoffF.Text) - Convert.ToInt16(lblStep1TrunkAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblStep1TrunkAngleTakeoffM2.ForeColor = Color.Red;
                else
                    lblStep1TrunkAngleTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1TrunkAngleTakeoffM2.ForeColor = Color.Black;
            }


            if (!lblStep1LLAngleACF.Text.Equals("") && (!lblStep1LLAngleACM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep1LLAngleACF.Text) - Convert.ToInt16(lblStep1LLAngleACM2.Text) <= Convert.ToInt16(-7))
                    lblStep1LLAngleACM2.ForeColor = Color.Red;
                else
                    lblStep1LLAngleACM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1LLAngleACM2.ForeColor = Color.Black;
            }


            if (!lblStep1GroundTimeF.Text.Equals("") && (!lblStep1GroundTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1GroundTimeF.Text) - Convert.ToSingle(lblStep1GroundTimeM2.Text) >= Convert.ToSingle(.02))
                    lblStep1GroundTimeM2.ForeColor = Color.Red;
                else
                    lblStep1GroundTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1GroundTimeM2.ForeColor = Color.Black;
            }

            if (!lblStep1AirTimeF.Text.Equals("") && (!lblStep1AirTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1AirTimeF.Text) - Convert.ToSingle(lblStep1AirTimeM2.Text) >= Convert.ToSingle(.02))
                    lblStep1AirTimeM2.ForeColor = Color.Red;
                else
                    lblStep1AirTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1AirTimeM2.ForeColor = Color.Black;
            }

            if (!lblStep1StrideRateF.Text.Equals("") && (!lblStep1StrideRateM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1StrideRateF.Text) - Convert.ToSingle(lblStep1StrideRateM2.Text) <= Convert.ToSingle(-0.2))
                    lblStep1StrideRateM2.ForeColor = Color.Red;
                else
                    lblStep1StrideRateM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1StrideRateM2.ForeColor = Color.Black;
            }

            if (!lblStep1StrideLengthF.Text.Equals("") && (!lblStep1StrideLengthM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1StrideLengthF.Text) - Convert.ToSingle(lblStep1StrideLengthM2.Text) >= Convert.ToSingle(.05))
                    lblStep1StrideLengthM2.ForeColor = Color.Red;
                else
                    lblStep1StrideLengthM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1StrideLengthM2.ForeColor = Color.Black;
            }
            if (!lblStep1VelocityF.Text.Equals("") && (!lblStep1VelocityM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1VelocityF.Text) - Convert.ToSingle(lblStep1VelocityM2.Text) <= Convert.ToSingle(-0.5))
                    lblStep1VelocityM2.ForeColor = Color.Red;
                else
                    lblStep1VelocityM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1VelocityM2.ForeColor = Color.Black;
            }

            if (!lblStep2COGDistanceF.Text.Equals("") && (!lblStep2COGDistanceM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep2COGDistanceF.Text) - Convert.ToSingle(lblStep2COGDistanceM2.Text)) >= Convert.ToSingle(.05))
                    lblStep2COGDistanceM2.ForeColor = Color.Red;
                else
                    lblStep2COGDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2COGDistanceM2.ForeColor = Color.Black;
            }

            if (!lblStep2LLAngleTakeoffF.Text.Equals("") && (!lblStep2LLAngleTakeoffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep2LLAngleTakeoffF.Text) - Convert.ToInt16(lblStep2LLAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblStep2LLAngleTakeoffM2.ForeColor = Color.Red;
                else
                    lblStep2LLAngleTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAngleTakeoffM2.ForeColor = Color.Black;
            }

            if (!lblStep2TrunkAngleTakeoffF.Text.Equals("") && (!lblStep2TrunkAngleTakeoffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep2TrunkAngleTakeoffF.Text) - Convert.ToInt16(lblStep2TrunkAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblStep2TrunkAngleTakeoffM2.ForeColor = Color.Red;
                else
                    lblStep2TrunkAngleTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2TrunkAngleTakeoffM2.ForeColor = Color.Black;
            }
            if (!lblStep2LLAngleACF.Text.Equals("") && (!lblStep2LLAngleACM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep2LLAngleACF.Text) - Convert.ToInt16(lblStep2LLAngleACM2.Text) <= Convert.ToInt16(-7))
                    lblStep2LLAngleACM2.ForeColor = Color.Red;
                else
                    lblStep2LLAngleACM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAngleACM2.ForeColor = Color.Black;
            }

            if (!lblStep2GroundTimeF.Text.Equals("") && (!lblStep2GroundTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2GroundTimeF.Text) - Convert.ToSingle(lblStep2GroundTimeM2.Text) >= Convert.ToSingle(.02))
                    lblStep2GroundTimeM2.ForeColor = Color.Red;
                else
                    lblStep2GroundTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2GroundTimeM2.ForeColor = Color.Black;
            }
            if (!lblStep2AirTimeF.Text.Equals("") && (!lblStep2AirTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2AirTimeF.Text) - Convert.ToSingle(lblStep2AirTimeM2.Text) >= Convert.ToSingle(.02))
                    lblStep2AirTimeM2.ForeColor = Color.Red;
                else
                    lblStep2AirTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2AirTimeM2.ForeColor = Color.Black;
            }

            if (!lblStep2StrideRateF.Text.Equals("") && (!lblStep2StrideRateM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2AirTimeF.Text) - Convert.ToSingle(lblStep2StrideRateM2.Text) <= Convert.ToSingle(-0.2))
                    lblStep2StrideRateM2.ForeColor = Color.Red;
                else
                    lblStep2StrideRateM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2StrideRateM2.ForeColor = Color.Black;
            }
            if (!lblStep2StrideLengthF.Text.Equals("") && (!lblStep2StrideLengthM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2StrideLengthF.Text) - Convert.ToSingle(lblStep2StrideLengthM2.Text) >= Convert.ToSingle(.05))
                    lblStep2StrideLengthM2.ForeColor = Color.Red;
                else
                    lblStep2StrideLengthM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2StrideLengthM2.ForeColor = Color.Black;
            }
            if (!lblStep2VelocityF.Text.Equals("") && (!lblStep2VelocityM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2VelocityF.Text) - Convert.ToSingle(lblStep2VelocityM2.Text) <= Convert.ToSingle(-0.5))
                    lblStep2VelocityM2.ForeColor = Color.Red;
                else
                    lblStep2VelocityM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2VelocityM2.ForeColor = Color.Black;
            }
            if (!lblStep3COGDistanceF.Text.Equals("") && (!lblStep3COGDistanceM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep3COGDistanceF.Text) - Convert.ToSingle(lblStep3COGDistanceM2.Text)) >= Convert.ToSingle(.05))
                    lblStep3COGDistanceM2.ForeColor = Color.Red;
                else
                    lblStep3COGDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3COGDistanceM2.ForeColor = Color.Black;
            }
            if (!lblTimeTo3mF.Text.Equals("") && (!lblTimeTo3mM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTimeTo3mF.Text) - Convert.ToSingle(lblTimeTo3mM2.Text) >= Convert.ToSingle(0.05))
                    lblTimeTo3mM2.ForeColor = Color.Red;
                else
                    lblTimeTo3mM2.ForeColor = Color.Black;
            }
            else
            {
                lblTimeTo3mM2.ForeColor = Color.Black;
            }
            if (!lblTimeTo5mF.Text.Equals("") && (!lblTimeTo5mM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTimeTo5mF.Text) - Convert.ToSingle(lblTimeTo5mM2.Text) >= Convert.ToSingle(0.05))
                    lblTimeTo5mM2.ForeColor = Color.Red;
                else
                    lblTimeTo5mM2.ForeColor = Color.Black;
            }
            else
            {
                lblTimeTo5mM2.ForeColor = Color.Black;
            }

            #endregion[initial values for left]

        }
        else if (rpath.Contains("Current"))
        {
            if (ds.Tables[2].Rows.Count > 0)
            {
                lblSetFrontBlockDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetFrontBlockDistance"].ToString());
                lblSetRearBlockDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetRearBlockDistance"].ToString());
                lblSetFrontULAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetFrontULAngle"].ToString());
                lblSetRearULAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetRearULAngle"].ToString());
                lblSetFrontLLAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetFrontLLAngle"].ToString());
                lblSetRearLLAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetRearLLAngle"].ToString());
                lblSetTrunkAngleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetTrunkAngle"].ToString());
                lblSetCOGDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["SetCOGDistance"].ToString());

                lblBCRearFootClearanceTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCRearFootClearanceTime"].ToString());
                lblBCFrontFootClearanceTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCFrontFootClearanceTime"].ToString());
                lblBCRearLLAngleTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCRearLLAngleTakeoff"].ToString());
                lblBCFrontLLAngleTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCFrontLLAngleTakeoff"].ToString());
                lblBCTrunkAngleTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCTrunkAngleTakeoff"].ToString());
                lblBCLLAngleACF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCLLAngleAC"].ToString());
                lblBCAirTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCAirTime"].ToString());
                lblBCStrideRateF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BC StrideRate"].ToString());
                lblBCStrideLengthF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BCStrideLength"].ToString());
                lblBCVelocityF.Text = Convert.ToString(ds.Tables[2].Rows[0]["BC Velocity"].ToString());

                lblStep1COGDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1COGDistance"].ToString());
                lblStep1LLAngleTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1LLAngleTakeoff"].ToString());
                lblStep1TrunkAngleTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1TrunkAngleTakeoff"].ToString());
                lblStep1LLAngleACF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1LLAngleAC"].ToString());
                lblStep1GroundTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1GroundTime"].ToString());
                lblStep1AirTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1AirTime"].ToString());
                lblStep1StrideRateF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep1StrideLengthF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1StrideLength"].ToString());
                lblStep1VelocityF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step1 Velocity"].ToString());

                lblStep2COGDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2COGDistance"].ToString());
                lblStep2LLAngleTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2LLAngleTakeoff"].ToString());
                lblStep2TrunkAngleTakeoffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2TrunkAngleTakeoff"].ToString());
                lblStep2LLAngleACF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2LLAngleAC"].ToString());
                lblStep2GroundTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2GroundTime"].ToString());
                lblStep2AirTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2AirTime"].ToString());
                lblStep2StrideRateF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep2StrideLengthF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2StrideLength"].ToString());
                lblStep2VelocityF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step2 Velocity"].ToString());

                lblStep3COGDistanceF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Step3COGDistance"].ToString());
                lblTimeTo3mF.Text = Convert.ToString(ds.Tables[2].Rows[0]["TimeTo3m"].ToString());
                lblTimeTo5mF.Text = Convert.ToString(ds.Tables[2].Rows[0]["TimeTo5m"].ToString());
            }
            //model 2 data
            if (ds.Tables[3].Rows.Count > 0)
            {
                lblSetFrontBlockDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetFrontBlockDistance"].ToString());
                lblSetRearBlockDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetRearBlockDistance"].ToString());
                lblSetFrontULAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetFrontULAngle"].ToString());
                lblSetRearULAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetRearULAngle"].ToString());
                lblSetFrontLLAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetFrontLLAngle"].ToString());
                lblSetRearLLAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetRearLLAngle"].ToString());
                lblSetTrunkAngleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetTrunkAngle"].ToString());
                lblSetCOGDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["SetCOGDistance"].ToString());

                lblBCRearFootClearanceTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCRearFootClearanceTime"].ToString());
                lblBCFrontFootClearanceTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCFrontFootClearanceTime"].ToString());
                lblBCRearLLAngleTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCRearLLAngleTakeoff"].ToString());
                lblBCFrontLLAngleTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCFrontLLAngleTakeoff"].ToString());
                lblBCTrunkAngleTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCTrunkAngleTakeoff"].ToString());
                lblBCLLAngleACM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCLLAngleAC"].ToString());
                lblBCAirTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCAirTime"].ToString());
                lblBCStrideRateM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BC StrideRate"].ToString());
                lblBCStrideLengthM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BCStrideLength"].ToString());
                lblBCVelocityM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["BC Velocity"].ToString());

                lblStep1COGDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1COGDistance"].ToString());
                lblStep1LLAngleTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1LLAngleTakeoff"].ToString());
                lblStep1TrunkAngleTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1TrunkAngleTakeoff"].ToString());
                lblStep1LLAngleACM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1LLAngleAC"].ToString());
                lblStep1GroundTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1GroundTime"].ToString());
                lblStep1AirTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1AirTime"].ToString());
                lblStep1StrideRateM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep1StrideLengthM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1StrideLength"].ToString());
                lblStep1VelocityM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step1 Velocity"].ToString());

                lblStep2COGDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2COGDistance"].ToString());
                lblStep2LLAngleTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2LLAngleTakeoff"].ToString());
                lblStep2TrunkAngleTakeoffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2TrunkAngleTakeoff"].ToString());
                lblStep2LLAngleACM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2LLAngleAC"].ToString());
                lblStep2GroundTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2GroundTime"].ToString());
                lblStep2AirTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2AirTime"].ToString());
                lblStep2StrideRateM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2 Stride Rate"].ToString());
                lblStep2StrideLengthM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2StrideLength"].ToString());
                lblStep2VelocityM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step2 Velocity"].ToString());

                lblStep3COGDistanceM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Step3COGDistance"].ToString());
                lblTimeTo3mM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["TimeTo3m"].ToString());
                lblTimeTo5mM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["TimeTo5m"].ToString());
            }
            #region[current values for right]
            if (!lblSetFrontBlockDistanceF.Text.Equals("") && (!lblSetFrontBlockDistanceM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetFrontBlockDistanceF.Text) - Convert.ToSingle(lblSetFrontBlockDistanceM2.Text)) >= Convert.ToSingle(.04))
                    lblSetFrontBlockDistanceM2.ForeColor = Color.Red;
                else
                    lblSetFrontBlockDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblSetFrontBlockDistanceM2.ForeColor = Color.Black;
            }

            if (!lblSetRearBlockDistanceF.Text.Equals("") && (!lblSetRearBlockDistanceM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetRearBlockDistanceF.Text) - Convert.ToSingle(lblSetRearBlockDistanceM2.Text)) >= Convert.ToSingle(.04))
                    lblSetRearBlockDistanceM2.ForeColor = Color.Red;
                else
                    lblSetRearBlockDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearBlockDistanceM2.ForeColor = Color.Black;
            }

            if (!lblSetFrontULAngleF.Text.Equals("") && (!lblSetFrontULAngleM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetFrontULAngleF.Text) - Convert.ToSingle(lblSetFrontULAngleM2.Text)) >= Convert.ToInt16(7))
                    lblSetFrontULAngleM2.ForeColor = Color.Red;
                else
                    lblSetFrontULAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblSetFrontULAngleM2.ForeColor = Color.Black;
            }

            if (!lblSetRearULAngleF.Text.Equals("") && (!lblSetRearULAngleM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetRearULAngleF.Text) - Convert.ToSingle(lblSetRearULAngleM2.Text)) >= Convert.ToInt16(7))
                    lblSetRearULAngleM2.ForeColor = Color.Red;
                else
                    lblSetRearULAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearULAngleM2.ForeColor = Color.Black;
            }

            if (!lblSetFrontLLAngleF.Text.Equals("") && (!lblSetFrontLLAngleM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetFrontLLAngleF.Text) - Convert.ToSingle(lblSetFrontLLAngleM2.Text)) >= Convert.ToInt16(7))
                    lblSetFrontLLAngleM2.ForeColor = Color.Red;
                else
                    lblSetFrontLLAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearULAngleM2.ForeColor = Color.Black;
            }

            if (!lblSetRearLLAngleF.Text.Equals("") && (!lblSetRearLLAngleM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetRearLLAngleF.Text) - Convert.ToSingle(lblSetRearLLAngleM2.Text)) >= Convert.ToInt16(7))
                    lblSetRearLLAngleM2.ForeColor = Color.Red;
                else
                    lblSetRearLLAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblSetRearLLAngleM2.ForeColor = Color.Black;
            }

            if (!lblSetTrunkAngleF.Text.Equals("") && (!lblSetTrunkAngleM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblSetTrunkAngleF.Text) - Convert.ToSingle(lblSetTrunkAngleM2.Text)) >= Convert.ToInt16(7))
                    lblSetTrunkAngleM2.ForeColor = Color.Red;
                else
                    lblSetTrunkAngleM2.ForeColor = Color.Black;
            }
            else
            {
                lblSetTrunkAngleM2.ForeColor = Color.Black;
            }

            if (!lblStep1COGDistanceF.Text.Equals("") && (!lblStep1COGDistanceM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1COGDistanceF.Text) - Convert.ToSingle(lblStep1COGDistanceM2.Text)) >= Convert.ToSingle(.05))
                    lblStep1COGDistanceM2.ForeColor = Color.Red;
                else
                    lblStep1COGDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1COGDistanceM2.ForeColor = Color.Black;
            }

            if (!lblBCRearFootClearanceTimeF.Text.Equals("") && (!lblBCRearFootClearanceTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCRearFootClearanceTimeF.Text) - Convert.ToSingle(lblBCRearFootClearanceTimeM2.Text) >= Convert.ToSingle(.02))
                    lblBCRearFootClearanceTimeM2.ForeColor = Color.Red;
                else
                    lblBCRearFootClearanceTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCRearFootClearanceTimeM2.ForeColor = Color.Black;
            }

            if (!lblBCFrontFootClearanceTimeF.Text.Equals("") && (!lblBCFrontFootClearanceTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCFrontFootClearanceTimeF.Text) - Convert.ToSingle(lblBCFrontFootClearanceTimeM2.Text) >= Convert.ToSingle(.04))
                    lblBCFrontFootClearanceTimeM2.ForeColor = Color.Red;
                else
                    lblBCFrontFootClearanceTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCFrontFootClearanceTimeM2.ForeColor = Color.Black;
            }

            if (!lblBCRearLLAngleTakeoffF.Text.Equals("") && (!lblBCRearLLAngleTakeoffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCRearLLAngleTakeoffF.Text) - Convert.ToInt16(lblBCRearLLAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblBCRearLLAngleTakeoffM2.ForeColor = Color.Red;
                else
                    lblBCRearLLAngleTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCRearLLAngleTakeoffM2.ForeColor = Color.Black;
            }

            if (!lblBCFrontLLAngleTakeoffF.Text.Equals("") && (!lblBCFrontLLAngleTakeoffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCFrontLLAngleTakeoffF.Text) - Convert.ToInt16(lblBCFrontLLAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblBCFrontLLAngleTakeoffM2.ForeColor = Color.Red;
                else
                    lblBCFrontLLAngleTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCFrontLLAngleTakeoffM2.ForeColor = Color.Black;
            }

            if (!lblBCTrunkAngleTakeoffF.Text.Equals("") && (!lblBCTrunkAngleTakeoffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCTrunkAngleTakeoffF.Text) - Convert.ToInt16(lblBCTrunkAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblBCTrunkAngleTakeoffM2.ForeColor = Color.Red;
                else
                    lblBCTrunkAngleTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCTrunkAngleTakeoffM2.ForeColor = Color.Black;
            }

            if (!lblBCLLAngleACF.Text.Equals("") && (!lblBCLLAngleACM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblBCLLAngleACF.Text) - Convert.ToInt16(lblBCLLAngleACM2.Text) <= Convert.ToInt16(-7))
                    lblBCLLAngleACM2.ForeColor = Color.Red;
                else
                    lblBCLLAngleACM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCLLAngleACM2.ForeColor = Color.Black;
            }

            if (!lblBCAirTimeF.Text.Equals("") && (!lblBCAirTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCAirTimeF.Text) - Convert.ToSingle(lblBCAirTimeM2.Text) >= Convert.ToSingle(.02))
                    lblBCAirTimeM2.ForeColor = Color.Red;
                else
                    lblBCAirTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCAirTimeM2.ForeColor = Color.Black;
            }
            if (!lblBCStrideRateF.Text.Equals("") && (!lblBCStrideRateM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCStrideRateF.Text) - Convert.ToSingle(lblBCStrideRateM2.Text) <= Convert.ToSingle(-0.2))
                    lblBCStrideRateM2.ForeColor = Color.Red;
                else
                    lblBCStrideRateM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCStrideRateM2.ForeColor = Color.Black;
            }

            if (!lblBCStrideLengthF.Text.Equals("") && (!lblBCStrideLengthM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCStrideLengthF.Text) - Convert.ToSingle(lblBCStrideLengthM2.Text) >= Convert.ToSingle(.05))
                    lblBCStrideLengthM2.ForeColor = Color.Red;
                else
                    lblBCStrideLengthM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCStrideLengthM2.ForeColor = Color.Black;
            }

            if (!lblBCVelocityF.Text.Equals("") && (!lblBCVelocityM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblBCVelocityF.Text) - Convert.ToSingle(lblBCVelocityM2.Text) <= Convert.ToSingle(-0.5))
                    lblBCVelocityM2.ForeColor = Color.Red;
                else
                    lblBCVelocityM2.ForeColor = Color.Black;
            }
            else
            {
                lblBCVelocityM2.ForeColor = Color.Black;
            }

            if (!lblStep1COGDistanceF.Text.Equals("") && (!lblStep1COGDistanceM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep1COGDistanceF.Text) - Convert.ToSingle(lblStep1COGDistanceM2.Text)) >= Convert.ToSingle(.05))
                    lblStep1COGDistanceM2.ForeColor = Color.Red;
                else
                    lblStep1COGDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1COGDistanceM2.ForeColor = Color.Black;
            }
            if (!lblStep1LLAngleTakeoffF.Text.Equals("") && (!lblStep1LLAngleTakeoffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep1LLAngleTakeoffF.Text) - Convert.ToInt16(lblStep1LLAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblStep1LLAngleTakeoffM2.ForeColor = Color.Red;
                else
                    lblStep1LLAngleTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1LLAngleTakeoffM2.ForeColor = Color.Black;
            }

            if (!lblStep1TrunkAngleTakeoffF.Text.Equals("") && (!lblStep1TrunkAngleTakeoffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep1TrunkAngleTakeoffF.Text) - Convert.ToInt16(lblStep1TrunkAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblStep1TrunkAngleTakeoffM2.ForeColor = Color.Red;
                else
                    lblStep1TrunkAngleTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1TrunkAngleTakeoffM2.ForeColor = Color.Black;
            }


            if (!lblStep1LLAngleACF.Text.Equals("") && (!lblStep1LLAngleACM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep1LLAngleACF.Text) - Convert.ToInt16(lblStep1LLAngleACM2.Text) <= Convert.ToInt16(-7))
                    lblStep1LLAngleACM2.ForeColor = Color.Red;
                else
                    lblStep1LLAngleACM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1LLAngleACM2.ForeColor = Color.Black;
            }


            if (!lblStep1GroundTimeF.Text.Equals("") && (!lblStep1GroundTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1GroundTimeF.Text) - Convert.ToSingle(lblStep1GroundTimeM2.Text) >= Convert.ToSingle(.02))
                    lblStep1GroundTimeM2.ForeColor = Color.Red;
                else
                    lblStep1GroundTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1GroundTimeM2.ForeColor = Color.Black;
            }

            if (!lblStep1AirTimeF.Text.Equals("") && (!lblStep1AirTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1AirTimeF.Text) - Convert.ToSingle(lblStep1AirTimeM2.Text) >= Convert.ToSingle(.02))
                    lblStep1AirTimeM2.ForeColor = Color.Red;
                else
                    lblStep1AirTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1AirTimeM2.ForeColor = Color.Black;
            }

            if (!lblStep1StrideRateF.Text.Equals("") && (!lblStep1StrideRateM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1StrideRateF.Text) - Convert.ToSingle(lblStep1StrideRateM2.Text) <= Convert.ToSingle(-0.2))
                    lblStep1StrideRateM2.ForeColor = Color.Red;
                else
                    lblStep1StrideRateM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1StrideRateM2.ForeColor = Color.Black;
            }

            if (!lblStep1StrideLengthF.Text.Equals("") && (!lblStep1StrideLengthM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1StrideLengthF.Text) - Convert.ToSingle(lblStep1StrideLengthM2.Text) >= Convert.ToSingle(.05))
                    lblStep1StrideLengthM2.ForeColor = Color.Red;
                else
                    lblStep1StrideLengthM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1StrideLengthM2.ForeColor = Color.Black;
            }
            if (!lblStep1VelocityF.Text.Equals("") && (!lblStep1VelocityM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep1VelocityF.Text) - Convert.ToSingle(lblStep1VelocityM2.Text) <= Convert.ToSingle(-0.5))
                    lblStep1VelocityM2.ForeColor = Color.Red;
                else
                    lblStep1VelocityM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep1VelocityM2.ForeColor = Color.Black;
            }

            if (!lblStep2COGDistanceF.Text.Equals("") && (!lblStep2COGDistanceM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep2COGDistanceF.Text) - Convert.ToSingle(lblStep2COGDistanceM2.Text)) >= Convert.ToSingle(.05))
                    lblStep2COGDistanceM2.ForeColor = Color.Red;
                else
                    lblStep2COGDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2COGDistanceM2.ForeColor = Color.Black;
            }

            if (!lblStep2LLAngleTakeoffF.Text.Equals("") && (!lblStep2LLAngleTakeoffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep2LLAngleTakeoffF.Text) - Convert.ToInt16(lblStep2LLAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblStep2LLAngleTakeoffM2.ForeColor = Color.Red;
                else
                    lblStep2LLAngleTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAngleTakeoffM2.ForeColor = Color.Black;
            }

            if (!lblStep2TrunkAngleTakeoffF.Text.Equals("") && (!lblStep2TrunkAngleTakeoffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep2TrunkAngleTakeoffF.Text) - Convert.ToInt16(lblStep2LLAngleTakeoffM2.Text) >= Convert.ToInt16(7))
                    lblStep2TrunkAngleTakeoffM2.ForeColor = Color.Red;
                else
                    lblStep2TrunkAngleTakeoffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2TrunkAngleTakeoffM2.ForeColor = Color.Black;
            }
            if (!lblStep2LLAngleACF.Text.Equals("") && (!lblStep2LLAngleACM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblStep2LLAngleACF.Text) - Convert.ToInt16(lblStep2LLAngleACM2.Text) <= Convert.ToInt16(-7))
                    lblStep2LLAngleACM2.ForeColor = Color.Red;
                else
                    lblStep2LLAngleACM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2LLAngleACM2.ForeColor = Color.Black;
            }

            if (!lblStep2GroundTimeF.Text.Equals("") && (!lblStep2GroundTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2GroundTimeF.Text) - Convert.ToSingle(lblStep2GroundTimeM2.Text) >= Convert.ToSingle(.02))
                    lblStep2GroundTimeM2.ForeColor = Color.Red;
                else
                    lblStep2GroundTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2GroundTimeM2.ForeColor = Color.Black;
            }
            if (!lblStep2AirTimeF.Text.Equals("") && (!lblStep2AirTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2AirTimeF.Text) - Convert.ToSingle(lblStep2AirTimeM2.Text) >= Convert.ToSingle(.02))
                    lblStep2AirTimeM2.ForeColor = Color.Red;
                else
                    lblStep2AirTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2AirTimeM2.ForeColor = Color.Black;
            }

            if (!lblStep2StrideRateF.Text.Equals("") && (!lblStep2StrideRateM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2AirTimeF.Text) - Convert.ToSingle(lblStep2StrideRateM2.Text) <= Convert.ToSingle(-0.2))
                    lblStep2StrideRateM2.ForeColor = Color.Red;
                else
                    lblStep2StrideRateM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2StrideRateM2.ForeColor = Color.Black;
            }
            if (!lblStep2StrideLengthF.Text.Equals("") && (!lblStep2StrideLengthM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2StrideLengthF.Text) - Convert.ToSingle(lblStep2StrideLengthM2.Text) >= Convert.ToSingle(.05))
                    lblStep2StrideLengthM2.ForeColor = Color.Red;
                else
                    lblStep2StrideLengthM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2StrideLengthM2.ForeColor = Color.Black;
            }
            if (!lblStep2VelocityF.Text.Equals("") && (!lblStep2VelocityM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblStep2VelocityF.Text) - Convert.ToSingle(lblStep2VelocityM2.Text) <= Convert.ToSingle(-0.5))
                    lblStep2VelocityM2.ForeColor = Color.Red;
                else
                    lblStep2VelocityM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep2VelocityM2.ForeColor = Color.Black;
            }
            if (!lblStep3COGDistanceF.Text.Equals("") && (!lblStep3COGDistanceM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStep3COGDistanceF.Text) - Convert.ToSingle(lblStep3COGDistanceM2.Text)) >= Convert.ToSingle(.05))
                    lblStep3COGDistanceM2.ForeColor = Color.Red;
                else
                    lblStep3COGDistanceM2.ForeColor = Color.Black;
            }
            else
            {
                lblStep3COGDistanceM2.ForeColor = Color.Black;
            }
            if (!lblTimeTo3mF.Text.Equals("") && (!lblTimeTo3mM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTimeTo3mF.Text) - Convert.ToSingle(lblTimeTo3mM2.Text) >= Convert.ToSingle(0.05))
                    lblTimeTo3mM2.ForeColor = Color.Red;
                else
                    lblTimeTo3mM2.ForeColor = Color.Black;
            }
            else
            {
                lblTimeTo3mM2.ForeColor = Color.Black;
            }
            if (!lblTimeTo5mF.Text.Equals("") && (!lblTimeTo5mM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTimeTo5mF.Text) - Convert.ToSingle(lblTimeTo5mM2.Text) >= Convert.ToSingle(0.05))
                    lblTimeTo5mM2.ForeColor = Color.Red;
                else
                    lblTimeTo5mM2.ForeColor = Color.Black;
            }
            else
            {
                lblTimeTo5mM2.ForeColor = Color.Black;
            }

            #endregion[current values for right]
        }
        // WriteObjectsToPageAjax();
    }

    public void GetHurdleLeftMovieVariablesforNonTires(int LessonId, string lpath)
    {
        ds = sae.GetAllHurdleAthleteData(LessonId);
        if (DropDownList1.SelectedValue != "")
        {
            try
            {
                int movieid = Convert.ToInt32(DropDownList1.SelectedItem.Value);
                leftMovie = DataRepository.MovieProvider.GetByMovieId(movieid);
                string location = sae.SelectLessonlocation(LessonId.ToString());
                string date = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
                string LeftSession = date + "-" + location;
                lblLeftHurdleMovie.Text = LeftSession;
            }
            catch { }
        }
        if (lpath.Contains("Initial"))
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                lblGroundTimeIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["GroundTimeInto"].ToString());
                lblGroundTimeOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["GroundTimeOff"]);
                lblAirTimeI.Text = Convert.ToString(ds.Tables[0].Rows[0]["AirTimeOver"]);
                lblStrideLengthIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["StrideLengthInto"]);
                lblStrideLengthOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["StrideLengthOff"]);
                lblStrideLengthTotalI.Text = Convert.ToString(ds.Tables[0].Rows[0]["StrideLengthTotal"]);
                lblVelocityI.Text = Convert.ToString(ds.Tables[0].Rows[0]["Velocity"]);
                lblTouchdownDistanceIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["COGDistanceInto"]);
                lblTouchdownDistanceOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["COGDistanceOff"]);
                lblUpperLegAngleatTouchdownIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["ULAngleTDInto"]);
                lblUpperLegAngleatTakeoffIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["ULAngleTOInto"]);
                lblUpperLegAngleatTouchdownOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["ULAngleTDOff"]);
                lblUpperLegAngleatTakeoffOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["ULAngleTOOff"]);
                lblLeadLowerLegMinimumAngleIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["LeadLegMinimumAngle"]);
                lblLeadLowerLegAngleatAnkleCrossIntoI.Text = Convert.ToString(ds.Tables[0].Rows[0]["LeadLegAngleAC"]);
                lblLowerLegAngleatTouchdownOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["LLAngleTDOff"]);
                lblLowerLegAngleatTakeoffOffI.Text = Convert.ToString(ds.Tables[0].Rows[0]["LLAngleTOOff"]);
            }
            if (ds.Tables[1].Rows.Count > 0)
            {
                lblGroundTimeIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTimeInto"]);
                lblGroundTimeOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTimeOff"]);
                lblAirTimeM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["AirTimeOver"]);
                lblStrideLengthIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLengthInto"]);
                lblStrideLengthOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLengthOff"]);
                lblStrideLengthTotalM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLengthTotal"]);
                lblVelocityHurdleM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["Velocity"]);
                lblTouchdownDistanceIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["COGDistanceInto"]);
                lblTouchdownDistanceOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["COGDistanceOff"]);
                lblUpperLegAngleatTouchdownIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULAngleTDInto"]);
                lblUpperLegAngleatTakeoffIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULAngleTOInto"]);
                lblUpperLegAngleatTouchdownOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULAngleTDOff"]);
                lblUpperLegAngleatTakeoffOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULAngleTOOff"]);
                lblLeadLowerLegMinimumAngleIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LeadLegMinimumAngle"]);
                lblLeadLowerLegAngleatAnkleCrossIntoM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LeadLegAngleAC"]);
                lblLowerLegAngleatTouchdownOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleTDOff"]);
                lblLowerLegAngleatTakeoffOffM1.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleTOOff"]);
            }

            #region[Initail values for left]
            if (!lblGroundTimeIntoI.Text.Equals("") && (!lblGroundTimeIntoM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblGroundTimeIntoI.Text) - Convert.ToSingle(lblGroundTimeIntoM1.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeIntoM1.ForeColor = Color.Red;
                else
                    lblGroundTimeIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeIntoM1.Text = "";
            }

            if (!lblGroundTimeOffI.Text.Equals("") && (!lblGroundTimeOffM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblGroundTimeOffI.Text) - Convert.ToSingle(lblGroundTimeOffM1.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeOffM1.ForeColor = Color.Red;
                else
                    lblGroundTimeOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeOffM1.Text = "";
            }
            if (!lblAirTimeI.Text.Equals("") && (!lblAirTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblAirTimeI.Text) - Convert.ToSingle(lblAirTimeM1.Text) >= Convert.ToSingle(.015))
                    lblAirTimeM1.ForeColor = Color.Red;
                else
                    lblAirTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblAirTimeM1.Text = "";
            }

            if (!lblStrideLengthIntoI.Text.Equals("") && (!lblStrideLengthIntoM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthIntoI.Text) - Convert.ToSingle(lblStrideLengthIntoM1.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthIntoM1.ForeColor = Color.Red;
                else
                    lblStrideLengthIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthIntoM1.Text = "";
            }

            if (!lblStrideLengthOffI.Text.Equals("") && (!lblStrideLengthOffM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthOffI.Text) - Convert.ToSingle(lblStrideLengthOffM1.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthOffM1.ForeColor = Color.Red;
                else
                    lblStrideLengthOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthOffM1.Text = "";
            }
            if (!lblStrideLengthTotalI.Text.Equals("") && (!lblStrideLengthTotalM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthTotalI.Text) - Convert.ToSingle(lblStrideLengthTotalM1.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthTotalM1.ForeColor = Color.Red;
                else
                    lblStrideLengthTotalM1.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthTotalM1.Text = "";
            }
            if (!lblVelocityI.Text.Equals("") && (!lblVelocityHurdleM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblVelocityI.Text) - Convert.ToSingle(lblVelocityHurdleM1.Text) <= Convert.ToSingle(-0.65))
                    lblVelocityHurdleM1.ForeColor = Color.Red;
                else
                    lblVelocityHurdleM1.ForeColor = Color.Black;
            }
            else
            {
                lblVelocityHurdleM1.Text = "";
            }
            if (!lblTouchdownDistanceIntoI.Text.Equals("") && (!lblTouchdownDistanceIntoM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTouchdownDistanceIntoI.Text) - Convert.ToSingle(lblTouchdownDistanceIntoM1.Text) >= Convert.ToSingle(.02))
                    lblTouchdownDistanceIntoM1.ForeColor = Color.Red;
                else
                    lblTouchdownDistanceIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblTouchdownDistanceIntoM1.Text = "";
            }

            if (!lblTouchdownDistanceOffI.Text.Equals("") && (!lblTouchdownDistanceOffM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTouchdownDistanceOffI.Text) - Convert.ToSingle(lblTouchdownDistanceOffM1.Text) >= Convert.ToSingle(.02))
                    lblTouchdownDistanceOffM1.ForeColor = Color.Red;
                else
                    lblTouchdownDistanceOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblTouchdownDistanceOffM1.Text = "";
            }
            if (!lblUpperLegAngleatTouchdownIntoI.Text.Equals("") && (!lblUpperLegAngleatTouchdownIntoM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTouchdownIntoI.Text) - Convert.ToInt16(lblUpperLegAngleatTouchdownIntoM1.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTouchdownIntoM1.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTouchdownIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTouchdownIntoM1.Text = "";
            }
            if (!lblUpperLegAngleatTakeoffIntoI.Text.Equals("") && (!lblUpperLegAngleatTakeoffIntoM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTakeoffIntoI.Text) - Convert.ToInt16(lblUpperLegAngleatTakeoffIntoM1.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTakeoffIntoM1.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTakeoffIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTakeoffIntoM1.Text = "";
            }

            if (!lblUpperLegAngleatTouchdownOffI.Text.Equals("") && (!lblUpperLegAngleatTouchdownOffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTouchdownOffI.Text) - Convert.ToInt16(lblUpperLegAngleatTouchdownOffM1.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTouchdownOffM1.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTouchdownOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTouchdownOffM1.Text = "";
            }
            if (!lblUpperLegAngleatTakeoffOffI.Text.Equals("") && (!lblUpperLegAngleatTakeoffOffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTakeoffOffI.Text) - Convert.ToInt16(lblUpperLegAngleatTakeoffOffM1.Text) <= Convert.ToInt16(-7))
                    lblUpperLegAngleatTakeoffOffM1.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTakeoffOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTakeoffOffM1.Text = "";
            }
            if (!lblLeadLowerLegMinimumAngleIntoI.Text.Equals("") && (!lblLeadLowerLegMinimumAngleIntoM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoI.Text) - Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoM1.Text) <= Convert.ToInt16(-7))
                    lblLeadLowerLegMinimumAngleIntoM1.ForeColor = Color.Red;
                else
                    lblLeadLowerLegMinimumAngleIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegMinimumAngleIntoM1.Text = "";
            }
            if (!lblLeadLowerLegAngleatAnkleCrossIntoI.Text.Equals("") && (!lblLeadLowerLegAngleatAnkleCrossIntoM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoI.Text) - Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoM1.Text) <= Convert.ToInt16(-7))
                    lblLeadLowerLegAngleatAnkleCrossIntoM1.ForeColor = Color.Red;
                else
                    lblLeadLowerLegAngleatAnkleCrossIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegAngleatAnkleCrossIntoM1.Text = "";
            }

            if (!lblLowerLegAngleatTouchdownOffI.Text.Equals("") && (!lblLowerLegAngleatTouchdownOffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLowerLegAngleatTouchdownOffI.Text) - Convert.ToInt16(lblLowerLegAngleatTouchdownOffM1.Text) <= Convert.ToInt16(-7))
                    lblLowerLegAngleatTouchdownOffM1.ForeColor = Color.Red;
                else
                    lblLowerLegAngleatTouchdownOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleatTouchdownOffM1.Text = "";
            }

            if (!lblLowerLegAngleatTakeoffOffI.Text.Equals("") && (!lblLowerLegAngleatTakeoffOffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLowerLegAngleatTakeoffOffI.Text) - Convert.ToInt16(lblLowerLegAngleatTakeoffOffM1.Text) >= Convert.ToInt16(7))
                    lblLowerLegAngleatTakeoffOffM1.ForeColor = Color.Red;
                else
                    lblLowerLegAngleatTakeoffOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleatTakeoffOffM1.Text = "";
            }

            #endregion[initail values for left]
        }
        else if (lpath.Contains("Current"))
        {
            if (ds.Tables[2].Rows.Count > 0)
            {
                lblGroundTimeIntoI.Text = Convert.ToString(ds.Tables[2].Rows[0]["GroundTimeInto"].ToString());
                lblGroundTimeOffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["GroundTimeOff"]);
                lblAirTimeI.Text = Convert.ToString(ds.Tables[2].Rows[0]["AirTimeOver"]);
                lblStrideLengthIntoI.Text = Convert.ToString(ds.Tables[2].Rows[0]["StrideLengthInto"]);
                lblStrideLengthOffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["StrideLengthOff"]);
                lblStrideLengthTotalI.Text = Convert.ToString(ds.Tables[2].Rows[0]["StrideLengthTotal"]);
                lblVelocityI.Text = Convert.ToString(ds.Tables[2].Rows[0]["Velocity"]);
                lblTouchdownDistanceIntoI.Text = Convert.ToString(ds.Tables[2].Rows[0]["COGDistanceInto"]);
                lblTouchdownDistanceOffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["COGDistanceOff"]);
                lblUpperLegAngleatTouchdownIntoI.Text = Convert.ToString(ds.Tables[2].Rows[0]["ULAngleTDInto"]);
                lblUpperLegAngleatTakeoffIntoI.Text = Convert.ToString(ds.Tables[2].Rows[0]["ULAngleTOInto"]);
                lblUpperLegAngleatTouchdownOffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["ULAngleTDOff"]);
                lblUpperLegAngleatTakeoffOffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["ULAngleTOOff"]);
                lblLeadLowerLegMinimumAngleIntoI.Text = Convert.ToString(ds.Tables[2].Rows[0]["LeadLegMinimumAngle"]);
                lblLeadLowerLegAngleatAnkleCrossIntoI.Text = Convert.ToString(ds.Tables[2].Rows[0]["LeadLegAngleAC"]);
                lblLowerLegAngleatTouchdownOffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["LLAngleTDOff"]);
                lblLowerLegAngleatTakeoffOffI.Text = Convert.ToString(ds.Tables[2].Rows[0]["LLAngleTOOff"]);
            }
            if (ds.Tables[3].Rows.Count > 0)
            {
                lblGroundTimeIntoM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTimeInto"]);
                lblGroundTimeOffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTimeOff"]);
                lblAirTimeM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["AirTimeOver"]);
                lblStrideLengthIntoM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLengthInto"]);
                lblStrideLengthOffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLengthOff"]);
                lblStrideLengthTotalM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLengthTotal"]);
                lblVelocityHurdleM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["Velocity"]);
                lblTouchdownDistanceIntoM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["COGDistanceInto"]);
                lblTouchdownDistanceOffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["COGDistanceOff"]);
                lblUpperLegAngleatTouchdownIntoM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULAngleTDInto"]);
                lblUpperLegAngleatTakeoffIntoM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULAngleTOInto"]);
                lblUpperLegAngleatTouchdownOffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULAngleTDOff"]);
                lblUpperLegAngleatTakeoffOffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULAngleTOOff"]);
                lblLeadLowerLegMinimumAngleIntoM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["LeadLegMinimumAngle"]);
                lblLeadLowerLegAngleatAnkleCrossIntoM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["LeadLegAngleAC"]);
                lblLowerLegAngleatTouchdownOffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleTDOff"]);
                lblLowerLegAngleatTakeoffOffM1.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleTOOff"]);
            }
            #region[current values for left]
            if (!lblGroundTimeIntoI.Text.Equals("") && (!lblGroundTimeIntoM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblGroundTimeIntoI.Text) - Convert.ToSingle(lblGroundTimeIntoM1.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeIntoM1.ForeColor = Color.Red;
                else
                    lblGroundTimeIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeIntoM1.Text = "";
            }

            if (!lblGroundTimeOffI.Text.Equals("") && (!lblGroundTimeOffM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblGroundTimeOffI.Text) - Convert.ToSingle(lblGroundTimeOffM1.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeOffM1.ForeColor = Color.Red;
                else
                    lblGroundTimeOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeOffM1.Text = "";
            }
            if (!lblAirTimeI.Text.Equals("") && (!lblAirTimeM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblAirTimeI.Text) - Convert.ToSingle(lblAirTimeM1.Text) >= Convert.ToSingle(.015))
                    lblAirTimeM1.ForeColor = Color.Red;
                else
                    lblAirTimeM1.ForeColor = Color.Black;
            }
            else
            {
                lblAirTimeM1.Text = "";
            }

            if (!lblStrideLengthIntoI.Text.Equals("") && (!lblStrideLengthIntoM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthIntoI.Text) - Convert.ToSingle(lblStrideLengthIntoM1.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthIntoM1.ForeColor = Color.Red;
                else
                    lblStrideLengthIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthIntoM1.Text = "";
            }

            if (!lblStrideLengthOffI.Text.Equals("") && (!lblStrideLengthOffM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthOffI.Text) - Convert.ToSingle(lblStrideLengthOffM1.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthOffM1.ForeColor = Color.Red;
                else
                    lblStrideLengthOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthOffM1.Text = "";
            }
            if (!lblStrideLengthTotalI.Text.Equals("") && (!lblStrideLengthTotalM1.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthTotalI.Text) - Convert.ToSingle(lblStrideLengthTotalM1.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthTotalM1.ForeColor = Color.Red;
                else
                    lblStrideLengthTotalM1.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthTotalM1.Text = "";
            }
            if (!lblVelocityI.Text.Equals("") && (!lblVelocityHurdleM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblVelocityI.Text) - Convert.ToSingle(lblVelocityHurdleM1.Text) <= Convert.ToSingle(-0.65))
                    lblVelocityHurdleM1.ForeColor = Color.Red;
                else
                    lblVelocityHurdleM1.ForeColor = Color.Black;
            }
            else
            {
                lblVelocityHurdleM1.Text = "";
            }
            if (!lblTouchdownDistanceIntoI.Text.Equals("") && (!lblTouchdownDistanceIntoM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTouchdownDistanceIntoI.Text) - Convert.ToSingle(lblTouchdownDistanceIntoM1.Text) >= Convert.ToSingle(.02))
                    lblTouchdownDistanceIntoM1.ForeColor = Color.Red;
                else
                    lblTouchdownDistanceIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblTouchdownDistanceIntoM1.Text = "";
            }

            if (!lblTouchdownDistanceOffI.Text.Equals("") && (!lblTouchdownDistanceOffM1.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTouchdownDistanceOffI.Text) - Convert.ToSingle(lblTouchdownDistanceOffM1.Text) >= Convert.ToSingle(.02))
                    lblTouchdownDistanceOffM1.ForeColor = Color.Red;
                else
                    lblTouchdownDistanceOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblTouchdownDistanceOffM1.Text = "";
            }
            if (!lblUpperLegAngleatTouchdownIntoI.Text.Equals("") && (!lblUpperLegAngleatTouchdownIntoM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTouchdownIntoI.Text) - Convert.ToInt16(lblUpperLegAngleatTouchdownIntoM1.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTouchdownIntoM1.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTouchdownIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTouchdownIntoM1.Text = "";
            }
            if (!lblUpperLegAngleatTakeoffIntoI.Text.Equals("") && (!lblUpperLegAngleatTakeoffIntoM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTakeoffIntoI.Text) - Convert.ToInt16(lblUpperLegAngleatTakeoffIntoM1.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTakeoffIntoM1.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTakeoffIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTakeoffIntoM1.Text = "";
            }

            if (!lblUpperLegAngleatTouchdownOffI.Text.Equals("") && (!lblUpperLegAngleatTouchdownOffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTouchdownOffI.Text) - Convert.ToInt16(lblUpperLegAngleatTouchdownOffM1.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTouchdownOffM1.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTouchdownOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTouchdownOffM1.Text = "";
            }
            if (!lblUpperLegAngleatTakeoffOffI.Text.Equals("") && (!lblUpperLegAngleatTakeoffOffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTakeoffOffI.Text) - Convert.ToInt16(lblUpperLegAngleatTakeoffOffM1.Text) <= Convert.ToInt16(-7))
                    lblUpperLegAngleatTakeoffOffM1.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTakeoffOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTakeoffOffM1.Text = "";
            }
            if (!lblLeadLowerLegMinimumAngleIntoI.Text.Equals("") && (!lblLeadLowerLegMinimumAngleIntoM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoI.Text) - Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoM1.Text) <= Convert.ToInt16(-7))
                    lblLeadLowerLegMinimumAngleIntoM1.ForeColor = Color.Red;
                else
                    lblLeadLowerLegMinimumAngleIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegMinimumAngleIntoM1.Text = "";
            }
            if (!lblLeadLowerLegAngleatAnkleCrossIntoI.Text.Equals("") && (!lblLeadLowerLegAngleatAnkleCrossIntoM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoI.Text) - Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoM1.Text) <= Convert.ToInt16(-7))
                    lblLeadLowerLegAngleatAnkleCrossIntoM1.ForeColor = Color.Red;
                else
                    lblLeadLowerLegAngleatAnkleCrossIntoM1.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegAngleatAnkleCrossIntoM1.Text = "";
            }

            if (!lblLowerLegAngleatTouchdownOffI.Text.Equals("") && (!lblLowerLegAngleatTouchdownOffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLowerLegAngleatTouchdownOffI.Text) - Convert.ToInt16(lblLowerLegAngleatTouchdownOffM1.Text) <= Convert.ToInt16(-7))
                    lblLowerLegAngleatTouchdownOffM1.ForeColor = Color.Red;
                else
                    lblLowerLegAngleatTouchdownOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleatTouchdownOffM1.Text = "";
            }

            if (!lblLowerLegAngleatTakeoffOffI.Text.Equals("") && (!lblLowerLegAngleatTakeoffOffM1.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLowerLegAngleatTakeoffOffI.Text) - Convert.ToInt16(lblLowerLegAngleatTakeoffOffM1.Text) >= Convert.ToInt16(7))
                    lblLowerLegAngleatTakeoffOffM1.ForeColor = Color.Red;
                else
                    lblLowerLegAngleatTakeoffOffM1.ForeColor = Color.Black;
            }
            else
            {
                lblLowerLegAngleatTakeoffOffM1.Text = "";
            }

            #endregion[current values for left]
        }
        //  WriteObjectsToPageAjax();

    }

    public void GetHurdleRightMovieVariablesforNonTires(int LessonId, string rpath)
    {
        ds = sae.GetAllHurdleAthleteData(LessonId);
        if (DropDownList3.SelectedValue != "")
        {
            try
            {
                int movieidF = Convert.ToInt32(DropDownList3.SelectedItem.Value);
                leftMovie = DataRepository.MovieProvider.GetByMovieId(movieidF);
                string locationF = sae.SelectLessonlocation(LessonId.ToString());
                string dateF = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
                string RightSession = dateF + "-" + locationF;
                lblRightHurdleMovie.Text = RightSession;
            }
            catch { }
        }
        if (rpath.Contains("Initial"))
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                lblGroundTimeIntoF.Text = Convert.ToString(ds.Tables[0].Rows[0]["GroundTimeInto"].ToString());
                lblGroundTimeOffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["GroundTimeOff"]);
                lblAirTimeF.Text = Convert.ToString(ds.Tables[0].Rows[0]["AirTimeOver"]);
                lblStrideLengthIntoF.Text = Convert.ToString(ds.Tables[0].Rows[0]["StrideLengthInto"]);
                lblStrideLengthOffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["StrideLengthOff"]);
                lblStrideLengthTotalF.Text = Convert.ToString(ds.Tables[0].Rows[0]["StrideLengthTotal"]);
                lblVelocityHurdleF.Text = Convert.ToString(ds.Tables[0].Rows[0]["Velocity"]);
                lblTouchdownDistanceIntoF.Text = Convert.ToString(ds.Tables[0].Rows[0]["COGDistanceInto"]);
                lblTouchdownDistanceOffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["COGDistanceOff"]);
                lblUpperLegAngleatTouchdownIntoF.Text = Convert.ToString(ds.Tables[0].Rows[0]["ULAngleTDInto"]);
                lblUpperLegAngleatTakeoffIntoF.Text = Convert.ToString(ds.Tables[0].Rows[0]["ULAngleTOInto"]);
                lblUpperLegAngleatTouchdownOffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["ULAngleTDOff"]);
                lblUpperLegAngleatTakeoffOffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["ULAngleTOOff"]);
                lblLeadLowerLegMinimumAngleIntoF.Text = Convert.ToString(ds.Tables[0].Rows[0]["LeadLegMinimumAngle"]);
                lblLeadLowerLegAngleatAnkleCrossIntoF.Text = Convert.ToString(ds.Tables[0].Rows[0]["LeadLegAngleAC"]);
                lblLowerLegAngleatTouchdownOffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["LLAngleTDOff"]);
                lblLowerLegAngleatTakeoffOffF.Text = Convert.ToString(ds.Tables[0].Rows[0]["LLAngleTOOff"]);
            }
            if (ds.Tables[1].Rows.Count > 0)
            {
                lblGroundTimeIntoM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTimeInto"]);
                lblGroundTimeOffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["GroundTimeOff"]);
                lblAirTimeM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["AirTimeOver"]);
                lblStrideLengthIntoM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLengthInto"]);
                lblStrideLengthOffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLengthOff"]);
                lblStrideLengthTotalM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["StrideLengthTotal"]);
                lblVelocityHurdleM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["Velocity"]);
                lblTouchdownDistanceIntoM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["COGDistanceInto"]);
                lblTouchdownDistanceOffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["COGDistanceOff"]);
                lblUpperLegAngleatTouchdownIntoM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULAngleTDInto"]);
                lblUpperLegAngleatTakeoffIntoM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULAngleTOInto"]);
                lblUpperLegAngleatTouchdownOffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULAngleTDOff"]);
                lblUpperLegAngleatTakeoffOffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["ULAngleTOOff"]);
                lblLeadLowerLegMinimumAngleIntoM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["LeadLegMinimumAngle"]);
                lblLeadLowerLegAngleatAnkleCrossIntoM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["LeadLegAngleAC"]);
                lblLowerLegAngleatTouchdownOffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleTDOff"]);
                lblLowerLegAngleatTakeoffOffM2.Text = Convert.ToString(ds.Tables[1].Rows[0]["LLAngleTOOff"]);
            }
            #region[initial values for right]
            if (!lblGroundTimeIntoF.Text.Equals("") && (!lblGroundTimeIntoM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblGroundTimeIntoF.Text) - Convert.ToSingle(lblGroundTimeIntoM2.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeIntoM2.ForeColor = Color.Red;
                else
                    lblGroundTimeIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeIntoM2.Text = "";
            }

            if (!lblGroundTimeOffF.Text.Equals("") && (!lblGroundTimeOffM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblGroundTimeOffF.Text) - Convert.ToSingle(lblGroundTimeOffM2.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeOffM2.ForeColor = Color.Red;
                else
                    lblGroundTimeOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeOffM2.Text = "";
            }
            if (!lblAirTimeF.Text.Equals("") && (!lblAirTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblAirTimeF.Text) - Convert.ToSingle(lblAirTimeM2.Text) >= Convert.ToSingle(.015))
                    lblAirTimeM2.ForeColor = Color.Red;
                else
                    lblAirTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblAirTimeM2.Text = "";
            }

            if (!lblStrideLengthIntoF.Text.Equals("") && (!lblStrideLengthIntoM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthIntoF.Text) - Convert.ToSingle(lblStrideLengthIntoM2.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthIntoM2.ForeColor = Color.Red;
                else
                    lblStrideLengthIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthIntoM2.Text = "";
            }

            if (!lblStrideLengthOffF.Text.Equals("") && (!lblStrideLengthOffM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthOffF.Text) - Convert.ToSingle(lblStrideLengthOffM2.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthOffM2.ForeColor = Color.Red;
                else
                    lblStrideLengthOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthOffM2.Text = "";
            }
            if (!lblStrideLengthTotalF.Text.Equals("") && (!lblStrideLengthTotalM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthTotalF.Text) - Convert.ToSingle(lblStrideLengthTotalM2.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthTotalM2.ForeColor = Color.Red;
                else
                    lblStrideLengthTotalM2.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthTotalM2.Text = "";
            }
            if (!lblVelocityHurdleF.Text.Equals("") && (!lblVelocityHurdleM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblVelocityHurdleF.Text) - Convert.ToSingle(lblVelocityHurdleM2.Text) <= Convert.ToSingle(-0.65))
                    lblVelocityHurdleM2.ForeColor = Color.Red;
                else
                    lblVelocityHurdleM2.ForeColor = Color.Black;
            }
            else
            {
                lblVelocityHurdleM2.Text = "";
            }
            if (!lblTouchdownDistanceIntoF.Text.Equals("") && (!lblTouchdownDistanceIntoM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTouchdownDistanceIntoF.Text) - Convert.ToSingle(lblTouchdownDistanceIntoM2.Text) >= Convert.ToSingle(.02))
                    lblTouchdownDistanceIntoM2.ForeColor = Color.Red;
                else
                    lblTouchdownDistanceIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblTouchdownDistanceIntoM2.Text = "";
            }

            if (!lblTouchdownDistanceOffF.Text.Equals("") && (!lblTouchdownDistanceOffM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTouchdownDistanceOffF.Text) - Convert.ToSingle(lblTouchdownDistanceOffM2.Text) >= Convert.ToSingle(.02))
                    lblTouchdownDistanceOffM2.ForeColor = Color.Red;
                else
                    lblTouchdownDistanceOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblTouchdownDistanceOffM2.Text = "";
            }
            if (!lblUpperLegAngleatTouchdownIntoF.Text.Equals("") && (!lblUpperLegAngleatTouchdownIntoM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTouchdownIntoF.Text) - Convert.ToInt16(lblUpperLegAngleatTouchdownIntoM2.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTouchdownIntoM2.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTouchdownIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTouchdownIntoM2.Text = "";
            }
            if (!lblUpperLegAngleatTakeoffIntoF.Text.Equals("") && (!lblUpperLegAngleatTakeoffIntoM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTakeoffIntoF.Text) - Convert.ToInt16(lblUpperLegAngleatTakeoffIntoM2.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTakeoffIntoM2.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTakeoffIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTakeoffIntoM2.Text = "";
            }

            if (!lblUpperLegAngleatTouchdownOffF.Text.Equals("") && (!lblUpperLegAngleatTouchdownOffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTouchdownOffF.Text) - Convert.ToInt16(lblUpperLegAngleatTouchdownOffM2.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTouchdownOffM2.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTouchdownOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTouchdownOffM2.Text = "";
            }
            if (!lblUpperLegAngleatTakeoffOffF.Text.Equals("") && (!lblUpperLegAngleatTakeoffOffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTakeoffOffF.Text) - Convert.ToInt16(lblUpperLegAngleatTakeoffOffM2.Text) <= Convert.ToInt16(-7))
                    lblUpperLegAngleatTakeoffOffM2.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTakeoffOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTakeoffOffM2.Text = "";
            }
            if (!lblLeadLowerLegMinimumAngleIntoF.Text.Equals("") && (!lblLeadLowerLegMinimumAngleIntoM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoF.Text) - Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoM2.Text) <= Convert.ToInt16(-7))
                    lblLeadLowerLegMinimumAngleIntoM2.ForeColor = Color.Red;
                else
                    lblLeadLowerLegMinimumAngleIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegMinimumAngleIntoM2.Text = "";
            }
            if (!lblLeadLowerLegAngleatAnkleCrossIntoF.Text.Equals("") && (!lblLeadLowerLegAngleatAnkleCrossIntoM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoF.Text) - Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoM2.Text) <= Convert.ToInt16(-7))
                    lblLeadLowerLegAngleatAnkleCrossIntoM2.ForeColor = Color.Red;
                else
                    lblLeadLowerLegAngleatAnkleCrossIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegMinimumAngleIntoM2.Text = "";
            }

            if (!lblLowerLegAngleatTouchdownOffF.Text.Equals("") && (!lblLowerLegAngleatTouchdownOffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLowerLegAngleatTouchdownOffF.Text) - Convert.ToInt16(lblLowerLegAngleatTouchdownOffM2.Text) <= Convert.ToInt16(-7))
                    lblLowerLegAngleatTouchdownOffM2.ForeColor = Color.Red;
                else
                    lblLowerLegAngleatTouchdownOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegMinimumAngleIntoM2.Text = "";
            }

            if (!lblLowerLegAngleatTakeoffOffF.Text.Equals("") && (!lblLowerLegAngleatTakeoffOffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLowerLegAngleatTakeoffOffF.Text) - Convert.ToInt16(lblLowerLegAngleatTakeoffOffM2.Text) >= Convert.ToInt16(7))
                    lblLowerLegAngleatTakeoffOffM2.ForeColor = Color.Red;
                else
                    lblLowerLegAngleatTakeoffOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegMinimumAngleIntoM2.Text = "";
            }
            #endregion[initial values for right]
        }
        if (rpath.Contains("Current"))
        {
            if (ds.Tables[1].Rows.Count > 0)
            {
                lblGroundTimeIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["GroundTimeInto"].ToString());
                lblGroundTimeOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["GroundTimeOff"]);
                lblAirTimeF.Text = Convert.ToString(ds.Tables[2].Rows[0]["AirTimeOver"]);
                lblStrideLengthIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["StrideLengthInto"]);
                lblStrideLengthOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["StrideLengthOff"]);
                lblStrideLengthTotalF.Text = Convert.ToString(ds.Tables[2].Rows[0]["StrideLengthTotal"]);
                lblVelocityHurdleF.Text = Convert.ToString(ds.Tables[2].Rows[0]["Velocity"]);
                lblTouchdownDistanceIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["COGDistanceInto"]);
                lblTouchdownDistanceOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["COGDistanceOff"]);
                lblUpperLegAngleatTouchdownIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["ULAngleTDInto"]);
                lblUpperLegAngleatTakeoffIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["ULAngleTOInto"]);
                lblUpperLegAngleatTouchdownOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["ULAngleTDOff"]);
                lblUpperLegAngleatTakeoffOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["ULAngleTOOff"]);
                lblLeadLowerLegMinimumAngleIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["LeadLegMinimumAngle"]);
                lblLeadLowerLegAngleatAnkleCrossIntoF.Text = Convert.ToString(ds.Tables[2].Rows[0]["LeadLegAngleAC"]);
                lblLowerLegAngleatTouchdownOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["LLAngleTDOff"]);
                lblLowerLegAngleatTakeoffOffF.Text = Convert.ToString(ds.Tables[2].Rows[0]["LLAngleTOOff"]);
            }
            if (ds.Tables[3].Rows.Count > 0)
            {
                lblGroundTimeIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTimeInto"]);
                lblGroundTimeOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["GroundTimeOff"]);
                lblAirTimeM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["AirTimeOver"]);
                lblStrideLengthIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLengthInto"]);
                lblStrideLengthOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLengthOff"]);
                lblStrideLengthTotalM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["StrideLengthTotal"]);
                lblVelocityHurdleM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["Velocity"]);
                lblTouchdownDistanceIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["COGDistanceInto"]);
                lblTouchdownDistanceOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["COGDistanceOff"]);
                lblUpperLegAngleatTouchdownIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULAngleTDInto"]);
                lblUpperLegAngleatTakeoffIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULAngleTOInto"]);
                lblUpperLegAngleatTouchdownOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULAngleTDOff"]);
                lblUpperLegAngleatTakeoffOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["ULAngleTOOff"]);
                lblLeadLowerLegMinimumAngleIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LeadLegMinimumAngle"]);
                lblLeadLowerLegAngleatAnkleCrossIntoM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LeadLegAngleAC"]);
                lblLowerLegAngleatTouchdownOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleTDOff"]);
                lblLowerLegAngleatTakeoffOffM2.Text = Convert.ToString(ds.Tables[3].Rows[0]["LLAngleTOOff"]);
            }
            #region[current values for right]
            if (!lblGroundTimeIntoF.Text.Equals("") && (!lblGroundTimeIntoM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblGroundTimeIntoF.Text) - Convert.ToSingle(lblGroundTimeIntoM2.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeIntoM2.ForeColor = Color.Red;
                else
                    lblGroundTimeIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeIntoM2.Text = "";
            }

            if (!lblGroundTimeOffF.Text.Equals("") && (!lblGroundTimeOffM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblGroundTimeOffF.Text) - Convert.ToSingle(lblGroundTimeOffM2.Text) >= Convert.ToSingle(.007))
                    lblGroundTimeOffM2.ForeColor = Color.Red;
                else
                    lblGroundTimeOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblGroundTimeOffM2.Text = "";
            }
            if (!lblAirTimeF.Text.Equals("") && (!lblAirTimeM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblAirTimeF.Text) - Convert.ToSingle(lblAirTimeM2.Text) >= Convert.ToSingle(.015))
                    lblAirTimeM2.ForeColor = Color.Red;
                else
                    lblAirTimeM2.ForeColor = Color.Black;
            }
            else
            {
                lblAirTimeM2.Text = "";
            }

            if (!lblStrideLengthIntoF.Text.Equals("") && (!lblStrideLengthIntoM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthIntoF.Text) - Convert.ToSingle(lblStrideLengthIntoM2.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthIntoM2.ForeColor = Color.Red;
                else
                    lblStrideLengthIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthIntoM2.Text = "";
            }

            if (!lblStrideLengthOffF.Text.Equals("") && (!lblStrideLengthOffM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthOffF.Text) - Convert.ToSingle(lblStrideLengthOffM2.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthOffM2.ForeColor = Color.Red;
                else
                    lblStrideLengthOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthOffM2.Text = "";
            }
            if (!lblStrideLengthTotalF.Text.Equals("") && (!lblStrideLengthTotalM2.Text.Equals("")))
            {
                if (Math.Abs(Convert.ToSingle(lblStrideLengthTotalF.Text) - Convert.ToSingle(lblStrideLengthTotalM2.Text)) >= Convert.ToSingle(.06))
                    lblStrideLengthTotalM2.ForeColor = Color.Red;
                else
                    lblStrideLengthTotalM2.ForeColor = Color.Black;
            }
            else
            {
                lblStrideLengthTotalM2.Text = "";
            }
            if (!lblVelocityHurdleF.Text.Equals("") && (!lblVelocityHurdleM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblVelocityHurdleF.Text) - Convert.ToSingle(lblVelocityHurdleM2.Text) <= Convert.ToSingle(-0.65))
                    lblVelocityHurdleM2.ForeColor = Color.Red;
                else
                    lblVelocityHurdleM2.ForeColor = Color.Black;
            }
            else
            {
                lblVelocityHurdleM2.Text = "";
            }
            if (!lblTouchdownDistanceIntoF.Text.Equals("") && (!lblTouchdownDistanceIntoM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTouchdownDistanceIntoF.Text) - Convert.ToSingle(lblTouchdownDistanceIntoM2.Text) >= Convert.ToSingle(.02))
                    lblTouchdownDistanceIntoM2.ForeColor = Color.Red;
                else
                    lblTouchdownDistanceIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblTouchdownDistanceIntoM2.Text = "";
            }

            if (!lblTouchdownDistanceOffF.Text.Equals("") && (!lblTouchdownDistanceOffM2.Text.Equals("")))
            {
                if (Convert.ToSingle(lblTouchdownDistanceOffF.Text) - Convert.ToSingle(lblTouchdownDistanceOffM2.Text) >= Convert.ToSingle(.02))
                    lblTouchdownDistanceOffM2.ForeColor = Color.Red;
                else
                    lblTouchdownDistanceOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblTouchdownDistanceOffM2.Text = "";
            }
            if (!lblUpperLegAngleatTouchdownIntoF.Text.Equals("") && (!lblUpperLegAngleatTouchdownIntoM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTouchdownIntoF.Text) - Convert.ToInt16(lblUpperLegAngleatTouchdownIntoM2.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTouchdownIntoM2.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTouchdownIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTouchdownIntoM2.Text = "";
            }
            if (!lblUpperLegAngleatTakeoffIntoF.Text.Equals("") && (!lblUpperLegAngleatTakeoffIntoM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTakeoffIntoF.Text) - Convert.ToInt16(lblUpperLegAngleatTakeoffIntoM2.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTakeoffIntoM2.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTakeoffIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTakeoffIntoM2.Text = "";
            }

            if (!lblUpperLegAngleatTouchdownOffF.Text.Equals("") && (!lblUpperLegAngleatTouchdownOffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTouchdownOffF.Text) - Convert.ToInt16(lblUpperLegAngleatTouchdownOffM2.Text) >= Convert.ToInt16(7))
                    lblUpperLegAngleatTouchdownOffM2.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTouchdownOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTouchdownOffM2.Text = "";
            }
            if (!lblUpperLegAngleatTakeoffOffF.Text.Equals("") && (!lblUpperLegAngleatTakeoffOffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblUpperLegAngleatTakeoffOffF.Text) - Convert.ToInt16(lblUpperLegAngleatTakeoffOffM2.Text) <= Convert.ToInt16(-7))
                    lblUpperLegAngleatTakeoffOffM2.ForeColor = Color.Red;
                else
                    lblUpperLegAngleatTakeoffOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblUpperLegAngleatTakeoffOffM2.Text = "";
            }
            if (!lblLeadLowerLegMinimumAngleIntoF.Text.Equals("") && (!lblLeadLowerLegMinimumAngleIntoM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoF.Text) - Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoM2.Text) <= Convert.ToInt16(-7))
                    lblLeadLowerLegMinimumAngleIntoM2.ForeColor = Color.Red;
                else
                    lblLeadLowerLegMinimumAngleIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegMinimumAngleIntoM2.Text = "";
            }
            if (!lblLeadLowerLegAngleatAnkleCrossIntoF.Text.Equals("") && (!lblLeadLowerLegAngleatAnkleCrossIntoM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoF.Text) - Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoM2.Text) <= Convert.ToInt16(-7))
                    lblLeadLowerLegAngleatAnkleCrossIntoM2.ForeColor = Color.Red;
                else
                    lblLeadLowerLegAngleatAnkleCrossIntoM2.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegMinimumAngleIntoM2.Text = "";
            }

            if (!lblLowerLegAngleatTouchdownOffF.Text.Equals("") && (!lblLowerLegAngleatTouchdownOffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLowerLegAngleatTouchdownOffF.Text) - Convert.ToInt16(lblLowerLegAngleatTouchdownOffM2.Text) <= Convert.ToInt16(-7))
                    lblLowerLegAngleatTouchdownOffM2.ForeColor = Color.Red;
                else
                    lblLowerLegAngleatTouchdownOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegMinimumAngleIntoM2.Text = "";
            }

            if (!lblLowerLegAngleatTakeoffOffF.Text.Equals("") && (!lblLowerLegAngleatTakeoffOffM2.Text.Equals("")))
            {
                if (Convert.ToInt16(lblLowerLegAngleatTakeoffOffF.Text) - Convert.ToInt16(lblLowerLegAngleatTakeoffOffM2.Text) >= Convert.ToInt16(7))
                    lblLowerLegAngleatTakeoffOffM2.ForeColor = Color.Red;
                else
                    lblLowerLegAngleatTakeoffOffM2.ForeColor = Color.Black;
            }
            else
            {
                lblLeadLowerLegMinimumAngleIntoM2.Text = "";
            }
            #endregion[current values for left]


        }
        // WriteObjectsToPageAjax();
    }

    private void VideoDisplay(string leftmovie, string rightmovie)
    {
        string lPath;
        string rPath;
        moviediv1.Visible = true;
        moviediv2.Visible = true;
        divsum.Visible = true;
        string pathright = Server.MapPath(rightMovie.FilePath);
        string pathleft = Server.MapPath(leftMovie.FilePath);
        //string pathsumm = Server.MapPath(summarymovie.FilePath);

        string strright = pathright.Replace("\\Users\\Users\\", "\\Users\\");
        string strleft = pathleft.Replace("\\Users\\Users\\", "\\Users\\");
        //string strsumm = pathsumm.Replace("\\Users\\Users\\", "\\Users\\");

        string[] patharrright = strright.Split('\\');
        string[] patharrleft = strleft.Split('\\');

        _child_id = DataRepository.CustomerProfileProvider.GetByCustomerId(customer.CustomerId)[0];
        int AthletesChildId = Convert.ToInt16(_child_id.InitialTeacher);
        int framescount;
        try
        {
            if (AthletesChildId != 1)
            {
                if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
                {
                    SprintTireText.Visible = true;
                    SprintIntro.Visible = false;
                    SummaryMessage.Visible = false;
                    lPath = Server.MapPath(".");
                    strleft = lPath + "\\" + "MovieFiles" + "\\" + "ModelSprint-Initial-Side.mp4";
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
                {
                    HurdleStepsTrialText.Visible = true;
                    HurdleStepsIntro.Visible = false;
                    //SprintTireText.Visible = true;
                    //SprintIntro.Visible = false;
                    SummaryMessage.Visible = false;
                    lPath = Server.MapPath(".");
                    strleft = lPath + "\\" + "MovieFiles" + "\\" + "ModelSprint-Initial-Side.mp4";
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Start"))
                {
                    StartTireText.Visible = true;
                    StartIntro.Visible = false;
                    SummaryMessage.Visible = false;
                    lPath = Server.MapPath(".");
                    strleft = lPath + "\\" + "MovieFiles" + "\\" + "ModelStart-Initial-Side.mp4";
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
                {
                    HurdleTireText.Visible = true;
                    HurdleIntro.Visible = false;
                    SummaryMessage.Visible = false;
                    lPath = Server.MapPath(".");
                    strleft = lPath + "\\" + "MovieFiles" + "\\" + "ModelHurdle-Side.mp4";
                }
                // obj1div.Visible = true;
                framescount = Getframes(strleft);
                HideSummary();
                obj1div.Visible = false;
                divsum.Visible = false;
                moviediv1.Visible = true;
                isLeftMovie = true;
            }
            else
            {
                framescount = Getframes(strleft);
                if (framescount == 0)
                {
                    obj1div.Visible = true;
                    moviediv1.Visible = true;
                    isLeftMovie = false;
                    if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
                    {
                        lPath = Server.MapPath(".");
                        strleft = lPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoSprint-Initial-Side.mp4";
                    }
                    else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
                    {
                        lPath = Server.MapPath(".");
                        strleft = lPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoSprint-Initial-Side.mp4";
                    }
                    else if (DropDownList2.SelectedItem.Text.Equals("Start"))
                    {
                        lPath = Server.MapPath(".");
                        strleft = lPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoStart-Initial-Side.mp4";
                    }
                    else if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
                    {
                        lPath = Server.MapPath(".");
                        strleft = lPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoHurdle-Initial-Side.mp4";
                    }
                }
                else
                {
                    obj1div.Visible = false;
                    moviediv1.Visible = true;
                    isLeftMovie = true;
                }
            }
        }
        catch (Exception ex)
        {
            obj1div.Visible = true;
            moviediv1.Visible = true;
            lPath = Server.MapPath(".");
            if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
            {
                strleft = lPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoSprint-Initial-Side.mp4";
            }
            else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
            {
                strleft = lPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoSprint-Initial-Side.mp4";
            }
            else if (DropDownList2.SelectedItem.Text.Equals("Start"))
            {
                strleft = lPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoStart-Initial-Side.mp4";
            }
            else if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
            {
                strleft = lPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoHurdle-Initial-Side.mp4";
            }
        }
        try
        {
            if (AthletesChildId != 1)
            {
                rPath = Server.MapPath(".");

                if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
                {
                    SprintTireText.Visible = true;
                    SprintIntro.Visible = false;
                    SummaryMessage.Visible = false;

                    strright = rPath + "\\" + "MovieFiles" + "\\" + "ModelSprint-Initial-Back.mp4";
                }

                else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
                {
                    HurdleStepsTrialText.Visible = true;
                    //SprintTireText.Visible = true;
                    //SprintIntro.Visible = false;
                    HurdleStepsIntro.Visible = false;
                    SummaryMessage.Visible = false;

                    strright = rPath + "\\" + "MovieFiles" + "\\" + "ModelSprint-Initial-Back.mp4";
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Start"))
                {
                    StartTireText.Visible = true;
                    StartIntro.Visible = false;
                    SummaryMessage.Visible = false;
                    strright = rPath + "\\" + "MovieFiles" + "\\" + "ModelStart-Initial-Back.mp4";
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
                {
                    HurdleTireText.Visible = true;
                    HurdleIntro.Visible = false;
                    SummaryMessage.Visible = false;
                    strright = rPath + "\\" + "MovieFiles" + "\\" + "ModelHurdle-Back.mp4";
                }
                framescount = Getframes(strright);
                HideSummary();
                moviediv2.Visible = true;
                // objdivsum.Visible = false;
                obj1div2.Visible = false;
                isRightMovie = true;
            }
            else
            {
                int framescount1 = Getframes(strright);
                if (framescount1 == 0)
                {
                    obj1div2.Visible = true;
                    moviediv2.Visible = true;
                    isRightMovie = false;
                    rPath = Server.MapPath(".");

                    if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
                    {
                        strright = rPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoSprint-Initial-Back.mp4";
                    }
                    else  if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
                    {
                        strright = rPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoSprint-Initial-Back.mp4";
                    }
                    else if (DropDownList2.SelectedItem.Text.Equals("Start"))
                    {
                        strright = rPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoStart-Initial-Back.mp4";
                    }
                    else if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
                    {
                        strright = rPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoHurdle-Initial-Back.mp4";
                    }
                }
                else
                {
                    obj1div2.Visible = false;
                    moviediv2.Visible = true;
                    isRightMovie = true;
                    //SmtpMail.SmtpServer = "localhost";
                    //SmtpMail.Send("dev@swingmodel.com", "dev@swingmodel.com", " Email notification for video request", "Video request from user : " + Label1.Text + " Video name: " + patharrright[4].ToString());
                }
            }
        }
        catch (Exception ex)
        {
            obj1div2.Visible = true;
            moviediv2.Visible = true;
            rPath = Server.MapPath(".");
            if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
            {
                strright = rPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoSprint-Initial-Back.mp4";
            }
            if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
            {
                strright = rPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoSprint-Initial-Back.mp4";
            }
            else if (DropDownList2.SelectedItem.Text.Equals("Start"))
            {
                strright = rPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoStart-Initial-Back.mp4";
            }
            else if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
            {
                strright = rPath + "\\" + "MovieFiles" + "\\" + "ModelNoVideoHurdle-Initial-Back.mp4";
            }
        }
    }

    private int Getframes(string fileName)
    {
        int x, z;
        try
        {
            SwfReader swfReader = null;

            swfReader = new SwfReader(fileName);// Create a swf stream reader
            Swf swf = swfReader.ReadSwf();	// Read the completed swf file         

            //Read headers infos
            string s = swf.Header.Frames.ToString();
            x = Convert.ToInt32(s);
            z = x / 2;
            return z;
        }
        catch (Exception ex)
        {
            ex.Message.ToString();
            return 0;
        }



    }
    //private string leftMoviePath = @"TestMovieFiles/SideFinal.swf";
    //private string rightMoviePath = @"TestMovieFiles/BackFinal.swf";

    //private void WriteObjectsToPage()
    //{
    //    JavaScriptSerializer js = new JavaScriptSerializer();
    //    string leftMovieString = js.Serialize(CreateSimpleMovieStructure(leftMovie));

    //    string rightMovieString = js.Serialize(CreateSimpleMovieStructure(rightMovie));

    //}

    private void WriteObjectsToPageAjax()
    {

        if (leftMovie == null && rightMovie == null)
        {
            return;
        }
        JavaScriptSerializer js = new JavaScriptSerializer();
        if (leftMovie != null)
        {
            string leftMovieString = js.Serialize(CreateSimpleMovieStructure(leftMovie));
            System.Web.UI.ScriptManager.RegisterClientScriptBlock(this.Page, this.Page.GetType(), "leftvar", "var leftMovie='" + leftMovieString + "';", true);
            System.Web.UI.ScriptManager.RegisterClientScriptBlock(this.Page, this.Page.GetType(), "leftvar", "var leftMoviePath='../" + leftMovie.FilePath + "'; var leftMovie='" + leftMovieString + "';", true);
        }
        if (rightMovie != null)
        {
            string rightMovieString = js.Serialize(CreateSimpleMovieStructure(rightMovie));
            System.Web.UI.ScriptManager.RegisterClientScriptBlock(this.Page, this.Page.GetType(), "rightvar", "var rightMovie='" + rightMovieString + "';", true);
            System.Web.UI.ScriptManager.RegisterClientScriptBlock(this.Page, this.Page.GetType(), "rightvar", "var rightMoviePath='../" + rightMovie.FilePath + "'; var rightMovie='" + rightMovieString + "';", true);
        }
        //System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "domready", "document.getElementById('square').innerHTML = 'Your instructor messages will appear here.';", true);
        //System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "domready", "document.getElementById('square').innerHTML = 'Your instructor messages will appear here.';__H = new com.acap.VideoPlayer();", true);



        //ScriptManager.RegisterStartupScript(this, this.GetType(), "FunctionForAllBtns", "FunctionForAllBtns(0);", true);
        // leftMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList1.SelectedValue));
        rightMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList3.SelectedValue));
        System.Web.UI.ScriptManager.RegisterClientScriptBlock(this.Page, this.Page.GetType(), "lessonDiffvar", "var isLessonDifferent='" + (leftMovie.LessonId == rightMovie.LessonId ? "0" : "1") + "';", true);
    }

    public class SimpleMovieClip
    {
        public int beginFrame;
        public int endFrame;
        public string[] errors;

    }

    public class SimpleMovie
    {
        public int id;
        public SimpleMovieClip[] clips = new SimpleMovieClip[10];
    }


    //private SimpleMovie CreateSimpleMovieStructure(Movie movie)
    private SimpleMovie CreateSimpleMovieStructure(Movie movie)
    {
        SimpleMovie sm = new SimpleMovie();
        if (movie != null)
        {
            sm.id = movie.MovieId;
            movie.MovieClipCollection.Sort("EndFrame ASC");
            for (int i = 0; i < movie.MovieClipCollection.Count; i++)
            //    for(int i = 1; i < 10; i++)
            {
                sm.clips[i] = CreateSimpleClipStructure(movie.MovieClipCollection[i], i);
            }
        }

        //Label6.Text = sm.clips[0].errors[0].ToString();
        //Label7.Text = sm.clips[1].errors[0].ToString();
        //Label8.Text = sm.clips[1].errors[0].ToString();
        return sm;

    }
    // public string getJson()
    // {
    //   var publicationTable = new List<object>{
    //   new []{ 31422,"Abilene Reporter News","Abilene","TX",false,"D",0},
    //   new []{ 313844,"Acadiana Weekly","Opelousas","LA",false,"W",1 },
    //   new []{ 527825,"Action Advertiser","Fond du Lac","WI",false,"W",2}
    //};
    //     return (new JavaScriptSerializer()).Serialize(publicationTable);
    // }

    private SimpleMovieClip CreateSimpleClipStructure(MovieClip movieClip, int step)
    {
        DataRepository.MovieClipProvider.DeepLoad(movieClip);
        SimpleMovieClip smc = new SimpleMovieClip();

        //string ErrorString = returnErrorMessage(2);

        //string[] myarray = new string[ErrorString.Length];

        //    for (int e = 0; e < ErrorString.Length; e++)
        //        {
        //            myarray[e] = ErrorString[e].ToString();

        //        }
        // smc.errors =returnErrorMessage(2);
        smc.beginFrame = movieClip.BeginFrame;
        smc.endFrame = movieClip.EndFrame;

        CustomerProfileQuery customerQuery = new CustomerProfileQuery();
        customerQuery.AppendEquals(CustomerProfileColumn.CustomerId, customer.CustomerId.ToString());
        TList<CustomerProfile> customerProfile = DataRepository.CustomerProfileProvider.Find(customerQuery.GetParameters());
        int TeacherId = customerProfile[0].Teacher;
        int CustomerSite = customerProfile[0].CustomerSite;
        TList<ErrorDrill> errordrills = new TList<ErrorDrill>();
        DataRepository.MovieErrorProvider.DeepLoad(movieClip.MovieErrorCollection);

        if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
        {
            string[] arrErrorMessages = returnErrorMessage(step + 1).Split(new string[] { "#!#" }, StringSplitOptions.None);
            smc.errors = new string[arrErrorMessages.Count()];
            for (int i = 0; i < arrErrorMessages.Count(); i++)
            {
                smc.errors[i] = arrErrorMessages[i];
            }
        }
        else  if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
        {
            string[] arrErrorMessages = returnErrorMessageHurdleSteps(step + 1).Split(new string[] { "#!#" }, StringSplitOptions.None);
            smc.errors = new string[arrErrorMessages.Count()];
            for (int i = 0; i < arrErrorMessages.Count(); i++)
            {
                smc.errors[i] = arrErrorMessages[i];
            }
        }
        else if (DropDownList2.SelectedItem.Text.Equals("Start"))
        {
            string[] arrErrorMessages = returnErrorMessageForStart(step + 1).Split(new string[] { "#!#" }, StringSplitOptions.None);
            smc.errors = new string[arrErrorMessages.Count()];
            for (int i = 0; i < arrErrorMessages.Count(); i++)
            {
                smc.errors[i] = arrErrorMessages[i];
            }
        }
        else
        {
            string[] arrErrorMessages = returnErrorMessageForHurdle(step + 1).Split(new string[] { "#!#" }, StringSplitOptions.None);
            smc.errors = new string[arrErrorMessages.Count()];
            for (int i = 0; i < arrErrorMessages.Count(); i++)
            {
                smc.errors[i] = arrErrorMessages[i];
            }
        }

        //string[] strerrors = smc.errors[0].ToString().Split('.');

        //smc.errors[0] = strerrors[0];

        //try
        //{

        //    errordrills = DataRepository.ErrorDrillProvider.GetBySwingErrorId(movieClip.MovieErrorCollection[i].SwingErrorIdSource.SwingErrorId);
        //    if (errordrills.Count > 0)
        //    {
        //        smc.errors[i] = "<a href=javascript:OpenWindow('MyDrills.aspx?ErrorId=" +
        //            movieClip.MovieErrorCollection[i].SwingErrorIdSource.SwingErrorId +
        //            "&TeacherId=" + TeacherId +
        //            "&CustomerSiteId=" + CustomerSite + "') >" +
        //            movieClip.MovieErrorCollection[i].SwingErrorIdSource.TextDescription + "</a>";
        //    }
        //    else
        //    {
        //        smc.errors[i] = returnErrorMessage(i);

        //        smc.errors[i] = movieClip.MovieErrorCollection[i].SwingErrorIdSource.TextDescription;


        //    }
        //}
        //catch (Exception ex)
        //{
        //    Response.Write(ex.Message);
        //}
        //}
        return smc;

    }

    private TList<Movie> GetMovies(int lessonTypeId)
    {
        TList<Movie> movies = new TList<Movie>();
        DataRepository.CustomerProvider.DeepLoad(customer);
        LessonQuery lessonQuery = new LessonQuery();
        lessonQuery.AppendEquals(string.Empty, LessonColumn.CustomerId, customer.CustomerId.ToString());
        lessonQuery.AppendEquals("AND", LessonColumn.LessonTypeId, lessonTypeId.ToString());
        TList<Lesson> lessons = DataRepository.LessonProvider.Find(lessonQuery.GetParameters());
        foreach (Lesson l in lessons)
        {
            DataRepository.LessonProvider.DeepLoad(l);
            foreach (Movie m in l.MovieCollection)
            {
                DataRepository.MovieProvider.DeepLoad(m);
                movies.Add(m);
            }
        }
        // movies.Sort("MovieType ASC, DateRecorded DESC");
        movies.Sort("DateRecorded DESC");
        return movies;
    }

    private void LoadDefaultData()
    {
        LessonQuery lessonQuery = new LessonQuery();
        lessonQuery.AppendEquals(LessonColumn.CustomerId, customer.CustomerId.ToString());
        TList<Lesson> lessons = DataRepository.LessonProvider.Find(lessonQuery.GetParameters(), "LessonDate DESC");
        LessonTypeLookup lookUp = null;
        // lessons.Sort();
        Dictionary<string, LessonTypeLookup> lessonTypeLookUp = new Dictionary<string, LessonTypeLookup>();
        foreach (Lesson l in lessons)
        {
            DataRepository.LessonProvider.DeepLoad(l);
            lookUp = DataRepository.LessonTypeLookupProvider.GetByLessonTypeId(l.LessonTypeId);
            if (lookUp != null && !lessonTypeLookUp.ContainsKey(lookUp.LessonTypeText))
            {
                lessonTypeLookUp.Add(lookUp.LessonTypeText, lookUp);
            }
        }
        if (lessons.Count > 0)
        {
            foreach (LessonTypeLookup l in lessonTypeLookUp.Values)
            {
                DropDownList2.Items.Add(new ListItem(l.LessonTypeText, l.LessonTypeId.ToString()));
            }
            if (!DropDownList1.Enabled) DropDownList1.Enabled = true;
            if (!DropDownList3.Enabled) DropDownList3.Enabled = true;
            LoadVideoList();
            //LoadRightDropDown();
        }
        else
        {
            DropDownList1.Enabled = false;
            DropDownList3.Enabled = false;
        }
    }

    private void LoadVideoList()
    {
        TList<Movie> movies = GetMovies(int.Parse(DropDownList2.SelectedValue));
        if (movies.Count > 1)
        {
            _child_id = DataRepository.CustomerProfileProvider.GetByCustomerId(customer.CustomerId)[0];
            int AthletesChildId = Convert.ToInt16(_child_id.InitialTeacher);

            DropDownList1.Attributes.Add("onclick", "RefreshDropdowns();");

            if (DropDownList1.Items.Count > 0) DropDownList1.Items.Clear();
            // for left hand dropdown
            foreach (Movie m in movies)
            {
                string location = sae.SelectLessonlocation(m.LessonId.ToString());
                string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();

                if (m.MovieType == 2) //A value of 2 means the video is a Side View – Final video
                {
                    ListItem li = new ListItem(date + "-" + location + "-" + "Model View – Final", m.MovieId.ToString(), true);
                    DropDownList1.Items.Add(li);
                }
                if (m.MovieType == 0) //A value of 0 means the video is a Side View – Initial video
                {
                    ListItem li = new ListItem(date + "-" + location + "-" + "Model View – Initial", m.MovieId.ToString(), true);
                    if (DropDownList1.Items.Count > 0)
                    {
                        if (DropDownList1.Items.Contains(DropDownList1.Items.FindByValue(m.MovieId.ToString())))
                            AlreadyExists = true;
                    }
                    if (!AlreadyExists)
                    {
                        DropDownList1.Items.Add(li);
                    }
                }
            }
            // for left hand dropdown
            foreach (Movie m in movies)
            {
                string location = sae.SelectLessonlocation(m.LessonId.ToString());
                string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();
                if (m.MovieType == 3) //a value of 3 means the video is a Back View – Final video
                {
                    ListItem li = new ListItem(date + "-" + location + "-" + "Video View – Final", m.MovieId.ToString(), true);
                    if (DropDownList1.Items.Count > 0)
                    {
                        DropDownList1.Items.Contains(DropDownList1.Items.FindByValue(li.ToString()));
                        AlreadyExists = true;
                    }
                    if (!AlreadyExists)
                    {
                        DropDownList1.Items.Add(li);
                    }
                    DropDownList1.Items.Add(li);
                }
                if (m.MovieType == 1) //A value of 1 means the video is a Back View – Initial video
                {
                    ListItem li = new ListItem(date + "-" + location + "-" + "Video View – Initial", m.MovieId.ToString(), true);
                    DropDownList1.Items.Add(li);
                }
            }
            int ddl1_items = DropDownList1.Items.Count;
            int half = ddl1_items / 2;
            for (int cnt = half; cnt < DropDownList1.Items.Count; cnt++)
            {
                DropDownList1.Items[cnt].Attributes.CssStyle.Add("color", "red");
            }

            // for right hand drop down
            leftMovie = movies[0];
            LoadRightDropDown();

            ////DropDownList1.SelectedValue = leftMovie.MovieId.ToString();
            DropDownList1.SelectedIndex = 0;
            DropDownList1_SelectedIndexChanged(null, null);

        }
        else
        {
            if (DropDownList1.Items.Count > 0)
                DropDownList1.Items.Clear();
            if (DropDownList3.Items.Count > 0)
                DropDownList3.Items.Clear();
        }

        // obj1div.Visible=false;
    }
    protected void DropDownList1_SelectedIndexChanged(object sender, EventArgs e)
    {
        _child_id = DataRepository.CustomerProfileProvider.GetByCustomerId(customer.CustomerId)[0];
        int AthletesChildId = Convert.ToInt16(_child_id.InitialTeacher);

        if (DropDownList1.SelectedValue != "")
        {
            //leftMovie = DataRepository.MovieProvider.GetByMovieId((AthletesChildId == 1 ? int.Parse(DropDownList1.SelectedValue) : 111));
            //rightMovie = DataRepository.MovieProvider.GetByMovieId((AthletesChildId == 1 ? int.Parse(DropDownList3.SelectedValue) : 111));

            leftMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList1.SelectedValue));
            rightMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList3.SelectedValue));


            string Leftlocation = sae.SelectLessonlocation(leftMovie.LessonId.ToString());
            string Rightlocation = sae.SelectLessonlocation(rightMovie.LessonId.ToString());

            //string Ldate = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
            //string Rdate = rightMovie.DateRecorded.Month.ToString() + "/" + rightMovie.DateRecorded.Day.ToString() + "/" + rightMovie.DateRecorded.Year.ToString();
            string Ldate = leftMovie.DateRecorded.ToString();
            string Rdate = rightMovie.DateRecorded.ToString();

            int ddl1_items = DropDownList1.Items.Count;
            int half = ddl1_items / 2;
            for (int cnt = half; cnt < DropDownList1.Items.Count; cnt++)
            {
                DropDownList1.Items[cnt].Attributes.CssStyle.Add("color", "red");
            }
            if (DropDownList1.SelectedIndex > half)            //when red value is not selected.
            {
                if (((DropDownList1.SelectedItem.Text.EndsWith("Initial") && DropDownList3.SelectedItem.Text.EndsWith("Initial")) ||
                      (DropDownList1.SelectedItem.Text.EndsWith("Final") && DropDownList3.SelectedItem.Text.EndsWith("Final")))

                && (Rdate == Ldate && Rightlocation == Leftlocation))
                {
                    if (AthletesChildId == 1)
                    {
                        LoadSummary();
                    }
                    else
                    {
                        NonTireAttributes(leftMovie.LessonId);
                        Label15.Text = "Videos only available for Tier 1 Athletes";
                        Label15.Visible = true;
                        Label9.Visible = false;
                    }
                    TireOneAttributes(leftMovie.LessonId);
                    isComparison = false;
                    WriteObjectsToPageAjax();
                    VideoDisplay(leftMovie.FilePath, rightMovie.FilePath);

                    System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "OtherKey1", "MakeSprintHeight();", true);
                    //  System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "comparison1", "isComparison = false;", true);
                }
                else
                {
                    isComparison = true;
                    HideSummary();
                    Label14.Text = "Comparison Mode";
                    Label14.Visible = true;
                    Label2.Visible = false;
                    LoadRightDropDown();
                    string LVideopath = leftMovie.FilePath;
                    string RVideopath = rightMovie.FilePath;
                    ComparisonAttributes(leftMovie.LessonId, rightMovie.LessonId, LVideopath, RVideopath);
                    //  System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "domready", "document.getElementById('square').innerHTML = 'No Errors Displayed In Session Comparisons.';", true);

                    WriteObjectsToPageAjax();
                    VideoDisplay(leftMovie.FilePath, rightMovie.FilePath);
                    AthleteChildSendMail();
                    // System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "functionfor2", "FunctionForAllBtns(2);", true);
                    //  System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "comparison2", "isComparison = true;", true);

                    MsgDiv2.Visible = false;
                    //Label13.Text = "No Summary Video Displayed In Comparison Mode";
                    //Label13.Visible = true;
                    //Label10.Visible = false;
                    //Label8.Visible = false;
                    // Label9.Visible = false;

                    // DropDownList1.Attributes.Add("onclick", "RefreshDropdowns();");
                }
            }
            else
            {
                LoadRightDropDown();
                if (AthletesChildId == 1)
                {
                    TireOneAttributes(leftMovie.LessonId);
                }
                else
                {
                    NonTireAttributes(leftMovie.LessonId);
                }
                LoadSummary();
                WriteObjectsToPageAjax();
                VideoDisplay(leftMovie.FilePath, rightMovie.FilePath);
                //System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "waitindicatior", "waitindicatior();", true);
                System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "comparison3", "isComparison = false;", true);

                AthleteChildSendMail();

                //Label11.Visible = false;
                //Label12.Visible = false;

                int ddl12_items1 = DropDownList1.Items.Count;
                int half2 = ddl1_items / 2;
                for (int cnt = half2; cnt < DropDownList1.Items.Count; cnt++)
                {
                    DropDownList1.Items[cnt].Attributes.CssStyle.Add("color", "red");
                }
                // DropDownList1.Attributes.Add("onclick", "RefreshDropdowns();");
            }
            // System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "waitindicatior", "waitindicatior();", true);
        }

        if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
        {
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(2);", true);
            btnEight.Style.Add("display", "none");
            btnNine.Style.Add("display", "none");
            btnTen.Style.Add("display", "none");
            btnSeven.Style.Add("display", "block");
            btnSeven.Attributes["style"] = String.Format("margin-bottom:0px;");
        }
        else if (DropDownList2.SelectedItem.Text.Equals("Start"))
        {
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(0);", true);
            btnEight.Style.Add("display", "block");
            btnEight.Attributes["style"] = String.Format("margin-bottom:0px;");
            btnNine.Style.Add("display", "none");
            btnSeven.Style.Add("display", "block");
            btnSeven.Attributes["style"] = String.Format("margin-bottom:0px;");
            btnTen.Style.Add("display", "none");
        }


        else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
        {
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(2);", true);
            btnEight.Style.Add("display", "none");
            btnNine.Style.Add("display", "none");
            btnTen.Style.Add("display", "none");
            btnSeven.Style.Add("display", "block");
            btnSeven.Attributes["style"] = String.Format("margin-bottom:0px;");
        }
        else
        {
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(1);", true);

            btnSeven.Style.Add("display", "none");
            btnEight.Style.Add("display", "none");
            btnNine.Style.Add("display", "none");
            btnTen.Style.Add("display", "none");
        }
    }


    private void LoadRightDropDown()
    {
        string rightDate;
        TList<Movie> movies = GetMovies(int.Parse(DropDownList2.SelectedValue));
        if (DropDownList3.Items.Count > 0) DropDownList3.Items.Clear();
        movies.Sort("DateRecorded DESC");
        #region[Model View – Initial]
        if (DropDownList1.SelectedItem.Text.EndsWith("Model View – Initial")) // for 0
        {
            foreach (Movie m in movies)
            {
                string location = sae.SelectLessonlocation(m.LessonId.ToString());
                // string date = m.DateRecorded.ToString();//.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();
                string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();
                if (m.MovieType == 1 && m != leftMovie && m.DateRecorded.Equals(leftMovie.DateRecorded))
                {
                    ListItem item = new ListItem(date + "-" + location + " Video View – Initial", m.MovieId.ToString(), true);
                    DropDownList3.Items.Add(item);
                }
            }
            foreach (Movie m in movies)
            {
                string location = sae.SelectLessonlocation(m.LessonId.ToString());
                string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();
                if (m.MovieType == 0 && m != leftMovie)
                {
                    ListItem item = new ListItem(date + "-" + location + " Model View – Initial", m.MovieId.ToString(), true);
                    DropDownList3.Items.Add(item);
                }
                if (m.MovieType == 2 && m != leftMovie)
                {
                    ListItem item = new ListItem(date + "-" + location + " Model View – Final", m.MovieId.ToString(), true);
                    DropDownList3.Items.Add(item);
                }
            }
        }
        #endregion[Model View – Initial]
        #region[Video view initial]
        if (DropDownList1.SelectedItem.Text.EndsWith("Video View – Initial")) // for 1
        {
            foreach (Movie m in movies)
            {
                string location = sae.SelectLessonlocation(m.LessonId.ToString());
                string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();
                rightDate = rightMovie.DateRecorded.Month.ToString() + "/" + rightMovie.DateRecorded.Day.ToString() + "/" + rightMovie.DateRecorded.Year.ToString();
                if (rightMovie.MovieType == 1 && m.MovieType == 1 && date.Equals(rightDate) &&
                   leftMovie.FilePath.Contains("Video") == m.FilePath.Contains("Video"))
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Video View – Initial", m.MovieId.ToString(), true);
                    firstMovie = Convert.ToInt32(item.Value);
                    DropDownList3.Items.Add(item);
                    break;
                }

                if (rightMovie.MovieType == 3 && m.MovieType == 3 && date.Equals(rightDate) &&
                 leftMovie.FilePath.Contains("Video") == m.FilePath.Contains("Video"))
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Video View – Final", m.MovieId.ToString(), true);
                    firstMovie = Convert.ToInt32(item.Value);
                    DropDownList3.Items.Add(item);
                    break;
                }

                if (rightMovie.MovieType == 2 && m.MovieType == 3 && date.Equals(rightDate) &&
                leftMovie.FilePath.Contains("Video") == m.FilePath.Contains("Video"))
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Video View – Final", m.MovieId.ToString(), true);
                    firstMovie = Convert.ToInt32(item.Value);
                    DropDownList3.Items.Add(item);
                    break;
                }
                if (rightMovie.MovieType == 0 && m.MovieType == 1 && date.Equals(rightDate) &&
                leftMovie.FilePath.Contains("Video") == m.FilePath.Contains("Video"))
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Video View – Final", m.MovieId.ToString(), true);
                    firstMovie = Convert.ToInt32(item.Value);
                    DropDownList3.Items.Add(item);
                    break;
                }
            }

            //foreach (Movie m in movies)
            //{
            //    if (m.MovieType == 0)
            //    {
            //        if (firstMovie != m.MovieId)
            //        {
            //            ListItem item = new ListItem(m.DateRecorded + " Model View – Initial", m.MovieId.ToString(), true);
            //            DropDownList3.Items.Add(item);
            //        }
            //    }
            //    else if (m.MovieType == 2)
            //    {
            //        if (firstMovie != m.MovieId)
            //        {
            //            ListItem item = new ListItem(m.DateRecorded + " Model View – Final", m.MovieId.ToString(), true);
            //            DropDownList3.Items.Add(item);
            //        }
            //    }
            //}

            foreach (Movie m in movies)
            {
                string location = sae.SelectLessonlocation(m.LessonId.ToString());
                string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();

                if (m.MovieType == 1 && m != leftMovie && m.DateRecorded.Equals(leftMovie.DateRecorded))
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Video View – Initial", m.MovieId.ToString(), true);
                    DropDownList3.Items.Add(item);
                }
            }
            foreach (Movie m in movies)
            {
                string location = sae.SelectLessonlocation(m.LessonId.ToString());
                string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();
                if (m.MovieType == 0 && m != leftMovie)
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Model View – Initial", m.MovieId.ToString(), true);
                    DropDownList3.Items.Add(item);
                }
                if (m.MovieType == 2 && m != leftMovie)
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Model View – Final", m.MovieId.ToString(), true);
                    DropDownList3.Items.Add(item);
                }
            }
        }
        #endregion[Video view initial]
        #region[Model view Final]
        if (DropDownList1.SelectedItem.Text.EndsWith("Model View – Final")) // for 2
        {
            foreach (Movie m in movies)
            {

                string location = sae.SelectLessonlocation(m.LessonId.ToString());
                string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();

                if (m.MovieType == 3 && m != leftMovie && m.DateRecorded.Equals(leftMovie.DateRecorded))
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Video View – Final", m.MovieId.ToString(), true);
                    DropDownList3.Items.Add(item);
                }
            }
            foreach (Movie m in movies)
            {
                string location = sae.SelectLessonlocation(m.LessonId.ToString());
                string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();
                if (m.MovieType == 2 && m != leftMovie)
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Model View – Final", m.MovieId.ToString(), true);

                    DropDownList3.Items.Add(item);
                }
                if (m.MovieType == 0 && m != leftMovie)
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Model View – Initial", m.MovieId.ToString(), true);
                    DropDownList3.Items.Add(item);
                }
            }
        }
        #endregion[Model view Final]
        #region[Video view Final]
        if (DropDownList1.SelectedItem.Text.EndsWith("Video View – Final")) // for 3
        {
            foreach (Movie m in movies)
            {
                string location = sae.SelectLessonlocation(m.LessonId.ToString());
                string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();
                rightDate = rightMovie.DateRecorded.Month.ToString() + "/" + rightMovie.DateRecorded.Day.ToString() + "/" + rightMovie.DateRecorded.Year.ToString();
                if (rightMovie.MovieType == 1 && m.MovieType == 1 && date.Equals(rightDate) &&
                   leftMovie.FilePath.Contains("Video") == m.FilePath.Contains("Video"))
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Video View – Initial", m.MovieId.ToString(), true);
                    firstMovie = Convert.ToInt32(item.Value);
                    DropDownList3.Items.Add(item);
                    break;
                }
                if (rightMovie.MovieType == 3 && m.MovieType == 3 && date.Equals(rightDate) &&
                 leftMovie.FilePath.Contains("Video") == m.FilePath.Contains("Video"))
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Video View – Final", m.MovieId.ToString(), true);
                    firstMovie = Convert.ToInt32(item.Value);
                    DropDownList3.Items.Add(item);
                    break;
                }
                if (rightMovie.MovieType == 2 && m.MovieType == 3 && date.Equals(rightDate) &&
                leftMovie.FilePath.Contains("Video") == m.FilePath.Contains("Video"))
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Video View – Final", m.MovieId.ToString(), true);
                    firstMovie = Convert.ToInt32(item.Value);
                    DropDownList3.Items.Add(item);
                    break;
                }
                if (rightMovie.MovieType == 0 && m.MovieType == 1 && date.Equals(rightDate) &&
                leftMovie.FilePath.Contains("Video") == m.FilePath.Contains("Video"))
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Video View – Final", m.MovieId.ToString(), true);
                    firstMovie = Convert.ToInt32(item.Value);
                    DropDownList3.Items.Add(item);
                    break;
                }
            }

            //foreach (Movie m in movies)
            //{
            //    if (m.MovieType == 0)
            //    {
            //        if (firstMovie != m.MovieId)
            //        {
            //            ListItem item = new ListItem(m.DateRecorded + " Model View – Initial", m.MovieId.ToString(), true);
            //            DropDownList3.Items.Add(item);
            //        }
            //    }
            //    else if (m.MovieType == 2)
            //    {
            //        if (firstMovie != m.MovieId)
            //        {
            //            ListItem item = new ListItem(m.DateRecorded + " Model View – Final", m.MovieId.ToString(), true);
            //            DropDownList3.Items.Add(item);
            //        }
            //    }
            //}
            //foreach (Movie m in movies)
            //{
            //    string location = sae.SelectLessonlocation(m.LessonId.ToString());
            //    string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();
            //    if (m.MovieType == 1 && m != leftMovie && m.DateRecorded.Equals(leftMovie.DateRecorded))
            //    {
            //        ListItem item = new ListItem(date + "-" + location + "-" + " Video View – Initial", m.MovieId.ToString(), true);
            //        DropDownList3.Items.Add(item);
            //    }
            //}
            foreach (Movie m in movies)
            {
                string location = sae.SelectLessonlocation(m.LessonId.ToString());
                string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();
                if (m.MovieType == 0 && m != leftMovie)
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Model View – Initial", m.MovieId.ToString(), true);
                    DropDownList3.Items.Add(item);
                }
                if (m.MovieType == 2 && m != leftMovie)
                {
                    ListItem item = new ListItem(date + "-" + location + "-" + " Model View – Final", m.MovieId.ToString(), true);
                    DropDownList3.Items.Add(item);
                }
            }
        }
        #endregion[Video view Final]

        if (DropDownList3.Items.Count > 0)
        {
            //DropDownList3.ForeColor = Color.Red;
            DropDownList3.SelectedIndex = 0;
            rightMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList3.SelectedValue));

            _child_id = DataRepository.CustomerProfileProvider.GetByCustomerId(customer.CustomerId)[0];
            int AthletesChildId = Convert.ToInt16(_child_id.InitialTeacher);

            if (AthletesChildId == 1)
            {
                //  LoadSummary();
            }
            else
            {
                if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
                {
                    SprintTireText.Visible = true;
                    SummaryMessage.Visible = false;
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
                {
                    HurdleStepsTrialText.Visible = true;
                    //SprintTireText.Visible = true;
                    SummaryMessage.Visible = false;
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Start"))
                {
                    StartTireText.Visible = true;
                    StartIntro.Visible = false;
                    SummaryMessage.Visible = false;
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
                {
                    HurdleTireText.Visible = true;
                    HurdleIntro.Visible = false;
                    SummaryMessage.Visible = false;
                }
                Label15.Text = "Videos only available for Tier 1 Athletes";
                Label15.Visible = true;
                Label9.Visible = false;
            }

        }
    }
    private void LoadLeftDropDown()
    {
        TList<Movie> movies = GetMovies(int.Parse(DropDownList2.SelectedValue));
        if (movies.Count > 1)
        {
            _child_id = DataRepository.CustomerProfileProvider.GetByCustomerId(customer.CustomerId)[0];
            int AthletesChildId = Convert.ToInt16(_child_id.InitialTeacher);
            if (DropDownList1.Items.Count > 0) DropDownList1.Items.Clear();
            #region[Model View – Initial]
            if (DropDownList3.SelectedItem.Text.EndsWith("Model View – Initial")) // for 0
            {
                foreach (Movie m in movies)
                {
                    string location = sae.SelectLessonlocation(m.LessonId.ToString());
                    string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();

                    //  string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();
                    string leftDate = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();

                    if (leftMovie.MovieType == 0 && m.MovieType == 0 && date.Equals(leftDate) &&
                       rightMovie.FilePath.Contains("Model") == m.FilePath.Contains("Model"))
                    {
                        ListItem item = new ListItem(date + "-" + location + "-" + "Model View – Initial", m.MovieId.ToString(), true);
                        firstMovie = Convert.ToInt32(item.Value);
                        DropDownList1.Items.Add(item);
                        break;
                    }
                    if (leftMovie.MovieType == 2 && m.MovieType == 2 && date.Equals(leftDate) &&
                     rightMovie.FilePath.Contains("Model") == m.FilePath.Contains("Model"))
                    {
                        ListItem item = new ListItem(date + "-" + location + "-" + "Model View – Final", m.MovieId.ToString(), true);
                        firstMovie = Convert.ToInt32(item.Value);
                        DropDownList1.Items.Add(item);
                        break;
                    }
                    if (leftMovie.MovieType == 3 && m.MovieType == 2 && date.Equals(leftDate) &&
                      rightMovie.FilePath.Contains("Model") == m.FilePath.Contains("Model"))
                    {
                        ListItem item = new ListItem(date + "-" + location + "-" + "Model View – Final", m.MovieId.ToString(), true);
                        firstMovie = Convert.ToInt32(item.Value);
                        DropDownList1.Items.Add(item);
                        break;
                    }
                    if (leftMovie.MovieType == 1 && m.MovieType == 0 && date.Equals(leftDate) &&
                      rightMovie.FilePath.Contains("Model") == m.FilePath.Contains("Model"))
                    {
                        ListItem item = new ListItem(date + "-" + location + "-" + "Model View – Initial", m.MovieId.ToString(), true);
                        firstMovie = Convert.ToInt32(item.Value);
                        DropDownList1.Items.Add(item);
                        break;
                    }
                }
            }
            #endregion[Model View – Initial]

            #region[Model View – Final]
            if (DropDownList3.SelectedItem.Text.EndsWith("Model View – Final")) // for 0
            {
                foreach (Movie m in movies)
                {
                    string location = sae.SelectLessonlocation(m.LessonId.ToString());
                    string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();
                    string leftDate = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();

                    if (leftMovie.MovieType == 0 && m.MovieType == 0 && date.Equals(leftDate) &&
                       rightMovie.FilePath.Contains("Model") == m.FilePath.Contains("Model"))
                    {
                        ListItem item = new ListItem(date + "-" + location + "-" + "Model View – Initial", m.MovieId.ToString(), true);
                        firstMovie = Convert.ToInt32(item.Value);
                        DropDownList1.Items.Add(item);
                        break;
                    }
                    if (leftMovie.MovieType == 2 && m.MovieType == 2 && date.Equals(leftDate) &&
                     rightMovie.FilePath.Contains("Model") == m.FilePath.Contains("Model"))
                    {
                        ListItem item = new ListItem(date + "-" + location + "-" + "Model View – Final", m.MovieId.ToString(), true);
                        firstMovie = Convert.ToInt32(item.Value);
                        DropDownList1.Items.Add(item);
                        break;
                    }
                    if (leftMovie.MovieType == 3 && m.MovieType == 2 && date.Equals(leftDate) &&
                    rightMovie.FilePath.Contains("Model") == m.FilePath.Contains("Model"))
                    {
                        ListItem item = new ListItem(date + "-" + location + "-" + "Model View – Final", m.MovieId.ToString(), true);
                        firstMovie = Convert.ToInt32(item.Value);
                        DropDownList1.Items.Add(item);
                        break;
                    }
                    if (leftMovie.MovieType == 1 && m.MovieType == 0 && date.Equals(leftDate) &&
                      rightMovie.FilePath.Contains("Model") == m.FilePath.Contains("Model"))
                    {
                        ListItem item = new ListItem(date + "-" + location + "-" + "Model View – Initial", m.MovieId.ToString(), true);
                        firstMovie = Convert.ToInt32(item.Value);
                        DropDownList1.Items.Add(item);
                        break;
                    }
                }
            }
            #endregion[Model View – Final]

            foreach (Movie m in movies)
            {
                string location = sae.SelectLessonlocation(m.LessonId.ToString());
                string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();
                if (m.MovieType == 2)
                {
                    if (firstMovie != m.MovieId)
                    {
                        ListItem item = new ListItem(date + "-" + location + " Model View – Final", m.MovieId.ToString(), true);
                        DropDownList1.Items.Add(item);
                    }
                }
                else if (m.MovieType == 0)
                {
                    if (firstMovie != m.MovieId)
                    {
                        ListItem item = new ListItem(date + "-" + location + " Model View – Initial", m.MovieId.ToString(), true);
                        DropDownList1.Items.Add(item);
                    }
                }
            }
            foreach (Movie m in movies)
            {
                string location = sae.SelectLessonlocation(m.LessonId.ToString());
                string date = m.DateRecorded.Month.ToString() + "/" + m.DateRecorded.Day.ToString() + "/" + m.DateRecorded.Year.ToString();
                if (m.MovieType == 3)
                {
                    if (firstMovie != m.MovieId)
                    {
                        ListItem item = new ListItem(date + "-" + location + " Video View – Final", m.MovieId.ToString(), true);
                        DropDownList1.Items.Add(item);
                    }
                }
                else if (m.MovieType == 1)
                {
                    if (firstMovie != m.MovieId)
                    {
                        ListItem item = new ListItem(date + "-" + location + " Video View – Initial", m.MovieId.ToString(), true);
                        DropDownList1.Items.Add(item);
                    }
                }
            }
            int ddl1_items = DropDownList1.Items.Count;
            int half = ddl1_items / 2;
            for (int cnt = half; cnt < DropDownList1.Items.Count; cnt++)
            {
                DropDownList1.Items[cnt].Attributes.CssStyle.Add("color", "red");
            }
            if (DropDownList1.Items.Count > 0)
            {
                DropDownList1.SelectedIndex = 0;
                leftMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList1.SelectedValue));
                //  LoadSummary();
            }
        }
    }
    protected void DropDownList2_SelectedIndexChanged(object sender, EventArgs e)
    {
        _child_id = DataRepository.CustomerProfileProvider.GetByCustomerId(customer.CustomerId)[0];
        int AthletesChildId = Convert.ToInt16(_child_id.InitialTeacher);
        // LoadVideoList();
        if (DropDownList1.Items.Count > 0)
            leftMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList1.SelectedValue));
        if (DropDownList3.Items.Count > 0)
            rightMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList3.SelectedValue));
        LessonQuery lessonQuery = new LessonQuery();
        lessonQuery.AppendEquals(LessonColumn.CustomerId, customer.CustomerId.ToString());
        TList<Lesson> lessons = DataRepository.LessonProvider.Find(lessonQuery.GetParameters(), "LessonDate DESC");
        LessonTypeLookup lookUp = null;
        Dictionary<string, LessonTypeLookup> lessonTypeLookUp = new Dictionary<string, LessonTypeLookup>();
        foreach (Lesson l in lessons)
        {
            DataRepository.LessonProvider.DeepLoad(l);
            lookUp = DataRepository.LessonTypeLookupProvider.GetByLessonTypeId(l.LessonTypeId);
            if (lookUp != null && !lessonTypeLookUp.ContainsKey(lookUp.LessonTypeText))
            {
                lessonTypeLookUp.Add(lookUp.LessonTypeText, lookUp);
            }
        }
        LoadVideoList();
        DropDownList1_SelectedIndexChanged(null, null);

        //if (AthletesChildId != 1 && isComparison)
        //{
        //    SprintTireText.Visible = false;
        //}
        //else
        //{
        //    TireOneAttributes(leftMovie.LessonId);
        //}



        //System.Web.UI.ScriptManager.RegisterClientScriptBlock(this.Page, this.Page.GetType(), "waitUntilLoaded", "javascript:waitUntilLoaded();", true);
        //if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
        //{
        //    GetAllSprintAthleteData(leftMovie.LessonId);
        //    SprintId.Visible = true;
        //    StartId.Visible = false;
        //    HurdleId.Visible = false;
        //    Label6.Text = "Maximum Sprint Velocity";
        //    SprintIntro.Visible = true;
        //    System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeSprintHeight", "MakeSprintHeight();", true);
        //    ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "FunctionForAllBtns", "FunctionForAllBtns(2);", true);
        //}
        //else if (DropDownList2.SelectedItem.Text.Equals("Start"))
        //{
        //    HurdleId.Visible = false;
        //    SprintId.Visible = false;
        //    StartId.Visible = true;
        //    GetAllStartAthleteData(leftMovie.LessonId);
        //    Label6.Text = "The Start";
        //    StartIntro.Visible = true;
        //    System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeStartHeight", "MakeStartHeight();", true);
        //}
        //else
        //{
        //    SprintId.Visible = false;
        //    StartId.Visible = false;
        //    HurdleId.Visible = true;
        //    GetAllHurdleAthleteData(leftMovie.LessonId);
        //    Label6.Text = "Maximum Hurdle Velocity";
        //    HurdleIntro.Visible = true;
        //    System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeHurdleHeight", "MakeHurdleHeight();", true);
        //    System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "FunctionForAllBtns", "FunctionForAllBtns(1);", true);
        //}

        //WriteObjectsToPageAjax();
        //// LoadSummary();     

        //Label1.Text = customer.FirstName + " " + customer.LastName;
        //HiddenField1.Value = Label1.Text;
        //// HiddenField5.Value = user.Email;
        //VideoDisplay(leftMovie.FilePath, rightMovie.FilePath);

        //Label3.Text = customer.FirstName + " " + customer.LastName;
        //AthleteChildSendMail();


    }

    private Movie GetMatching(Movie leftMovie, TList<Movie> movies)
    {
        if (leftMovie.MovieType == 0)
        {
            foreach (Movie m in movies)
            {
                if (m.LessonId == leftMovie.LessonId && m.MovieType == 1 && m.DateRecorded == leftMovie.DateRecorded)
                    return m;
            }
        }
        else
        {
            foreach (Movie m in movies)
            {
                if (m.LessonId == leftMovie.LessonId && m.MovieType == 0 && m.DateRecorded == leftMovie.DateRecorded)
                    return m;
            }
        }
        return null;
    }

    protected void DropDownList3_SelectedIndexChanged(object sender, EventArgs e)
    {
        _child_id = DataRepository.CustomerProfileProvider.GetByCustomerId(customer.CustomerId)[0];
        int AthletesChildId = Convert.ToInt16(_child_id.InitialTeacher);

        leftMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList1.SelectedValue));
        rightMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList3.SelectedValue));

        string Leftlocation = sae.SelectLessonlocation(leftMovie.LessonId.ToString());
        string Rightlocation = sae.SelectLessonlocation(rightMovie.LessonId.ToString());


        string Ldate = leftMovie.DateRecorded.ToString();
        string Rdate = rightMovie.DateRecorded.ToString();
        if (DropDownList3.Items.Count > 0)
        {
            isComparison = true;
            HideSummary();
            Label15.Visible = false;
            if (AthletesChildId != 1)
            {
                Label15.Text = "Videos only available for Tier 1 Athletes";
                Label15.Visible = true;
                Label9.Visible = false;
                if (DropDownList1.SelectedItem.Text.EndsWith("Video View – Initial") || DropDownList1.SelectedItem.Text.EndsWith("Video View – Final"))
                {
                    LoadLeftDropDown();
                }
                NonTireAttributes(leftMovie.LessonId);

                string LVideopath = leftMovie.FilePath;
                string RVideopath = rightMovie.FilePath;
                ChangeVariableChartTitles(LVideopath, RVideopath);
            }
            else
            {
                if (DropDownList1.SelectedItem.Text.EndsWith("Video View – Initial") || DropDownList1.SelectedItem.Text.EndsWith("Video View – Final"))
                {
                    LoadLeftDropDown();
                }
                string LVideopath = leftMovie.FilePath;
                string RVideopath = rightMovie.FilePath;
                ComparisonAttributes(leftMovie.LessonId, rightMovie.LessonId, LVideopath, RVideopath);
                leftMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList1.SelectedValue));
                rightMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList3.SelectedValue));
            }
            WriteObjectsToPageAjax();
            VideoDisplay(leftMovie.FilePath, rightMovie.FilePath);
            AthleteChildSendMail();
        }
        int ddl1_items = DropDownList1.Items.Count;
        int half = ddl1_items / 2;
        for (int cnt = half; cnt < DropDownList1.Items.Count; cnt++)
        {
            DropDownList1.Items[cnt].Attributes.CssStyle.Add("color", "red");
        }
        if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
        {
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(2);", true);
            btnSeven.Style.Add("display", "block");
            btnSeven.Attributes["style"] = String.Format("margin-bottom:0px;");
            btnEight.Style.Add("display", "none");
            btnNine.Style.Add("display", "none");
            btnTen.Style.Add("display", "none");
        }
        else if (DropDownList2.SelectedItem.Text.Equals("Start"))
        {
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(0);", true);
            btnEight.Style.Add("display", "block");
            btnNine.Style.Add("display", "none");
            btnTen.Style.Add("display", "none");
            btnSeven.Style.Add("display", "block");
            btnSeven.Attributes["style"] = String.Format("margin-bottom:0px;");
        }
        else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
        {
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(2);", true);
            btnSeven.Style.Add("display", "block");
            btnSeven.Attributes["style"] = String.Format("margin-bottom:0px;");
            btnEight.Style.Add("display", "none");
            btnNine.Style.Add("display", "none");
            btnTen.Style.Add("display", "none");
        }
        else
        {
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(1);", true);

            btnSeven.Style.Add("display", "none");
            btnEight.Style.Add("display", "none");
            btnNine.Style.Add("display", "none");
            btnTen.Style.Add("display", "none");
        }
    }


    protected void DropDownList4_SelectedIndexChanged(object sender, EventArgs e)
    {
        Lesson less;

        int _lessonid = Convert.ToInt16(DropDownList4.SelectedValue);
        less = DataRepository.LessonProvider.GetByLessonId(_lessonid);
        // less = DataRepository.LessonProvider.GetByLessonId(int.Parse(DropDownList4.SelectedValue));
        TList<Movie> movs = new TList<Movie>();
        movs = DataRepository.MovieProvider.GetByLessonId(less.LessonId);
        if (movs.Count > 2)
        {
            leftMovie = DataRepository.MovieProvider.GetByLessonId(less.LessonId)[2];
            try
            {
                DropDownList1.SelectedValue = leftMovie.MovieId.ToString();
            }

            catch
            {
                wmpfile = "";
            }

            LoadRightDropDown();
        }
        else
        {
            leftMovie = DataRepository.MovieProvider.GetByLessonId(less.LessonId)[0];
            DropDownList1.SelectedValue = leftMovie.MovieId.ToString();
            LoadRightDropDown();
        }

        LoadSummary();
        if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
        {
            GetAllSprintAthleteData(leftMovie.LessonId);
            SprintId.Visible = true;
            StartId.Visible = false;
            HurdleId.Visible = false;
            HurdleStepId.Visible = false;
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "OtherKey3", "MakeSprintHeight();", true);
        }
        else  if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
        {
            GetAllHurdleStepsAthleteData(leftMovie.LessonId);
            //GetAllSprintAthleteData(leftMovie.LessonId);
            HurdleStepId.Visible = true;
            SprintId.Visible = false;
            StartId.Visible = false;
            HurdleId.Visible = false;
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "OtherKey3", "MakeSprintHeight();", true);
        }
        else if (DropDownList2.SelectedItem.Text.Equals("Start"))
        {
            SprintId.Visible = false;
            StartId.Visible = true;
            HurdleId.Visible = false;
            HurdleStepId.Visible = false;
            GetAllStartAthleteData(leftMovie.LessonId);
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeStartHeight", "MakeStartHeight();", true);
        }
        else
        {
            SprintId.Visible = false;
            StartId.Visible = false;
            HurdleId.Visible = true;
            HurdleStepId.Visible = false;
            GetAllHurdleAthleteData(leftMovie.LessonId);
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeHurdleHeight", "MakeHurdleHeight();", true);
        }
        WriteObjectsToPageAjax();
        VideoDisplay(leftMovie.FilePath, rightMovie.FilePath);
        AthleteChildSendMail();
        int ddl1_items = DropDownList1.Items.Count;
        int half2 = ddl1_items / 2;
        for (int cnt = half2; cnt < DropDownList1.Items.Count; cnt++)
        {
            DropDownList1.Items[cnt].Attributes.CssStyle.Add("color", "red");
        }

        if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
        {
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(2);", true);
        }
        else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
        {
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(2);", true);
        }
        else if (DropDownList2.SelectedItem.Text.Equals("Start"))
        {
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(0);", true);
        }
        else
        {
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(1);", true);
        }
    }

    #region[load summary video]
    private void LoadSummary()
    {
        //System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "anyOtherKey11", "FunctionForAllBtns(2);", true);
        DropDownList4.Items.Clear();
        try
        {
            summarymovie = DataRepository.SummaryMovieProvider.GetByLessonId(leftMovie.LessonId)[0];
            wmpfile = "../" + summarymovie.FilePath;
            string savepath = Server.MapPath(summarymovie.FilePath);
            string strsumm = savepath.Replace("\\Users\\Users\\", "\\Users\\");
            string[] patharrsumm = strsumm.Split('\\');
            displaysummary = true;
        }
        catch
        {
            displaysummary = false;
            //summarymovie.FilePath = "";
        }
        if (displaysummary == false)
        {
            fillerleft.Style.Add("display", "block");
            fillercenter.Style.Add("display", "block");
            fillerright.Style.Add("display", "block");
            teachersummaryleft.Style.Add("display", "block");
            teachersummarycenter.Style.Add("display", "block");
            teachersummaryright.Style.Add("display", "block");
            SumDivCenterPanel.Style.Add("display", "block");
            SumDivLeftPanel.Style.Add("display", "block");
           // SummaryVideo.Style.Add("display", "block");
            SummaryButtons.Style.Add("display", "block");
            SummaryDropDown.Style.Add("display", "block");
            SumDivRightPanel.Style.Add("display", "block");
            bottomleft.Style.Add("display", "block");

            divsum.Visible = false;
            objdivsum.Visible = true;
            Image1.Visible = false;
            displaysummary = false;
          //  SummaryVideo.Visible = false;
            contplay.Attributes["style"] = String.Format("font-family:Arial,Helvetica sans-serif;font-size:12px;color:#000000;text-decoration:none;position:absolute;height:1181px;width:930px;");
            fillerleft.Visible = true;
            fillercenter.Visible = true;
            fillerright.Visible = true;
            teachersummaryleft.Visible = true;
            teachersummarycenter.Visible = true;
            teachersummaryright.Visible = true;
            SumDivLeftPanel.Visible = true;
            SumDivCenterPanel.Visible = true;
            SumDivRightPanel.Visible = true;
            bottomleft.Attributes["style"] = String.Format("font-family:Arial,Helvetica,sans-serif;font-size:12px;text-decoration:none;position:absolute;height:31px;width:23px;left:0px;top:625px;");
            bottomcenter.Attributes["style"] = String.Format("font-family:Arial,Helvetica,sans-serif;font-size:12px;text-decoration:none;position:absolute;height:31px;width:879px;left:24px;top:625px;");
            bottomright.Attributes["style"] = String.Format("font-family:Arial,Helvetica,sans-serif;font-size:12px;text-decoration:none;position:absolute;height:31px;width:23px;left:897px;top:625px;");

            CheckSummaryAvailable();
            TList<SummaryMovie> summarymovies = new TList<SummaryMovie>();
            // summarymovies.Add(summarymovie);
            TList<Lesson> lessons = new TList<Lesson>();
            TList<Lesson> selectedLesson = new TList<Lesson>();
            lessons = DataRepository.LessonProvider.GetByCustomerId(customer.CustomerId);
            foreach (Lesson l in lessons)
            {
                if (DropDownList2.SelectedItem.Text.Equals("Start") && l.LessonTypeId == 1)
                {
                    selectedLesson.Add(l);
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Sprint") && l.LessonTypeId == 2)
                {
                    selectedLesson.Add(l);
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Hurdle") && l.LessonTypeId == 3)
                {
                    selectedLesson.Add(l);
                }
            }
            selectedLesson.Sort("LessonDate DESC");
            SummaryMovie sm;
            foreach (Lesson sl in selectedLesson)
            {
                try
                {
                    sm = DataRepository.SummaryMovieProvider.GetByLessonId(sl.LessonId)[0];
                    summarymovies.Add(sm);
                }
                catch (Exception ex)
                {
                    ex.Message.ToString();
                }
            }
            DropDownList4.Items.Clear();
            DropDownList4.Items.Add("Select");
            DropDownList4.SelectedIndex = 0;
            int x = 0;
            foreach (SummaryMovie sms in summarymovies)
            {
                x++;
                string path = sms.FilePath.ToString();
                string[] sumpath = path.Split('/');
                if (sumpath[2] != "")
                {
                    string location1 = sae.SelectLessonlocation(sms.LessonId.ToString());
                    string date = sms.DateRecorded.Month.ToString() + "/" + sms.DateRecorded.Day.ToString() + "/" + sms.DateRecorded.Year.ToString();
                    DropDownList4.Items.Add(date.ToString() + "-" + location1);
                    DropDownList4.Items[x].Value = sms.LessonId.ToString();
                    //   x++;
                }
            }
            wmpfile1 = "../" + leftMovie.FilePath;
            wmpfile2 = "../" + rightMovie.FilePath;
            displaysummary = false;
        }
        else
        {
            try
            {
                if (summarymovie != null)
                {
                    wmpfile1 = "../" + leftMovie.FilePath;
                    wmpfile2 = "../" + rightMovie.FilePath;
                    wmpfile = "../" + summarymovie.FilePath;
                    displaysummary = true;
                    // System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "anyKey", "MakeSummaryVisible();", true);
                    TList<SummaryMovie> summarymovies = new TList<SummaryMovie>();
                    summarymovies.Add(summarymovie);
                    CheckSummaryAvailable();

                    TList<Lesson> lessons = new TList<Lesson>();
                    TList<Lesson> selectedLesson = new TList<Lesson>();
                    lessons = DataRepository.LessonProvider.GetByCustomerId(customer.CustomerId);
                    foreach (Lesson l in lessons)
                    {
                        if (DropDownList2.SelectedItem.Text.Equals("Start") && l.LessonTypeId == 1)
                        {
                            selectedLesson.Add(l);
                        }
                        else if (DropDownList2.SelectedItem.Text.Equals("Sprint") && l.LessonTypeId == 2)
                        {
                            selectedLesson.Add(l);
                        }
                        else if (DropDownList2.SelectedItem.Text.Equals("Hurdle") && l.LessonTypeId == 3)
                        {
                            selectedLesson.Add(l);
                        }
                    }
                    selectedLesson.Sort("LessonDate DESC");
                    SummaryMovie sm;
                    foreach (Lesson sl in selectedLesson)
                    {
                        try
                        {
                            sm = DataRepository.SummaryMovieProvider.GetByLessonId(sl.LessonId)[0];
                            summarymovies.Add(sm);
                        }
                        catch (Exception ex)
                        {
                            ex.Message.ToString();
                        }
                    }
                    try
                    {
                        int x = 0;
                        foreach (SummaryMovie sms in summarymovies)
                        {
                            string path = sms.FilePath.ToString();
                            string[] sumpath = path.Split('/');
                            if (sumpath[2] != "")
                            {
                                string location1 = sae.SelectLessonlocation(sms.LessonId.ToString());
                                string date = sms.DateRecorded.Month.ToString() + "/" + sms.DateRecorded.Day.ToString() + "/" + sms.DateRecorded.Year.ToString();
                                DropDownList4.Items.Add(date.ToString() + "-" + location1);
                                DropDownList4.Items[x].Value = sms.LessonId.ToString();
                                x++;
                            }
                        }
                    }
                    catch
                    {

                    }
                    summarymovie = DataRepository.SummaryMovieProvider.GetByLessonId(leftMovie.LessonId)[0];
                    TList<SummaryMovie> summaryMovies = new TList<SummaryMovie>();

                    summaryMovies.Add(summarymovie);
                    if (summarymovie != null)
                    {
                        int y = 0;
                        foreach (SummaryMovie sms in summaryMovies)
                        {
                            //    string path = sms.FilePath.ToString();
                            //    string[] sumpath = path.Split('/');
                            //    if (sumpath[2] != "")
                            //    {
                            string location1 = sae.SelectLessonlocation(sms.LessonId.ToString());
                            string date = sms.DateRecorded.Month.ToString() + "/" + sms.DateRecorded.Day.ToString() + "/" + sms.DateRecorded.Year.ToString();
                            DropDownList4.Items.Add(date.ToString() + "-" + location1);
                            DropDownList4.Items[y].Value = sms.LessonId.ToString();

                            // DropDownList4.SelectedValue = DropDownList4.Items[y].Value;
                            y++;
                            //    }
                        }
                    }
                    int count = DropDownList4.Items.Count;
                    DropDownList4.Items.RemoveAt(count - 1);
                    wmpfile1 = "../" + leftMovie.FilePath;
                    wmpfile2 = "../" + rightMovie.FilePath;
                    wmpfile = "../" + summarymovie.FilePath;
                }
                else
                {
                    displaysummary = false;
                    wmpfile1 = "../" + leftMovie.FilePath;
                    wmpfile2 = "../" + rightMovie.FilePath;
                }
            }
            catch (Exception)
            {
                displaysummary = true;
                wmpfile = string.Empty;
                wmpfile1 = string.Empty;
                wmpfile2 = string.Empty;
                System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "key", "document.getElementById('square').innerHTML = '';", true);
                //  System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "anyOtherKey", "MakeSummaryInvisible();", true);
            }
            if (displaysummary)//if true then go inside
            {
                ShowSummary();
            }
        }

        if (leftMovie.DateRecorded.ToShortDateString().Equals(rightMovie.DateRecorded.ToShortDateString()))
        {
            Label2.Text = leftMovie.DateRecorded.ToShortDateString();
            Label2.Visible = true;
            Label14.Visible = false;
            Label5.Text = " - ";
        }
        else
        {
            Label2.Text = "";
            Label5.Text = "";
        }
        if (displaysummary != false)
        {
            Label4.Text = summarymovie.DateRecorded.ToShortDateString();
        }
        else
        {
            Label4.Text = "";
        }
    }
    #endregion[load summary video]

    string returnErrorMessageForHurdle(int step)
    {
        string errorMessages = string.Empty;
        if (!isComparison)
        {
            if (DropDownList1.SelectedItem.Text.EndsWith("Model View – Initial") || DropDownList1.SelectedItem.Text.EndsWith("Video View – Initial"))
            {
                if (step == 1 || step == 2 || step == 3 || step == 4 || step == 5 || step == 6 || step == 7)
                {
                    #region[Velocity]
                    if (lblVelocityHurdleM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    }
                    #endregion[Velocity]

                }
                if (step == 2)
                {
                    #region[Stride Length]
                    if (lblStrideLengthIntoM1.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblStrideLengthIntoI.Text)) < Convert.ToSingle(lblStrideLengthIntoM1.Text))
                        {
                            errorMessages += "Stride Length Into is Too Short (Too Close)#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Length Into is Too Long (Too Far)#!#";
                        }
                    }
                    #endregion[Stride Length]
                    #region[TouchdownDistanceInto]
                    if (lblTouchdownDistanceIntoM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance Into is Too Long (Over Reaching)#!#";
                    }
                    #endregion[TouchdownDistanceInto]
                    #region[UpperLegAngleatTouchdownInto]
                    if (lblUpperLegAngleatTouchdownIntoM1.ForeColor == Color.Red)
                    {
                        //if (Convert.ToInt16(lblUpperLegAngleatTouchdownIntoI.Text) < Convert.ToInt16(lblUpperLegAngleatTouchdownIntoM1.Text))
                        if (Convert.ToInt16(lblUpperLegAngleatTouchdownIntoI.Text) > Convert.ToInt16(lblUpperLegAngleatTouchdownIntoM1.Text))
                        //{
                        //    errorMessages += "Upper Leg Angle at Touchdown Into is Too Small#!#";
                        //}
                        //else
                        {
                            errorMessages += "Upper Leg Angle at Touchdown Into is Too Large (Over Reaching)#!#";
                        }
                    }
                    #endregion[UpperLegAngleatTouchdownInto]
                }

                if (step == 3)
                {
                    #region[GroundTimeInto]
                    if (lblGroundTimeIntoM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Ground Time Into is Too Long#!#";
                    }
                    #endregion[GroundTimeInto]
                    #region[UpperLegAngleatTakeoffInto]
                    if (lblUpperLegAngleatTakeoffIntoM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblUpperLegAngleatTakeoffIntoI.Text) < Convert.ToInt16(lblUpperLegAngleatTakeoffIntoM1.Text))
                        {

                            errorMessages += "Upper Leg Angle at Takeoff Into is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Angle at Takeoff Into is Too Large#!#";
                        }
                    }
                    #endregion[UpperLegAngleatTakeoffInto]
                    #region[LeadLowerLegMinimumAngleInto]
                    if (lblLeadLowerLegMinimumAngleIntoM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoI.Text) < Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoM1.Text))
                        {

                            errorMessages += "Lead Lower Leg Minimum Angle Into is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Lead Lower Leg Minimum Angle Into is Too Large#!#";
                        }
                    }
                    #endregion[LeadLowerLegMinimumAngleInto]
                    #region[LeadLowerLegAngleatAnkleCrossInto]
                    if (lblLeadLowerLegAngleatAnkleCrossIntoM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoI.Text) < Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoM1.Text))
                        {

                            errorMessages += "Lead Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            errorMessages += "Lead Lower Leg Angle at Ankle Cross is Too Large (Check Flexibility)#!#";
                        }
                    }
                    #endregion[LeadLowerLegAngleatAnkleCrossInto]

                }
                if (step == 4)
                {
                    #region[AirTimeM1]
                    if (lblAirTimeM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Air Time is Too Long#!#";
                    }
                    #endregion[AirTimeM1]
                    #region[StrideLengthOff]
                    if (lblStrideLengthOffM1.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblStrideLengthOffI.Text)) < Convert.ToSingle(lblStrideLengthOffM1.Text))
                        {
                            errorMessages += "Stride Length Off is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Length Off is Too Long#!#";
                        }
                    }
                    #endregion[StrideLengthOff]
                    #region[StrideLengthTotal]

                    if (lblStrideLengthTotalM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Stride Length Total is Too Long#!#";
                    }
                    #endregion[StrideLengthTotal]
                    #region[TouchdownDistanceOff]

                    if (lblTouchdownDistanceOffM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance Off is Too Long#!#";
                    }
                    #endregion[TouchdownDistanceOff]
                    #region[UpperLegAngleatTouchdownOff]
                    if (lblUpperLegAngleatTouchdownOffM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblUpperLegAngleatTouchdownOffI.Text) < Convert.ToInt16(lblUpperLegAngleatTouchdownOffM1.Text))
                        {

                            errorMessages += "Upper Leg Angle at Touchdown Off is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Angle at Touchdown Off is Too Large#!#";
                        }
                    }
                    #endregion[UpperLegAngleatTouchdownOff]
                    #region[LowerLegAngleatTouchdownOff]
                    if (lblLowerLegAngleatTouchdownOffM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblLowerLegAngleatTouchdownOffI.Text) < Convert.ToInt16(lblLowerLegAngleatTouchdownOffM1.Text))
                        {

                            errorMessages += "Lower Leg Angle at Touchdown Off is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Angle at Touchdown Off is Too Large#!#";
                        }
                    }
                    #endregion[LowerLegAngleatTouchdownOff]
                }
                if (step == 5)
                {
                    #region[GroundTimeOff]
                    if (lblGroundTimeOffM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Ground Time Off  is Too Long#!#";
                    }
                    #endregion[GroundTimeOff]
                    #region[UpperLegAngleatTakeoffOff]
                    if (lblUpperLegAngleatTakeoffOffM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblUpperLegAngleatTakeoffOffI.Text) < Convert.ToInt16(lblUpperLegAngleatTakeoffOffM1.Text))
                        {

                            errorMessages += "Upper Leg Angle at Takeoff Off is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Angle at Takeoff Off is Too Large#!#";
                        }
                    }
                    #endregion[UpperLegAngleatTakeoffOff]
                    #region[LowerLegAngleatTakeoffOff]
                    if (lblLowerLegAngleatTakeoffOffM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblLowerLegAngleatTakeoffOffI.Text) < Convert.ToInt16(lblLowerLegAngleatTakeoffOffM1.Text))
                        {

                            errorMessages += "Lower Leg Angle at Takeoff Off is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Angle at Takeoff Off is Too Large#!#";
                        }
                    }
                    #endregion[LowerLegAngleatTakeoffOff]
                }
                MakeHurdleFinalVariableChartValuesHidden();
                return errorMessages;
            }
            else
            {
                if (step == 1 || step == 2 || step == 3 || step == 4 || step == 5 || step == 6 || step == 7)
                {
                    if (lblVelocityHurdleM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    }
                }
                if (step == 2)
                {
                    if (lblStrideLengthIntoM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblStrideLengthIntoF.Text)) < Convert.ToSingle(lblStrideLengthIntoM2.Text))
                        {
                            errorMessages += "Stride Length Into is Too Short (Too Close)#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Length Into is Too Long (Too Far)#!#";
                        }
                    }

                    if (lblTouchdownDistanceIntoM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance Into is Too Long (Over Reaching)#!#";
                    }

                    if (lblUpperLegAngleatTouchdownIntoM2.ForeColor == Color.Red)
                    {
                        //if (Convert.ToInt16(lblUpperLegAngleatTouchdownIntoF.Text) < Convert.ToInt16(lblUpperLegAngleatTouchdownIntoM2.Text))
                        if (Convert.ToInt16(lblUpperLegAngleatTouchdownIntoF.Text) > Convert.ToInt16(lblUpperLegAngleatTouchdownIntoM2.Text))
                        //{
                        //    errorMessages += "Upper Leg Angle at Touchdown Into is Too Small#!#";
                        //}
                        //else
                        {
                            errorMessages += "Upper Leg Angle at Touchdown Into is Too Large (Over Reaching)#!#";
                        }
                    }
                }

                if (step == 3)
                {
                    if (lblGroundTimeIntoM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Ground Time Into is Too Long#!#";
                    }
                    if (lblUpperLegAngleatTakeoffIntoM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblUpperLegAngleatTakeoffIntoF.Text) < Convert.ToInt16(lblUpperLegAngleatTakeoffIntoM2.Text))
                        {

                            errorMessages += "Upper Leg Angle at Takeoff Into is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Angle at Takeoff Into is Too Large#!#";
                        }
                    }
                    if (lblLeadLowerLegMinimumAngleIntoM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoF.Text) < Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoM2.Text))
                        {

                            errorMessages += "Lead Lower Leg Minimum Angle Into is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Lead Lower Leg Minimum Angle Into is Too Large#!#";
                        }
                    }
                    if (lblLeadLowerLegAngleatAnkleCrossIntoM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoF.Text) < Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoM2.Text))
                        {

                            errorMessages += "Lead Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            errorMessages += "Lead Lower Leg Angle at Ankle Cross is Too Large (Check Flexibility)#!#";
                        }
                    }

                }
                if (step == 4)
                {
                    if (lblAirTimeM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Air Time is Too Long#!#";
                    }

                    if (lblStrideLengthOffM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblStrideLengthOffF.Text)) < Convert.ToSingle(lblStrideLengthOffM2.Text))
                        {
                            errorMessages += "Stride Length Off is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Length Off is Too Long#!#";
                        }
                    }
                    if (lblStrideLengthTotalM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Stride Length Total is Too Long#!#";
                    }
                    if (lblTouchdownDistanceOffM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance Off is Too Long#!#";
                    }
                    if (lblUpperLegAngleatTouchdownOffM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblUpperLegAngleatTouchdownOffF.Text) < Convert.ToInt16(lblUpperLegAngleatTouchdownOffM2.Text))
                        {

                            errorMessages += "Upper Leg Angle at Touchdown Off is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Angle at Touchdown Off is Too Large#!#";
                        }
                    }


                    if (lblLowerLegAngleatTouchdownOffM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblLowerLegAngleatTouchdownOffF.Text) < Convert.ToInt16(lblLowerLegAngleatTouchdownOffM2.Text))
                        {

                            errorMessages += "Lower Leg Angle at Touchdown Off is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Angle at Touchdown Off is Too Large#!#";
                        }
                    }
                }
                if (step == 5)
                {
                    if (lblGroundTimeOffM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Ground Time Off  is Too Long#!#";
                    }

                    if (lblUpperLegAngleatTakeoffOffM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblUpperLegAngleatTakeoffOffF.Text) < Convert.ToInt16(lblUpperLegAngleatTakeoffOffM2.Text))
                        {

                            errorMessages += "Upper Leg Angle at Takeoff Off is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Angle at Takeoff Off is Too Large#!#";
                        }
                    }
                    if (lblLowerLegAngleatTakeoffOffM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblLowerLegAngleatTakeoffOffF.Text) < Convert.ToInt16(lblLowerLegAngleatTakeoffOffM2.Text))
                        {

                            errorMessages += "Lower Leg Angle at Takeoff Off is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Angle at Takeoff Off is Too Large#!#";
                        }
                    }
                }
            }
            MakeHurdleInitialVariableChartValuesHidden();
            return errorMessages;
        }
        else
        {
            leftMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList1.SelectedValue));
            rightMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList3.SelectedValue));

            string LVideopath = leftMovie.FilePath;
            string RVideopath = rightMovie.FilePath;

            GetHurdleLeftMovieVariablesforNonTires(leftMovie.LessonId, LVideopath);
            GetHurdleRightMovieVariablesforNonTires(rightMovie.LessonId, RVideopath);

            if (step == 1 || step == 2 || step == 3 || step == 4 || step == 5 || step == 6 || step == 7)
            {
                #region[Velocity]
                if (lblVelocityHurdleM1.ForeColor == Color.Red && lblVelocityHurdleM2.ForeColor == Color.Red)
                {
                    errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                }
                #endregion[Velocity]

            }
            if (step == 2)
            {
                #region[Stride Length]
                if (lblStrideLengthIntoM1.ForeColor == Color.Red && lblStrideLengthIntoM2.ForeColor == Color.Red)
                {
                    if (Math.Abs(Convert.ToSingle(lblStrideLengthIntoI.Text)) < Convert.ToSingle(lblStrideLengthIntoM1.Text)
                        && Math.Abs(Convert.ToSingle(lblStrideLengthIntoF.Text)) < Convert.ToSingle(lblStrideLengthIntoM2.Text))
                    {
                        errorMessages += "Stride Length Into is Too Short (Too Close)#!#";
                    }
                    else
                    {
                        if (Math.Abs(Convert.ToSingle(lblStrideLengthIntoI.Text)) > Convert.ToSingle(lblStrideLengthIntoM1.Text)
                            && Math.Abs(Convert.ToSingle(lblStrideLengthIntoF.Text)) > Convert.ToSingle(lblStrideLengthIntoM2.Text))
                        {
                            errorMessages += "Stride Length Into is Too Long (Too Far)#!#";
                        }
                    }
                }
                #endregion[Stride Length]
                #region[TouchdownDistanceInto]
                if (lblTouchdownDistanceIntoM1.ForeColor == Color.Red && lblTouchdownDistanceIntoM2.ForeColor == Color.Red)
                {
                    errorMessages += "Touchdown Distance Into is Too Long (Over Reaching)#!#";
                }
                #endregion[TouchdownDistanceInto]
                #region[UpperLegAngleatTouchdownInto]
                if (lblUpperLegAngleatTouchdownIntoM1.ForeColor == Color.Red && lblUpperLegAngleatTouchdownIntoM2.ForeColor == Color.Red)
                {
                    //if (Convert.ToInt16(lblUpperLegAngleatTouchdownIntoI.Text) < Convert.ToInt16(lblUpperLegAngleatTouchdownIntoM1.Text)
                    //    && Convert.ToInt16(lblUpperLegAngleatTouchdownIntoF.Text) < Convert.ToInt16(lblUpperLegAngleatTouchdownIntoM2.Text))
                    //{
                    //    errorMessages += "Upper Leg Angle at Touchdown Into is Too Small#!#";
                    //}
                    //else
                    //{
                        if (Convert.ToInt16(lblUpperLegAngleatTouchdownIntoI.Text) > Convert.ToInt16(lblUpperLegAngleatTouchdownIntoM1.Text)
                            && Convert.ToInt16(lblUpperLegAngleatTouchdownIntoF.Text) > Convert.ToInt16(lblUpperLegAngleatTouchdownIntoM2.Text))
                        {
                            errorMessages += "Upper Leg Angle at Touchdown Into is Too Large (Over Reaching)#!#";
                        }
                    //}
                }
                #endregion[UpperLegAngleatTouchdownInto]
            }

            if (step == 3)
            {
                #region[GroundTimeInto]
                if (lblGroundTimeIntoM1.ForeColor == Color.Red && lblGroundTimeIntoM2.ForeColor == Color.Red)
                {
                    errorMessages += "Ground Time Into is Too Long#!#";
                }
                #endregion[GroundTimeInto]
                #region[UpperLegAngleatTakeoffInto]
                if (lblUpperLegAngleatTakeoffIntoM1.ForeColor == Color.Red && lblUpperLegAngleatTakeoffIntoM2.ForeColor == Color.Red)
                {
                    if (Convert.ToInt16(lblUpperLegAngleatTakeoffIntoI.Text) < Convert.ToInt16(lblUpperLegAngleatTakeoffIntoM1.Text)
                        && Convert.ToInt16(lblUpperLegAngleatTakeoffIntoF.Text) < Convert.ToInt16(lblUpperLegAngleatTakeoffIntoM2.Text))
                    {
                        errorMessages += "Upper Leg Angle at Takeoff Into is Too Small#!#";
                    }
                    else
                    {
                        if (Convert.ToInt16(lblUpperLegAngleatTakeoffIntoI.Text) > Convert.ToInt16(lblUpperLegAngleatTakeoffIntoM1.Text)
                            && Convert.ToInt16(lblUpperLegAngleatTakeoffIntoF.Text) > Convert.ToInt16(lblUpperLegAngleatTakeoffIntoM2.Text))
                        {
                            errorMessages += "Upper Leg Angle at Takeoff Into is Too Large#!#";
                        }
                    }
                }
                #endregion[UpperLegAngleatTakeoffInto]
                #region[LeadLowerLegMinimumAngleInto]
                if (lblLeadLowerLegMinimumAngleIntoM1.ForeColor == Color.Red && lblLeadLowerLegMinimumAngleIntoM2.ForeColor == Color.Red)
                {
                    if (Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoI.Text) < Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoM1.Text)
                        && Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoF.Text) < Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoM2.Text))
                    {
                        errorMessages += "Lead Lower Leg Minimum Angle Into is Too Small#!#";
                    }
                    else
                    {
                        if (Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoI.Text) > Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoM1.Text)
                            && Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoF.Text) > Convert.ToInt16(lblLeadLowerLegMinimumAngleIntoM2.Text))
                        {
                            errorMessages += "Lead Lower Leg Minimum Angle Into is Too Large#!#";
                        }
                    }
                }
                #endregion[LeadLowerLegMinimumAngleInto]
                #region[LeadLowerLegAngleatAnkleCrossInto]
                if (lblLeadLowerLegAngleatAnkleCrossIntoM1.ForeColor == Color.Red && lblLeadLowerLegAngleatAnkleCrossIntoM2.ForeColor == Color.Red)
                {
                    if (Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoI.Text) < Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoM1.Text)
                        && Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoF.Text) < Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoM2.Text))
                    {
                        errorMessages += "Lead Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                    }
                    else
                    {
                        if (Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoI.Text) > Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoM1.Text)
                            && Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoF.Text) > Convert.ToInt16(lblLeadLowerLegAngleatAnkleCrossIntoM2.Text))
                        {
                            errorMessages += "Lead Lower Leg Angle at Ankle Cross is Too Large (Check Flexibility)#!#";
                        }
                    }
                }
                #endregion[LeadLowerLegAngleatAnkleCrossInto]

            }
            if (step == 4)
            {
                #region[AirTimeM1]
                if (lblAirTimeM1.ForeColor == Color.Red && lblAirTimeM2.ForeColor == Color.Red)
                {
                    errorMessages += "Air Time is Too Long#!#";
                }
                #endregion[AirTimeM1]
                #region[StrideLengthOff]
                if (lblStrideLengthOffM1.ForeColor == Color.Red && lblStrideLengthOffM2.ForeColor == Color.Red)
                {
                    if (Math.Abs(Convert.ToSingle(lblStrideLengthOffI.Text)) < Convert.ToSingle(lblStrideLengthOffM1.Text) &&
                        Math.Abs(Convert.ToSingle(lblStrideLengthOffF.Text)) < Convert.ToSingle(lblStrideLengthOffM2.Text))
                    {
                        errorMessages += "Stride Length Off is Too Short#!#";
                    }
                    else
                    {
                        if (Math.Abs(Convert.ToSingle(lblStrideLengthOffI.Text)) > Convert.ToSingle(lblStrideLengthOffM1.Text) &&
                            Math.Abs(Convert.ToSingle(lblStrideLengthOffF.Text)) > Convert.ToSingle(lblStrideLengthOffM2.Text))
                        {
                            errorMessages += "Stride Length Off is Too Long#!#";
                        }
                    }
                }
                #endregion[StrideLengthOff]
                #region[StrideLengthTotal]
                if (lblStrideLengthTotalM1.ForeColor == Color.Red && lblStrideLengthTotalM2.ForeColor == Color.Red)
                {
                    errorMessages += "Stride Length Total is Too Long#!#";
                }
                #endregion[StrideLengthTotal]
                #region[TouchdownDistanceOff]
                if (lblTouchdownDistanceOffM1.ForeColor == Color.Red && lblTouchdownDistanceOffM2.ForeColor == Color.Red)
                {
                    errorMessages += "Touchdown Distance Off is Too Long#!#";
                }
                #endregion[TouchdownDistanceOff]
                #region[UpperLegAngleatTouchdownOff]
                if (lblUpperLegAngleatTouchdownOffM1.ForeColor == Color.Red && lblUpperLegAngleatTouchdownOffM2.ForeColor == Color.Red)
                {
                    if (Convert.ToInt16(lblUpperLegAngleatTouchdownOffI.Text) < Convert.ToInt16(lblUpperLegAngleatTouchdownOffM1.Text) &&
                        Convert.ToInt16(lblUpperLegAngleatTouchdownOffF.Text) < Convert.ToInt16(lblUpperLegAngleatTouchdownOffM2.Text))
                    {
                        errorMessages += "Upper Leg Angle at Touchdown Off is Too Small#!#";
                    }
                    else
                    {
                        if (Convert.ToInt16(lblUpperLegAngleatTouchdownOffI.Text) > Convert.ToInt16(lblUpperLegAngleatTouchdownOffM1.Text) &&
                            Convert.ToInt16(lblUpperLegAngleatTouchdownOffF.Text) > Convert.ToInt16(lblUpperLegAngleatTouchdownOffM2.Text))
                        {
                            errorMessages += "Upper Leg Angle at Touchdown Off is Too Large#!#";
                        }
                    }
                }
                #endregion[UpperLegAngleatTouchdownOff]
                #region[LowerLegAngleatTouchdownOff]
                if (lblLowerLegAngleatTouchdownOffM1.ForeColor == Color.Red && lblLowerLegAngleatTouchdownOffM2.ForeColor == Color.Red)
                {
                    if (Convert.ToInt16(lblLowerLegAngleatTouchdownOffI.Text) < Convert.ToInt16(lblLowerLegAngleatTouchdownOffM1.Text)
                        && Convert.ToInt16(lblLowerLegAngleatTouchdownOffF.Text) < Convert.ToInt16(lblLowerLegAngleatTouchdownOffM2.Text))
                    {
                        errorMessages += "Lower Leg Angle at Touchdown Off is Too Small#!#";
                    }
                    else
                    {
                        if (Convert.ToInt16(lblLowerLegAngleatTouchdownOffI.Text) > Convert.ToInt16(lblLowerLegAngleatTouchdownOffM1.Text)
                            && Convert.ToInt16(lblLowerLegAngleatTouchdownOffF.Text) > Convert.ToInt16(lblLowerLegAngleatTouchdownOffM2.Text))
                        {
                            errorMessages += "Lower Leg Angle at Touchdown Off is Too Large#!#";
                        }
                    }
                }
                #endregion[LowerLegAngleatTouchdownOff]
            }
            if (step == 5)
            {
                #region[GroundTimeOff]
                if (lblGroundTimeOffM1.ForeColor == Color.Red && lblGroundTimeOffM2.ForeColor == Color.Red)
                {
                    errorMessages += "Ground Time Off  is Too Long#!#";
                }
                #endregion[GroundTimeOff]
                #region[UpperLegAngleatTakeoffOff]
                if (lblUpperLegAngleatTakeoffOffM1.ForeColor == Color.Red && lblUpperLegAngleatTakeoffOffM2.ForeColor == Color.Red)
                {
                    if (Convert.ToInt16(lblUpperLegAngleatTakeoffOffI.Text) < Convert.ToInt16(lblUpperLegAngleatTakeoffOffM1.Text) &&
                        Convert.ToInt16(lblUpperLegAngleatTakeoffOffF.Text) < Convert.ToInt16(lblUpperLegAngleatTakeoffOffM2.Text))
                    {

                        errorMessages += "Upper Leg Angle at Takeoff Off is Too Small#!#";
                    }
                    else
                    {
                        if (Convert.ToInt16(lblUpperLegAngleatTakeoffOffI.Text) > Convert.ToInt16(lblUpperLegAngleatTakeoffOffM1.Text) &&
                            Convert.ToInt16(lblUpperLegAngleatTakeoffOffF.Text) > Convert.ToInt16(lblUpperLegAngleatTakeoffOffM2.Text))
                        {
                            errorMessages += "Upper Leg Angle at Takeoff Off is Too Large#!#";
                        }
                    }
                }
                #endregion[UpperLegAngleatTakeoffOff]
                #region[LowerLegAngleatTakeoffOff]
                if (lblLowerLegAngleatTakeoffOffM1.ForeColor == Color.Red && lblLowerLegAngleatTakeoffOffM2.ForeColor == Color.Red)
                {
                    if (Convert.ToInt16(lblLowerLegAngleatTakeoffOffI.Text) < Convert.ToInt16(lblLowerLegAngleatTakeoffOffM1.Text)
                        && Convert.ToInt16(lblLowerLegAngleatTakeoffOffF.Text) < Convert.ToInt16(lblLowerLegAngleatTakeoffOffM2.Text))
                    {
                        errorMessages += "Lower Leg Angle at Takeoff Off is Too Small#!#";
                    }
                    else
                    {
                        if (Convert.ToInt16(lblLowerLegAngleatTakeoffOffI.Text) > Convert.ToInt16(lblLowerLegAngleatTakeoffOffM1.Text)
                            && Convert.ToInt16(lblLowerLegAngleatTakeoffOffF.Text) > Convert.ToInt16(lblLowerLegAngleatTakeoffOffM2.Text))
                        {
                            errorMessages += "Lower Leg Angle at Takeoff Off is Too Large#!#";
                        }
                    }
                }
                #endregion[LowerLegAngleatTakeoffOff]
            }

            return errorMessages;
        }
    }

    string returnErrorMessageForStart(int step)
    {
        string errorMessages = string.Empty;
        if (!isComparison)
        {
            if (DropDownList1.SelectedItem.Text.EndsWith("Model View – Initial") || DropDownList1.SelectedItem.Text.EndsWith("Video View – Initial"))
            {
                if (step == 1)
                {
                    #region[Front Block Distance]

                    if (lblSetFrontBlockDistanceM1.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetFrontBlockDistanceI.Text)) < Convert.ToSingle(lblSetFrontBlockDistanceM1.Text))
                        {
                            errorMessages += "Front Block Distance is Too Close#!#";
                        }
                        else
                        {
                            errorMessages += "Front Block Distance is Too Far#!#";
                        }
                    }
                    #endregion[Front Block Distance]
                    #region[Rear Block Distance]
                    if (lblSetRearBlockDistanceM1.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetRearBlockDistanceI.Text)) < Convert.ToSingle(lblSetRearBlockDistanceM1.Text))
                        {
                            errorMessages += "Rear Block Distance is Too Close#!#";
                        }
                        else
                        {
                            errorMessages += "Rear Block Distance is Too Far#!#";
                        }
                    }
                    #endregion[Rear Block Distance]
                    #region[Front Upper Leg Angle]
                    if (lblSetFrontULAngleM1.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetFrontULAngleI.Text)) < Convert.ToSingle(lblSetFrontULAngleM1.Text))
                        {
                            errorMessages += "Front Upper Leg Angle is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Front Upper Leg Angle is Too Large#!#";
                        }
                    }
                    #endregion[Front Upper Leg Angle]
                    #region[Rear Upper Leg Angle]
                    if (lblSetRearULAngleM1.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetRearULAngleI.Text)) < Convert.ToSingle(lblSetRearULAngleM1.Text))
                        {
                            errorMessages += "Rear Upper Leg Angle is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Rear Upper Leg Angle is Too Large#!#";
                        }
                    }
                    #endregion[Rear Upper Leg Angle]
                    #region[Front Lower Leg Angle]
                    if (lblSetFrontLLAngleM1.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetFrontLLAngleI.Text)) < Convert.ToSingle(lblSetFrontLLAngleM1.Text))
                        {
                            errorMessages += "Front Lower Leg Angle is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Front Lower Leg Angle is Too Large#!#";
                        }
                    }
                    #endregion[Front Lower Leg Angle]
                    #region[Rear Lower Leg Angle]
                    if (lblSetRearLLAngleM1.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetRearLLAngleI.Text)) < Convert.ToSingle(lblSetRearLLAngleM1.Text))
                        {
                            errorMessages += "Rear Lower Leg Angle is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Rear Lower Leg Angle is Too Large#!#";
                        }
                    }
                    #endregion[Rear Lower Leg Angle]
                    #region[Trunk Angle]
                    if (lblSetTrunkAngleM1.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetTrunkAngleI.Text)) < Convert.ToSingle(lblSetTrunkAngleM1.Text))
                        {
                            errorMessages += "Trunk Angle is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Large#!#";
                        }
                    }
                    #endregion[Trunk Angle]
                    #region[COG Distance]
                    if (lblSetCOGDistanceM1.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetCOGDistanceI.Text)) < Convert.ToSingle(lblSetCOGDistanceM1.Text))
                        {
                            errorMessages += "COG Distance is Too Close#!#";
                        }
                        else
                        {
                            errorMessages += "COG Distance is Too Far#!#";
                        }
                    }
                    #endregion[COG Distance]
                }
                if (step == 2)
                {
                    #region[Rear Foot Clearance Time]
                    if (lblBCRearFootClearanceTimeM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Rear Foot Clearance Time is Too Long#!#";
                    }
                    #endregion[Rear Foot Clearance Time]
                    #region[Rear Lower Leg Angle at Rear Takeoff]
                    if (lblBCRearLLAngleTakeoffM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblBCRearLLAngleTakeoffI.Text) < Convert.ToInt16(lblBCRearLLAngleTakeoffM1.Text))
                        {
                            errorMessages += "Rear Lower Leg Angle at Rear Takeoff is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Rear Lower Leg Angle at Rear Takeoff is Too Large#!#";
                        }
                    }
                    #endregion[Rear Lower Leg Angle at Rear Takeoff]
                }
                if (step == 3)
                {
                    #region[Front Foot Clearance Time]
                    if (lblBCFrontFootClearanceTimeM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Front Foot Clearance Time is Too Long#!#";
                    }
                    #endregion[Front Foot Clearance Time]
                    #region[Front Lower Leg Angle at Front Takeoff]
                    if (lblBCFrontLLAngleTakeoffM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblBCFrontLLAngleTakeoffI.Text) < Convert.ToInt16(lblBCFrontLLAngleTakeoffM1.Text))
                        {
                            errorMessages += "Front Lower Leg Angle at Front Takeoff is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Front Lower Leg Angle at Front Takeoff is Too Large#!#";
                        }
                    }
                    #endregion[Front Lower Leg Angle at Front Takeoff]
                    #region[Trunk Angle at Takeoff]
                    if (lblBCTrunkAngleTakeoffM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblBCTrunkAngleTakeoffI.Text) < Convert.ToInt16(lblBCTrunkAngleTakeoffM1.Text))
                        {
                            errorMessages += "Trunk Angle at Takeoff is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle at Takeoff is Too Large#!#";
                        }
                    }
                    #endregion[Trunk Angle at Takeoff]
                    #region[Lower Leg Angle at Ankle Cross]
                    if (lblBCLLAngleACM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                    }
                    #endregion[Lower Leg Angle at Ankle Cross]
                    #region[commented]
                    //if (lblBCStrideRateM1.ForeColor == Color.Red)
                    //{
                    //    if (Convert.ToSingle(lblBCStrideRateI.Text) < Convert.ToSingle(lblBCStrideRateM1.Text))
                    //    {
                    //        errorMessages += "Stride Rate is Too Short#!#";
                    //    }
                    //    else
                    //    {
                    //        errorMessages += "Stride Rate is Too Long#!#";
                    //    }
                    //}
                    //if (lblBCStrideLengthM1.ForeColor == Color.Red)
                    //{
                    //    if (Convert.ToSingle(lblBCStrideLengthI.Text) < Convert.ToSingle(lblBCStrideLengthM1.Text))
                    //    {
                    //        errorMessages += "Stride Length  is Too Short#!#";
                    //    }
                    //    else
                    //    {
                    //        errorMessages += "Stride Length  is Too Long#!#";
                    //    }
                    //}
                    //if (lblBCVelocityM1.ForeColor == Color.Red)
                    //{
                    //    errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    //}

                    //if (lblStep1TrunkAngleTakeoffM1.ForeColor == Color.Red)
                    //{
                    //    if (Convert.ToInt16(lblStep1TrunkAngleTakeoffI.Text) < Convert.ToInt16(lblStep1TrunkAngleTakeoffM1.Text))
                    //    {
                    //        errorMessages += "Trunk Angle at Takeoff is Too Small#!#";
                    //    }
                    //    else
                    //    {
                    //        errorMessages += "Trunk Angle at Takeoff is Too Large#!#";
                    //    }
                    //}

                    //if (lblStep1LLAngleACM1.ForeColor == Color.Red)
                    //{
                    //    errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                    //}

                    //if (lblStep1StrideRateM1.ForeColor == Color.Red)
                    //{
                    //    if (Convert.ToSingle(lblStep1StrideRateI.Text) < Convert.ToSingle(lblStep1StrideRateM1.Text))
                    //    {
                    //        errorMessages += "Stride Rate is Too Short#!#";
                    //    }
                    //    else
                    //    {
                    //        errorMessages += "Stride Rate is Too Long#!#";
                    //    }
                    //}

                    //if (lblStep1StrideLengthM1.ForeColor == Color.Red)
                    //{
                    //    if (Convert.ToSingle(lblStep1StrideLengthI.Text) < Convert.ToSingle(lblStep1StrideLengthM1.Text))
                    //    {
                    //        errorMessages += "Stride Length  is Too Short#!#";
                    //    }
                    //    else
                    //    {
                    //        errorMessages += "Stride Length  is Too Long#!#";
                    //    }
                    //}

                    //if (lblStep1VelocityM1.ForeColor == Color.Red)
                    //{
                    //    errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    //}
                    //if (lblStep2TrunkAngleTakeoffM1.ForeColor == Color.Red)
                    //{
                    //    if (Convert.ToInt16(lblStep2TrunkAngleTakeoffI.Text) < Convert.ToInt16(lblStep2TrunkAngleTakeoffM1.Text))
                    //    {
                    //        errorMessages += "Trunk Angle at Takeoff is Too Small#!#";
                    //    }
                    //    else
                    //    {
                    //        errorMessages += "Trunk Angle at Takeoff is Too Large#!#";
                    //    }
                    //}
                    //if (lblStep2LLAngleACM1.ForeColor == Color.Red)
                    //{
                    //    errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                    //}
                    //if (lblStep2StrideRateM1.ForeColor == Color.Red)
                    //{
                    //    if (Convert.ToSingle(lblStep2StrideRateI.Text) < Convert.ToSingle(lblStep2StrideRateM1.Text))
                    //    {
                    //        errorMessages += "Stride Rate is Too Short#!#";
                    //    }
                    //    else
                    //    {
                    //        errorMessages += "Stride Rate is Too Long#!#";
                    //    }
                    //}
                    //if (lblStep2StrideLengthM1.ForeColor == Color.Red)
                    //{
                    //    if (Convert.ToSingle(lblStep2StrideLengthI.Text) < Convert.ToSingle(lblStep2StrideLengthM1.Text))
                    //    {
                    //        errorMessages += "Stride Length  is Too Short#!#";
                    //    }
                    //    else
                    //    {
                    //        errorMessages += "Stride Length  is Too Long#!#";
                    //    }
                    //}
                    //if (lblStep2VelocityM1.ForeColor == Color.Red)
                    //{
                    //    errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    //}
                    //if (lblTimeTo3mM1.ForeColor == Color.Red)
                    //{
                    //    errorMessages += "Time to 3 meters is Too Long#!#";
                    //}
                    //if (lblTimeTo5mM1.ForeColor == Color.Red)
                    //{
                    //    errorMessages += "Time to 5 meters is Too Long#!#";
                    //}
                    #endregion[commented]
                }

                if (step == 4)
                {
                    #region[BCAirTime]
                    if (lblBCAirTimeM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblBCAirTimeI.Text) < Convert.ToSingle(lblBCAirTimeM1.Text))
                        {
                            errorMessages += "Air Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Air Time is Too Long#!#";
                        }
                    }
                    #endregion[BCAirTime]
                    #region[BCStrideRate]
                    if (lblBCStrideRateM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblBCStrideRateI.Text) < Convert.ToSingle(lblBCStrideRateM1.Text))
                        {
                            errorMessages += "Stride Rate is Too Low#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Rate is Too High#!#";
                        }
                    }
                    #endregion[BCStrideRate]
                    #region[BCStrideLength]
                    if (lblBCStrideLengthM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblBCStrideLengthI.Text) < Convert.ToSingle(lblBCStrideLengthM1.Text))
                        {
                            errorMessages += "Stride Length  is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Length  is Too Long#!#";
                        }
                    }
                    #endregion[BCStrideLength]
                    #region[BCVelocity]
                    if (lblBCVelocityM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    }
                    #endregion[BCVelocity]
                    #region[Step1COGDistance]
                    if (lblStep1COGDistanceM1.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblStep1COGDistanceI.Text)) < Convert.ToSingle(lblStep1COGDistanceM1.Text))
                        {
                            errorMessages += "COG Touchdown Distance is Too Close#!#";
                        }
                        else
                        {
                            errorMessages += "COG Touchdown Distance is Too Far#!#";
                        }
                    }
                    #endregion[Step1COGDistance]
                }
                if (step == 5)
                {
                    #region[Step1GroundTime]
                    if (lblStep1GroundTimeM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep1GroundTimeI.Text) < Convert.ToSingle(lblStep1GroundTimeM1.Text))
                        {
                            errorMessages += "Ground Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Ground Time is Too Long#!#";
                        }
                    }
                    #endregion[Step1GroundTime]
                    #region[Step1LLAngleTakeoff]
                    if (lblStep1LLAngleTakeoffM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblStep1LLAngleTakeoffI.Text) < Convert.ToInt16(lblStep1LLAngleTakeoffM1.Text))
                        {
                            errorMessages += "Rear Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            errorMessages += "Rear Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                        }
                    }
                    #endregion[Step1LLAngleTakeoff]
                    #region[Step1TrunkAngleTakeoff]
                    if (lblStep1TrunkAngleTakeoffM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblStep1TrunkAngleTakeoffI.Text) < Convert.ToInt16(lblStep1TrunkAngleTakeoffM1.Text))
                        {
                            errorMessages += "Trunk Angle at Takeoff is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle at Takeoff is Too Large#!#";
                        }
                    }
                    #endregion[Step1TrunkAngleTakeoff]
                    #region[Step1LLAngleAC]
                    if (lblStep1LLAngleACM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                    }
                    #endregion[Step1LLAngleAC]
                }

                if (step == 6)
                {
                    #region[Step1AirTime]
                    if (lblStep1AirTimeM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep1AirTimeI.Text) < Convert.ToSingle(lblStep1AirTimeM1.Text))
                        {
                            errorMessages += "Air Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Air Time is Too Long#!#";
                        }
                    }
                    #endregion[Step1AirTime]
                    #region[Step1StrideRate]
                    if (lblStep1StrideRateM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep1StrideRateI.Text) < Convert.ToSingle(lblStep1StrideRateM1.Text))
                        {
                            errorMessages += "Stride Rate is Too Low#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Rate is Too High#!#";
                        }
                    }
                    #endregion[Step1StrideRate]
                    #region[Step1StrideLength]
                    if (lblStep1StrideLengthM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep1StrideLengthI.Text) < Convert.ToSingle(lblStep1StrideLengthM1.Text))
                        {
                            errorMessages += "Stride Length  is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Length  is Too Long#!#";
                        }
                    }
                    #endregion[Step1StrideLength]
                    #region[Step1Velocity]

                    if (lblStep1VelocityM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    }
                    #endregion[Step1Velocity]
                    #region[Step2COGDistance]
                    if (lblStep2COGDistanceM1.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblStep2COGDistanceI.Text)) < Convert.ToSingle(lblStep2COGDistanceM1.Text))
                        {
                            errorMessages += "COG Touchdown Distance is Too Close#!#";
                        }
                        else
                        {
                            errorMessages += "COG Touchdown Distance is Too Far#!#";
                        }
                    }
                    #endregion[Step2COGDistance]
                }

                if (step == 7)
                {
                    #region[Step2GroundTime]
                    if (lblStep2GroundTimeM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep2GroundTimeI.Text) < Convert.ToSingle(lblStep2GroundTimeM1.Text))
                        {
                            errorMessages += "Ground Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Ground Time is Too Long#!#";
                        }
                    }
                    #endregion[Step2GroundTime]
                    #region[Step2LLAngleTakeoff]
                    if (lblStep2LLAngleTakeoffM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblStep2LLAngleTakeoffI.Text) < Convert.ToInt16(lblStep2LLAngleTakeoffM1.Text))
                        {
                            errorMessages += "Rear Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            errorMessages += "Rear Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                        }
                    }
                    #endregion[Step2LLAngleTakeoff]
                    #region[Step2TrunkAngleTakeoff]
                    if (lblStep2TrunkAngleTakeoffM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblStep2TrunkAngleTakeoffI.Text) < Convert.ToInt16(lblStep2TrunkAngleTakeoffM1.Text))
                        {
                            errorMessages += "Trunk Angle at Takeoff is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle at Takeoff is Too Large#!#";
                        }
                    }
                    #endregion[Step2TrunkAngleTakeoff]
                    #region[Step2LLAngleAC]
                    if (lblStep2LLAngleACM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                    }
                    #endregion[Step2LLAngleAC]
                }
                if (step == 8)
                {
                    #region[Step2AirTime]
                    if (lblStep2AirTimeM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep2AirTimeI.Text) < Convert.ToSingle(lblStep2AirTimeM1.Text))
                        {
                            errorMessages += "Air Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Air Time is Too Long#!#";
                        }
                    }
                    #endregion[Step2AirTime]
                    #region[Step2StrideRate]

                    if (lblStep2StrideRateM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep2StrideRateI.Text) < Convert.ToSingle(lblStep2StrideRateM1.Text))
                        {
                            errorMessages += "Stride Rate is Too Low#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Rate is Too High#!#";
                        }
                    }
                    #endregion[Step2StrideRate]
                    #region[Step2StrideLength]
                    if (lblStep2StrideLengthM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep2StrideLengthI.Text) < Convert.ToSingle(lblStep2StrideLengthM1.Text))
                        {
                            errorMessages += "Stride Length  is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Length  is Too Long#!#";
                        }
                    }
                    #endregion[Step2StrideLength]
                    #region[Step2Velocity]
                    if (lblStep2VelocityM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    }
                    #endregion[Step2Velocity]
                    #region[Step3COGDistance]

                    if (lblStep3COGDistanceM1.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblStep3COGDistanceI.Text)) < Convert.ToSingle(lblStep3COGDistanceM1.Text))
                        {
                            errorMessages += "COG Touchdown Distance is Too Close#!#";
                        }
                        else
                        {
                            errorMessages += "COG Touchdown Distance is Too Far#!#";
                        }
                    }
                    #endregion[Step3COGDistance]
                    #region[TimeTo3m]

                    if (lblTimeTo3mM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Time to 3 meters is Too Long#!#";
                    }
                    #endregion[TimeTo3m]
                    #region[TimeTo5mM1]
                    if (lblTimeTo5mM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Time to 5 meters is Too Long#!#";
                    }
                    #endregion[TimeTo5mM1]
                }
                MakeStartFinalVariableChartValuesHidden();
                return errorMessages;
            }

            else
            {
                if (step == 1)
                {
                    if (lblSetFrontBlockDistanceM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetFrontBlockDistanceF.Text)) < Convert.ToSingle(lblSetFrontBlockDistanceM2.Text))
                        {
                            errorMessages += "Front Block Distance is Too Close#!#";
                        }
                        else
                        {
                            errorMessages += "Front Block Distance is Too Far#!#";
                        }
                    }

                    if (lblSetRearBlockDistanceM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetRearBlockDistanceF.Text)) < Convert.ToSingle(lblSetRearBlockDistanceM2.Text))
                        {
                            errorMessages += "Rear Block Distance is Too Close#!#";
                        }
                        else
                        {
                            errorMessages += "Rear Block Distance is Too Far#!#";
                        }
                    }

                    if (lblSetFrontULAngleM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetFrontULAngleF.Text)) < Convert.ToSingle(lblSetFrontULAngleM2.Text))
                        {
                            errorMessages += "Front Upper Leg Angle is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Front Upper Leg Angle is Too Large#!#";
                        }
                    }


                    if (lblSetRearULAngleM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetRearULAngleF.Text)) < Convert.ToSingle(lblSetRearULAngleM2.Text))
                        {
                            errorMessages += "Rear Upper Leg Angle is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Rear Upper Leg Angle is Too Large#!#";
                        }
                    }

                    if (lblSetFrontLLAngleM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetFrontLLAngleF.Text)) < Convert.ToSingle(lblSetFrontLLAngleM2.Text))
                        {
                            errorMessages += "Front Lower Leg Angle is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Front Lower Leg Angle is Too Large#!#";
                        }
                    }

                    if (lblSetRearLLAngleM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetRearLLAngleF.Text)) < Convert.ToSingle(lblSetRearLLAngleM2.Text))
                        {
                            errorMessages += "Rear Lower Leg Angle is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Rear Lower Leg Angle is Too Large#!#";
                        }
                    }

                    if (lblSetTrunkAngleM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetTrunkAngleF.Text)) < Convert.ToSingle(lblSetTrunkAngleM2.Text))
                        {
                            errorMessages += "Trunk Angle is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Large#!#";
                        }
                    }

                    if (lblSetCOGDistanceM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetCOGDistanceF.Text)) < Convert.ToSingle(lblSetCOGDistanceM2.Text))
                        {
                            errorMessages += "COG Distance is Too Close#!#";
                        }
                        else
                        {
                            errorMessages += "COG Distance is Too Far#!#";
                        }
                    }
                }

                if (step == 2)
                {
                    if (lblBCRearFootClearanceTimeM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Rear Foot Clearance Time is Too Long#!#";
                    }

                    if (lblBCRearLLAngleTakeoffM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblBCRearLLAngleTakeoffF.Text) < Convert.ToInt16(lblBCRearLLAngleTakeoffM2.Text))
                        {
                            errorMessages += "Rear Lower Leg Angle at Rear Takeoff is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Rear Lower Leg Angle at Rear Takeoff is Too Large#!#";
                        }
                    }

                }
                if (step == 3)
                {
                    if (lblBCFrontFootClearanceTimeM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Front Foot Clearance Time is Too Long#!#";
                    }

                    if (lblBCFrontLLAngleTakeoffM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblBCFrontLLAngleTakeoffF.Text) < Convert.ToInt16(lblBCFrontLLAngleTakeoffM2.Text))
                        {
                            errorMessages += "Front Lower Leg Angle at Front Takeoff is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Front Lower Leg Angle at Front Takeoff is Too Large#!#";
                        }
                    }
                    if (lblBCTrunkAngleTakeoffM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblBCTrunkAngleTakeoffF.Text) < Convert.ToInt16(lblBCTrunkAngleTakeoffM2.Text))
                        {
                            errorMessages += "Trunk Angle at Takeoff is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle at Takeoff is Too Large#!#";
                        }
                    }
                    if (lblBCLLAngleACM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                    }

                }

                if (step == 4)
                {
                    if (lblBCAirTimeM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblBCAirTimeF.Text) < Convert.ToSingle(lblBCAirTimeM2.Text))
                        {
                            errorMessages += "Air Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Air Time is Too Long#!#";
                        }
                    }
                    if (lblBCStrideRateM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblBCStrideRateF.Text) < Convert.ToSingle(lblBCStrideRateM2.Text))
                        {
                            errorMessages += "Stride Rate is Too Low#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Rate is Too High#!#";
                        }
                    }

                    if (lblBCStrideLengthM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblBCStrideLengthF.Text) < Convert.ToSingle(lblBCStrideLengthM2.Text))
                        {
                            errorMessages += "Stride Length  is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Length  is Too Long#!#";
                        }
                    }
                    if (lblBCVelocityM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    }

                    if (lblStep1COGDistanceM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblStep1COGDistanceF.Text)) < Convert.ToSingle(lblStep1COGDistanceM2.Text))
                        {
                            errorMessages += "COG Touchdown Distance is Too Close#!#";
                        }
                        else
                        {
                            errorMessages += "COG Touchdown Distance is Too Far#!#";
                        }
                    }

                }

                if (step == 5)
                {
                    if (lblStep1GroundTimeM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep1GroundTimeF.Text) < Convert.ToSingle(lblStep1GroundTimeM2.Text))
                        {
                            errorMessages += "Ground Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Ground Time is Too Long#!#";
                        }
                    }

                    if (lblStep1LLAngleTakeoffM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblStep1LLAngleTakeoffF.Text) < Convert.ToInt16(lblStep1LLAngleTakeoffM2.Text))
                        {
                            errorMessages += "Rear Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            errorMessages += "Rear Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                        }
                    }

                    if (lblStep1TrunkAngleTakeoffM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblStep1TrunkAngleTakeoffF.Text) < Convert.ToInt16(lblStep1TrunkAngleTakeoffM2.Text))
                        {
                            errorMessages += "Trunk Angle at Takeoff is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle at Takeoff is Too Large#!#";

                        }
                    }

                    if (lblStep1LLAngleACM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                    }
                }


                if (step == 6)
                {
                    if (lblStep1AirTimeM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep1AirTimeF.Text) < Convert.ToSingle(lblStep1AirTimeM2.Text))
                        {
                            errorMessages += "Air Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Air Time is Too Long#!#";
                        }
                    }

                    if (lblStep1StrideRateM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep1StrideRateF.Text) < Convert.ToSingle(lblStep1StrideRateM2.Text))
                        {
                            errorMessages += "Stride Rate is Too Low#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Rate is Too High#!#";
                        }
                    }
                    if (lblStep1StrideLengthM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep1StrideLengthF.Text) < Convert.ToSingle(lblStep1StrideLengthM2.Text))
                        {
                            errorMessages += "Stride Length  is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Length  is Too Long#!#";
                        }
                    }
                    if (lblStep1VelocityM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    }
                    if (lblStep2COGDistanceM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblStep2COGDistanceF.Text)) < Convert.ToSingle(lblStep2COGDistanceM2.Text))
                        {
                            errorMessages += "COG Touchdown Distance is Too Close#!#";
                        }
                        else
                        {
                            errorMessages += "COG Touchdown Distance is Too Far#!#";
                        }
                    }
                }
                if (step == 7)
                {
                    if (lblStep2GroundTimeM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep2GroundTimeF.Text) < Convert.ToSingle(lblStep2GroundTimeM2.Text))
                        {
                            errorMessages += "Ground Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Ground Time is Too Long#!#";
                        }
                    }
                    if (lblStep2LLAngleTakeoffM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblStep2LLAngleTakeoffF.Text) < Convert.ToInt16(lblStep2LLAngleTakeoffM2.Text))
                        {
                            errorMessages += "Rear Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            errorMessages += "Rear Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                        }
                    }
                    if (lblStep2TrunkAngleTakeoffM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt16(lblStep2TrunkAngleTakeoffF.Text) < Convert.ToInt16(lblStep2TrunkAngleTakeoffM2.Text))
                        {
                            errorMessages += "Trunk Angle at Takeoff is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle at Takeoff is Too Large#!#";
                        }
                    }
                    if (lblStep2LLAngleACM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                    }

                }
                if (step == 8)
                {
                    if (lblStep2AirTimeM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep2AirTimeF.Text) < Convert.ToSingle(lblStep2AirTimeM2.Text))
                        {
                            errorMessages += "Air Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Air Time is Too Long#!#";
                        }
                    }
                    if (lblStep2StrideRateM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep2StrideRateF.Text) < Convert.ToSingle(lblStep2StrideRateM2.Text))
                        {
                            errorMessages += "Stride Rate is Too Low#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Rate is Too High#!#";
                        }
                    }

                    if (lblStep2StrideLengthM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToSingle(lblStep2StrideLengthF.Text) < Convert.ToSingle(lblStep2StrideLengthM2.Text))
                        {
                            errorMessages += "Stride Length  is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Length  is Too Long#!#";
                        }
                    }
                    if (lblStep2VelocityM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    }
                    if (lblStep3COGDistanceM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblStep3COGDistanceF.Text)) < Convert.ToSingle(lblStep3COGDistanceM2.Text))
                        {
                            errorMessages += "COG Touchdown Distance is Too Close#!#";
                        }
                        else
                        {
                            errorMessages += "COG Touchdown Distance is Too Far#!#";
                        }
                    }
                    if (lblTimeTo3mM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Time to 3 meters is Too Long#!#";
                    }
                    if (lblTimeTo5mM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Time to 5 meters is Too Long#!#";
                    }
                }
            }
            MakeStartInitialVariableChartValuesHidden();
            return errorMessages;
        }
        else
        {
            leftMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList1.SelectedValue));
            rightMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList3.SelectedValue));

            string LVideopath = leftMovie.FilePath;
            string RVideopath = rightMovie.FilePath;

            GetStartLeftMovieVariablesforNonTires(leftMovie.LessonId, LVideopath);
            GetStartRightMovieVariablesforNonTires(rightMovie.LessonId, RVideopath);
            if (step == 1)
            {
                #region[Front Block Distance]

                if (lblSetFrontBlockDistanceM1.ForeColor == Color.Red && lblSetFrontBlockDistanceM2.ForeColor == Color.Red)
                {
                    if (Math.Abs(Convert.ToSingle(lblSetFrontBlockDistanceI.Text)) < Convert.ToSingle(lblSetFrontBlockDistanceM1.Text)
                        && Math.Abs(Convert.ToSingle(lblSetFrontBlockDistanceF.Text)) < Convert.ToSingle(lblSetFrontBlockDistanceM2.Text))
                    {
                        errorMessages += "Front Block Distance is Too Close#!#";
                    }
                    else
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetFrontBlockDistanceI.Text)) > Convert.ToSingle(lblSetFrontBlockDistanceM1.Text)
                            && Math.Abs(Convert.ToSingle(lblSetFrontBlockDistanceF.Text)) > Convert.ToSingle(lblSetFrontBlockDistanceM2.Text))
                        {
                            errorMessages += "Front Block Distance is Too Far#!#";
                        }
                    }
                }
                #endregion[Front Block Distance]
                #region[Rear Block Distance]
                if (lblSetRearBlockDistanceM1.ForeColor == Color.Red && lblSetRearBlockDistanceM2.ForeColor == Color.Red)
                {
                    if (Math.Abs(Convert.ToSingle(lblSetRearBlockDistanceI.Text)) < Convert.ToSingle(lblSetRearBlockDistanceM1.Text) &&
                        Math.Abs(Convert.ToSingle(lblSetRearBlockDistanceF.Text)) < Convert.ToSingle(lblSetRearBlockDistanceM2.Text))
                    {
                        errorMessages += "Rear Block Distance is Too Close#!#";
                    }
                    else
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetRearBlockDistanceI.Text)) > Convert.ToSingle(lblSetRearBlockDistanceM1.Text) &&
                            Math.Abs(Convert.ToSingle(lblSetRearBlockDistanceF.Text)) > Convert.ToSingle(lblSetRearBlockDistanceM2.Text))
                        {
                            errorMessages += "Rear Block Distance is Too Far#!#";
                        }
                    }
                }
                #endregion[Rear Block Distance]
                #region[Front Upper Leg Angle]
                if (lblSetFrontULAngleM1.ForeColor == Color.Red && lblSetFrontULAngleM2.ForeColor == Color.Red)
                {
                    if (Math.Abs(Convert.ToSingle(lblSetFrontULAngleI.Text)) < Convert.ToSingle(lblSetFrontULAngleM1.Text) &&
                        Math.Abs(Convert.ToSingle(lblSetFrontULAngleF.Text)) < Convert.ToSingle(lblSetFrontULAngleM2.Text))
                    {
                        errorMessages += "Front Upper Leg Angle is Too Small#!#";
                    }
                    else
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetFrontULAngleI.Text)) > Convert.ToSingle(lblSetFrontULAngleM1.Text) &&
                            Math.Abs(Convert.ToSingle(lblSetFrontULAngleF.Text)) > Convert.ToSingle(lblSetFrontULAngleM2.Text))
                        {
                            errorMessages += "Front Upper Leg Angle is Too Large#!#";
                        }
                    }
                }
                #endregion[Front Upper Leg Angle]
                #region[Rear Upper Leg Angle]
                if (lblSetRearULAngleM1.ForeColor == Color.Red && lblSetRearULAngleM2.ForeColor == Color.Red)
                {
                    if (Math.Abs(Convert.ToSingle(lblSetRearULAngleI.Text)) < Convert.ToSingle(lblSetRearULAngleM1.Text) &&
                        Math.Abs(Convert.ToSingle(lblSetRearULAngleF.Text)) < Convert.ToSingle(lblSetRearULAngleM2.Text))
                    {
                        errorMessages += "Rear Upper Leg Angle is Too Small#!#";
                    }
                    else
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetRearULAngleI.Text)) > Convert.ToSingle(lblSetRearULAngleM1.Text) &&
                            Math.Abs(Convert.ToSingle(lblSetRearULAngleF.Text)) > Convert.ToSingle(lblSetRearULAngleM2.Text))
                        {
                            errorMessages += "Rear Upper Leg Angle is Too Large#!#";
                        }
                    }
                }
                #endregion[Rear Upper Leg Angle]
                #region[Front Lower Leg Angle]
                if (lblSetFrontLLAngleM1.ForeColor == Color.Red && lblSetFrontLLAngleM2.ForeColor == Color.Red)
                {
                    if (Math.Abs(Convert.ToSingle(lblSetFrontLLAngleI.Text)) < Convert.ToSingle(lblSetFrontLLAngleM1.Text) &&
                        Math.Abs(Convert.ToSingle(lblSetFrontLLAngleF.Text)) < Convert.ToSingle(lblSetFrontLLAngleM2.Text))
                    {
                        errorMessages += "Front Lower Leg Angle is Too Small#!#";
                    }
                    else
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetFrontLLAngleI.Text)) > Convert.ToSingle(lblSetFrontLLAngleM1.Text) &&
                            Math.Abs(Convert.ToSingle(lblSetFrontLLAngleF.Text)) > Convert.ToSingle(lblSetFrontLLAngleM2.Text))
                        {
                            errorMessages += "Front Lower Leg Angle is Too Large#!#";
                        }
                    }
                }
                #endregion[Front Lower Leg Angle]
                #region[Rear Lower Leg Angle]
                if (lblSetRearLLAngleM1.ForeColor == Color.Red && lblSetRearLLAngleM2.ForeColor == Color.Red)
                {
                    if (Math.Abs(Convert.ToSingle(lblSetRearLLAngleI.Text)) < Convert.ToSingle(lblSetRearLLAngleM1.Text) &&
                        Math.Abs(Convert.ToSingle(lblSetRearLLAngleF.Text)) < Convert.ToSingle(lblSetRearLLAngleM2.Text))
                    {
                        errorMessages += "Rear Lower Leg Angle is Too Small#!#";
                    }
                    else
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetRearLLAngleI.Text)) > Convert.ToSingle(lblSetRearLLAngleM1.Text) &&
                            Math.Abs(Convert.ToSingle(lblSetRearLLAngleF.Text)) > Convert.ToSingle(lblSetRearLLAngleM2.Text))
                        {
                            errorMessages += "Rear Lower Leg Angle is Too Large#!#";
                        }
                    }
                }
                #endregion[Rear Lower Leg Angle]
                #region[Trunk Angle]
                if (lblSetTrunkAngleM1.ForeColor == Color.Red && lblSetTrunkAngleM2.ForeColor == Color.Red)
                {
                    if (Math.Abs(Convert.ToSingle(lblSetTrunkAngleI.Text)) < Convert.ToSingle(lblSetTrunkAngleM1.Text) &&
                        Math.Abs(Convert.ToSingle(lblSetTrunkAngleF.Text)) < Convert.ToSingle(lblSetTrunkAngleM2.Text))
                    {
                        errorMessages += "Trunk Angle is Too Small#!#";
                    }
                    else
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetTrunkAngleI.Text)) > Convert.ToSingle(lblSetTrunkAngleM1.Text) &&
                            Math.Abs(Convert.ToSingle(lblSetTrunkAngleF.Text)) > Convert.ToSingle(lblSetTrunkAngleM2.Text))
                        {
                            errorMessages += "Trunk Angle is Too Large#!#";
                        }
                    }
                }
                #endregion[Trunk Angle]
                #region[COG Distance]
                if (lblSetCOGDistanceM1.ForeColor == Color.Red && lblSetCOGDistanceM2.ForeColor == Color.Red)
                {
                    if (Math.Abs(Convert.ToSingle(lblSetCOGDistanceI.Text)) < Convert.ToSingle(lblSetCOGDistanceM1.Text) &&
                        Math.Abs(Convert.ToSingle(lblSetCOGDistanceF.Text)) < Convert.ToSingle(lblSetCOGDistanceM2.Text))
                    {
                        errorMessages += "COG Distance is Too Close#!#";
                    }
                    else
                    {
                        if (Math.Abs(Convert.ToSingle(lblSetCOGDistanceI.Text)) > Convert.ToSingle(lblSetCOGDistanceM1.Text) &&
                            Math.Abs(Convert.ToSingle(lblSetCOGDistanceF.Text)) > Convert.ToSingle(lblSetCOGDistanceM2.Text))
                        {
                            errorMessages += "COG Distance is Too Far#!#";
                        }
                    }
                }
                #endregion[COG Distance]
            }
            if (step == 2)
            {
                #region[Rear Foot Clearance Time]
                if (lblBCRearFootClearanceTimeM1.ForeColor == Color.Red && lblBCRearFootClearanceTimeM2.ForeColor == Color.Red)
                {
                    errorMessages += "Rear Foot Clearance Time is Too Long#!#";
                }
                #endregion[Rear Foot Clearance Time]
                #region[Rear Lower Leg Angle at Rear Takeoff]
                if (lblBCRearLLAngleTakeoffM1.ForeColor == Color.Red && lblBCRearLLAngleTakeoffM2.ForeColor == Color.Red)
                {
                    if (Convert.ToInt16(lblBCRearLLAngleTakeoffI.Text) < Convert.ToInt16(lblBCRearLLAngleTakeoffM1.Text) &&
                        Convert.ToInt16(lblBCRearLLAngleTakeoffF.Text) < Convert.ToInt16(lblBCRearLLAngleTakeoffM2.Text))
                    {
                        errorMessages += "Rear Lower Leg Angle at Rear Takeoff is Too Small#!#";
                    }
                    else
                    {
                        if (Convert.ToInt16(lblBCRearLLAngleTakeoffI.Text) > Convert.ToInt16(lblBCRearLLAngleTakeoffM1.Text) &&
                            Convert.ToInt16(lblBCRearLLAngleTakeoffF.Text) > Convert.ToInt16(lblBCRearLLAngleTakeoffM2.Text))
                        {
                            errorMessages += "Rear Lower Leg Angle at Rear Takeoff is Too Large#!#";
                        }
                    }
                }
                #endregion[Rear Lower Leg Angle at Rear Takeoff]
            }
            if (step == 3)
            {
                #region[Front Foot Clearance Time]
                if (lblBCFrontFootClearanceTimeM1.ForeColor == Color.Red && lblBCFrontFootClearanceTimeM2.ForeColor == Color.Red)
                {
                    errorMessages += "Front Foot Clearance Time is Too Long#!#";
                }
                #endregion[Front Foot Clearance Time]
                #region[Front Lower Leg Angle at Front Takeoff]
                if (lblBCFrontLLAngleTakeoffM1.ForeColor == Color.Red && lblBCFrontLLAngleTakeoffM2.ForeColor == Color.Red)
                {
                    if (Convert.ToInt16(lblBCFrontLLAngleTakeoffI.Text) < Convert.ToInt16(lblBCFrontLLAngleTakeoffM1.Text)
                        && Convert.ToInt16(lblBCFrontLLAngleTakeoffF.Text) < Convert.ToInt16(lblBCFrontLLAngleTakeoffM2.Text))
                    {
                        errorMessages += "Front Lower Leg Angle at Front Takeoff is Too Small#!#";
                    }
                    else
                    {
                        if (Convert.ToInt16(lblBCFrontLLAngleTakeoffI.Text) > Convert.ToInt16(lblBCFrontLLAngleTakeoffM1.Text)
                            && Convert.ToInt16(lblBCFrontLLAngleTakeoffF.Text) > Convert.ToInt16(lblBCFrontLLAngleTakeoffM2.Text))
                        {
                            errorMessages += "Front Lower Leg Angle at Front Takeoff is Too Large#!#";
                        }
                    }
                }
                #endregion[Front Lower Leg Angle at Front Takeoff]
                #region[Trunk Angle at Takeoff]
                if (lblBCTrunkAngleTakeoffM1.ForeColor == Color.Red && lblBCTrunkAngleTakeoffM2.ForeColor == Color.Red)
                {
                    if (Convert.ToInt16(lblBCTrunkAngleTakeoffI.Text) < Convert.ToInt16(lblBCTrunkAngleTakeoffM1.Text) &&
                        Convert.ToInt16(lblBCTrunkAngleTakeoffF.Text) < Convert.ToInt16(lblBCTrunkAngleTakeoffM2.Text))
                    {
                        errorMessages += "Trunk Angle at Takeoff is Too Small#!#";
                    }
                    else
                    {
                        if (Convert.ToInt16(lblBCTrunkAngleTakeoffI.Text) > Convert.ToInt16(lblBCTrunkAngleTakeoffM1.Text) &&
                            Convert.ToInt16(lblBCTrunkAngleTakeoffF.Text) > Convert.ToInt16(lblBCTrunkAngleTakeoffM2.Text))
                        {
                            errorMessages += "Trunk Angle at Takeoff is Too Large#!#";
                        }
                    }
                }
                #endregion[Trunk Angle at Takeoff]
                #region[Lower Leg Angle at Ankle Cross]
                if (lblBCLLAngleACM1.ForeColor == Color.Red && lblBCLLAngleACM2.ForeColor == Color.Red)
                {
                    errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                }
                #endregion[Lower Leg Angle at Ankle Cross]

            }

            if (step == 4)
            {
                #region[BCAirTime]
                if (lblBCAirTimeM1.ForeColor == Color.Red && lblBCAirTimeM2.ForeColor == Color.Red)
                {
                    if (Convert.ToSingle(lblBCAirTimeI.Text) < Convert.ToSingle(lblBCAirTimeM1.Text) &&
                        Convert.ToSingle(lblBCAirTimeF.Text) < Convert.ToSingle(lblBCAirTimeM2.Text))
                    {
                        errorMessages += "Air Time is Too Short#!#";
                    }
                    else
                    {
                        if (Convert.ToSingle(lblBCAirTimeI.Text) > Convert.ToSingle(lblBCAirTimeM1.Text) &&
                            Convert.ToSingle(lblBCAirTimeF.Text) > Convert.ToSingle(lblBCAirTimeM2.Text))
                        {
                            errorMessages += "Air Time is Too Long#!#";
                        }
                    }
                }
                #endregion[BCAirTime]
                #region[BCStrideRate]
                if (lblBCStrideRateM1.ForeColor == Color.Red && lblBCStrideRateM2.ForeColor == Color.Red)
                {
                    if (Convert.ToSingle(lblBCStrideRateI.Text) < Convert.ToSingle(lblBCStrideRateM1.Text) &&
                        Convert.ToSingle(lblBCStrideRateF.Text) < Convert.ToSingle(lblBCStrideRateM2.Text))
                    {
                        errorMessages += "Stride Rate is Too Low#!#";
                    }
                    else
                    {
                        if (Convert.ToSingle(lblBCStrideRateI.Text) > Convert.ToSingle(lblBCStrideRateM1.Text) &&
                            Convert.ToSingle(lblBCStrideRateF.Text) > Convert.ToSingle(lblBCStrideRateM2.Text))
                        {
                            errorMessages += "Stride Rate is Too High#!#";
                        }
                    }
                }
                #endregion[BCStrideRate]
                #region[BCStrideLength]
                if (lblBCStrideLengthM1.ForeColor == Color.Red && lblBCStrideLengthM2.ForeColor == Color.Red)
                {
                    if (Convert.ToSingle(lblBCStrideLengthI.Text) < Convert.ToSingle(lblBCStrideLengthM1.Text) &&
                        Convert.ToSingle(lblBCStrideLengthF.Text) < Convert.ToSingle(lblBCStrideLengthM2.Text))
                    {
                        errorMessages += "Stride Length  is Too Short#!#";
                    }
                    else
                    {
                        if (Convert.ToSingle(lblBCStrideLengthI.Text) > Convert.ToSingle(lblBCStrideLengthM1.Text) &&
                            Convert.ToSingle(lblBCStrideLengthF.Text) > Convert.ToSingle(lblBCStrideLengthM2.Text))
                        {
                            errorMessages += "Stride Length  is Too Long#!#";
                        }
                    }
                }
                #endregion[BCStrideLength]
                #region[BCVelocity]
                if (lblBCVelocityM1.ForeColor == Color.Red && lblBCVelocityM2.ForeColor == Color.Red)
                {
                    errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                }
                #endregion[BCVelocity]
                #region[Step1COGDistance]
                if (lblStep1COGDistanceM1.ForeColor == Color.Red && lblStep1COGDistanceM1.ForeColor == Color.Red)
                {
                    if (Math.Abs(Convert.ToSingle(lblStep1COGDistanceI.Text)) < Convert.ToSingle(lblStep1COGDistanceM1.Text)
                        && Math.Abs(Convert.ToSingle(lblStep1COGDistanceF.Text)) < Convert.ToSingle(lblStep1COGDistanceM2.Text))
                    {
                        errorMessages += "COG Touchdown Distance is Too Close#!#";
                    }
                    else
                    {
                        if (Math.Abs(Convert.ToSingle(lblStep1COGDistanceI.Text)) > Convert.ToSingle(lblStep1COGDistanceM1.Text)
                            && Math.Abs(Convert.ToSingle(lblStep1COGDistanceF.Text)) > Convert.ToSingle(lblStep1COGDistanceM2.Text))
                        {
                            errorMessages += "COG Touchdown Distance is Too Far#!#";
                        }
                    }
                }
                #endregion[Step1COGDistance]
            }
            if (step == 5)
            {
                #region[Step1GroundTime]
                if (lblStep1GroundTimeM1.ForeColor == Color.Red && lblStep1GroundTimeM2.ForeColor == Color.Red)
                {
                    if (Convert.ToSingle(lblStep1GroundTimeI.Text) < Convert.ToSingle(lblStep1GroundTimeM2.Text)
                        && Convert.ToSingle(lblStep1GroundTimeI.Text) < Convert.ToSingle(lblStep1GroundTimeM2.Text))
                    {
                        errorMessages += "Ground Time is Too Short#!#";
                    }
                    else
                    {
                        if (Convert.ToSingle(lblStep1GroundTimeI.Text) > Convert.ToSingle(lblStep1GroundTimeM2.Text)
                            && Convert.ToSingle(lblStep1GroundTimeI.Text) > Convert.ToSingle(lblStep1GroundTimeM2.Text))
                        {
                            errorMessages += "Ground Time is Too Long#!#";
                        }
                    }
                }
                #endregion[Step1GroundTime]
                #region[Step1LLAngleTakeoff]
                if (lblStep1LLAngleTakeoffM1.ForeColor == Color.Red && lblStep1LLAngleTakeoffM2.ForeColor == Color.Red)
                {
                    if (Convert.ToInt16(lblStep1LLAngleTakeoffI.Text) < Convert.ToInt16(lblStep1LLAngleTakeoffM1.Text)
                        && Convert.ToInt16(lblStep1LLAngleTakeoffF.Text) < Convert.ToInt16(lblStep1LLAngleTakeoffM2.Text))
                    {
                        errorMessages += "Rear Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                    }
                    else
                    {
                        if (Convert.ToInt16(lblStep1LLAngleTakeoffI.Text) > Convert.ToInt16(lblStep1LLAngleTakeoffM1.Text)
                            && Convert.ToInt16(lblStep1LLAngleTakeoffF.Text) > Convert.ToInt16(lblStep1LLAngleTakeoffM2.Text))
                        {
                            errorMessages += "Rear Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                        }
                    }
                }
                #endregion[Step1LLAngleTakeoff]
                #region[Step1TrunkAngleTakeoff]
                if (lblStep1TrunkAngleTakeoffM1.ForeColor == Color.Red && lblStep1TrunkAngleTakeoffM2.ForeColor == Color.Red)
                {
                    if (Convert.ToInt16(lblStep1TrunkAngleTakeoffI.Text) < Convert.ToInt16(lblStep1TrunkAngleTakeoffM1.Text) &&
                        Convert.ToInt16(lblStep1TrunkAngleTakeoffF.Text) < Convert.ToInt16(lblStep1TrunkAngleTakeoffM2.Text))
                    {
                        errorMessages += "Trunk Angle at Takeoff is Too Small#!#";
                    }
                    else
                    {
                        if (Convert.ToInt16(lblStep1TrunkAngleTakeoffI.Text) > Convert.ToInt16(lblStep1TrunkAngleTakeoffM1.Text) &&
                            Convert.ToInt16(lblStep1TrunkAngleTakeoffF.Text) > Convert.ToInt16(lblStep1TrunkAngleTakeoffM2.Text))
                        {
                            errorMessages += "Trunk Angle at Takeoff is Too Large#!#";
                        }
                    }
                }
                #endregion[Step1TrunkAngleTakeoff]
                #region[Step1LLAngleAC]
                if (lblStep1LLAngleACM1.ForeColor == Color.Red && lblStep1LLAngleACM2.ForeColor == Color.Red)
                {
                    errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                }
                #endregion[Step1LLAngleAC]
            }

            if (step == 6)
            {
                #region[Step1AirTime]
                if (lblStep1AirTimeM1.ForeColor == Color.Red && lblStep1AirTimeM2.ForeColor == Color.Red)
                {
                    if (Convert.ToSingle(lblStep1AirTimeI.Text) < Convert.ToSingle(lblStep1AirTimeM1.Text) &&
                        Convert.ToSingle(lblStep1AirTimeF.Text) < Convert.ToSingle(lblStep1AirTimeM2.Text))
                    {
                        errorMessages += "Air Time is Too Short#!#";
                    }
                    else
                    {
                        if (Convert.ToSingle(lblStep1AirTimeI.Text) > Convert.ToSingle(lblStep1AirTimeM1.Text) &&
                            Convert.ToSingle(lblStep1AirTimeF.Text) > Convert.ToSingle(lblStep1AirTimeM2.Text))
                        {
                            errorMessages += "Air Time is Too Long#!#";
                        }
                    }
                }
                #endregion[Step1AirTime]
                #region[Step1StrideRate]
                if (lblStep1StrideRateM1.ForeColor == Color.Red && lblStep1StrideRateM2.ForeColor == Color.Red)
                {
                    if (Convert.ToSingle(lblStep1StrideRateI.Text) < Convert.ToSingle(lblStep1StrideRateM1.Text) &&
                        Convert.ToSingle(lblStep1StrideRateF.Text) < Convert.ToSingle(lblStep1StrideRateM2.Text))
                    {
                        errorMessages += "Stride Rate is Too Low#!#";
                    }
                    else
                    {
                        if (Convert.ToSingle(lblStep1StrideRateI.Text) < Convert.ToSingle(lblStep1StrideRateM1.Text) &&
                            Convert.ToSingle(lblStep1StrideRateF.Text) < Convert.ToSingle(lblStep1StrideRateM2.Text))
                        {
                            errorMessages += "Stride Rate is Too High#!#";
                        }
                    }
                }
                #endregion[Step1StrideRate]
                #region[Step1StrideLength]
                if (lblStep1StrideLengthM1.ForeColor == Color.Red && lblStep1StrideLengthM2.ForeColor == Color.Red)
                {
                    if (Convert.ToSingle(lblStep1StrideLengthI.Text) < Convert.ToSingle(lblStep1StrideLengthM1.Text) &&
                        Convert.ToSingle(lblStep1StrideLengthF.Text) < Convert.ToSingle(lblStep1StrideLengthM2.Text))
                    {
                        errorMessages += "Stride Length  is Too Short#!#";
                    }
                    else
                    {
                        if (Convert.ToSingle(lblStep1StrideLengthI.Text) > Convert.ToSingle(lblStep1StrideLengthM1.Text) &&
                            Convert.ToSingle(lblStep1StrideLengthF.Text) > Convert.ToSingle(lblStep1StrideLengthM2.Text))
                        {
                            errorMessages += "Stride Length  is Too Long#!#";
                        }
                    }
                }
                #endregion[Step1StrideLength]
                #region[Step1Velocity]

                if (lblStep1VelocityM1.ForeColor == Color.Red && lblStep1VelocityM2.ForeColor == Color.Red)
                {
                    errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                }
                #endregion[Step1Velocity]
                #region[Step2COGDistance]
                if (lblStep2COGDistanceM1.ForeColor == Color.Red && lblStep2COGDistanceM2.ForeColor == Color.Red)
                {
                    if (Math.Abs(Convert.ToSingle(lblStep2COGDistanceI.Text)) < Convert.ToSingle(lblStep2COGDistanceM1.Text) &&
                        Math.Abs(Convert.ToSingle(lblStep2COGDistanceF.Text)) < Convert.ToSingle(lblStep2COGDistanceM2.Text))
                    {
                        errorMessages += "COG Touchdown Distance is Too Close#!#";
                    }
                    else
                    {
                        if (Math.Abs(Convert.ToSingle(lblStep2COGDistanceI.Text)) > Convert.ToSingle(lblStep2COGDistanceM1.Text) &&
                            Math.Abs(Convert.ToSingle(lblStep2COGDistanceF.Text)) > Convert.ToSingle(lblStep2COGDistanceM2.Text))
                        {
                            errorMessages += "COG Touchdown Distance is Too Far#!#";
                        }
                    }
                }
                #endregion[Step2COGDistance]
            }

            if (step == 7)
            {
                #region[Step2GroundTime]
                if (lblStep2GroundTimeM1.ForeColor == Color.Red && lblStep2GroundTimeM2.ForeColor == Color.Red)
                {
                    if (Convert.ToSingle(lblStep2GroundTimeI.Text) < Convert.ToSingle(lblStep2GroundTimeM1.Text) &&
                        Convert.ToSingle(lblStep2GroundTimeF.Text) < Convert.ToSingle(lblStep2GroundTimeM2.Text))
                    {
                        errorMessages += "Ground Time is Too Short#!#";
                    }
                    else
                    {
                        if (Convert.ToSingle(lblStep2GroundTimeI.Text) > Convert.ToSingle(lblStep2GroundTimeM1.Text) &&
                            Convert.ToSingle(lblStep2GroundTimeF.Text) > Convert.ToSingle(lblStep2GroundTimeM2.Text))
                        {
                            errorMessages += "Ground Time is Too Long#!#";
                        }
                    }
                }
                #endregion[Step2GroundTime]
                #region[Step2LLAngleTakeoff]
                if (lblStep2LLAngleTakeoffM1.ForeColor == Color.Red && lblStep2LLAngleTakeoffM2.ForeColor == Color.Red)
                {
                    if (Convert.ToInt16(lblStep2LLAngleTakeoffI.Text) < Convert.ToInt16(lblStep2LLAngleTakeoffM1.Text) &&
                        Convert.ToInt16(lblStep2LLAngleTakeoffF.Text) < Convert.ToInt16(lblStep2LLAngleTakeoffM2.Text))
                    {
                        errorMessages += "Rear Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                    }
                    else
                    {
                        if (Convert.ToInt16(lblStep2LLAngleTakeoffI.Text) > Convert.ToInt16(lblStep2LLAngleTakeoffM1.Text) &&
                            Convert.ToInt16(lblStep2LLAngleTakeoffF.Text) > Convert.ToInt16(lblStep2LLAngleTakeoffM2.Text))
                        {
                            errorMessages += "Rear Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                        }
                    }
                }
                #endregion[Step2LLAngleTakeoff]
                #region[Step2TrunkAngleTakeoff]
                if (lblStep2TrunkAngleTakeoffM1.ForeColor == Color.Red && lblStep2TrunkAngleTakeoffM2.ForeColor == Color.Red)
                {
                    if (Convert.ToInt16(lblStep2TrunkAngleTakeoffI.Text) < Convert.ToInt16(lblStep2TrunkAngleTakeoffM1.Text)
                        && Convert.ToInt16(lblStep2TrunkAngleTakeoffF.Text) < Convert.ToInt16(lblStep2TrunkAngleTakeoffM2.Text))
                    {
                        errorMessages += "Trunk Angle at Takeoff is Too Small#!#";
                    }
                    else
                    {
                        if (Convert.ToInt16(lblStep2TrunkAngleTakeoffI.Text) > Convert.ToInt16(lblStep2TrunkAngleTakeoffM1.Text)
                            && Convert.ToInt16(lblStep2TrunkAngleTakeoffF.Text) > Convert.ToInt16(lblStep2TrunkAngleTakeoffM2.Text))
                        {
                            errorMessages += "Trunk Angle at Takeoff is Too Large#!#";
                        }
                    }
                }
                #endregion[Step2TrunkAngleTakeoff]
                #region[Step2LLAngleAC]
                if (lblStep2LLAngleACM1.ForeColor == Color.Red && lblStep2LLAngleACM2.ForeColor == Color.Red)
                {
                    errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                }
                #endregion[Step2LLAngleAC]
            }
            if (step == 8)
            {
                #region[Step2AirTime]
                if (lblStep2AirTimeM1.ForeColor == Color.Red && lblStep2AirTimeM2.ForeColor == Color.Red)
                {
                    if (Convert.ToSingle(lblStep2AirTimeI.Text) < Convert.ToSingle(lblStep2AirTimeM1.Text) &&
                        Convert.ToSingle(lblStep2AirTimeF.Text) < Convert.ToSingle(lblStep2AirTimeM2.Text))
                    {
                        errorMessages += "Air Time is Too Short#!#";
                    }
                    else
                    {
                        if (Convert.ToSingle(lblStep2AirTimeI.Text) > Convert.ToSingle(lblStep2AirTimeM1.Text) &&
                            Convert.ToSingle(lblStep2AirTimeF.Text) > Convert.ToSingle(lblStep2AirTimeM2.Text))
                        {
                            errorMessages += "Air Time is Too Long#!#";
                        }
                    }
                }
                #endregion[Step2AirTime]
                #region[Step2StrideRate]

                if (lblStep2StrideRateM1.ForeColor == Color.Red && lblStep2StrideRateM2.ForeColor == Color.Red)
                {
                    if (Convert.ToSingle(lblStep2StrideRateI.Text) < Convert.ToSingle(lblStep2StrideRateM1.Text)
                        && Convert.ToSingle(lblStep2StrideRateF.Text) < Convert.ToSingle(lblStep2StrideRateM2.Text))
                    {
                        errorMessages += "Stride Rate is Too Low#!#";
                    }
                    else
                    {
                        if (Convert.ToSingle(lblStep2StrideRateI.Text) > Convert.ToSingle(lblStep2StrideRateM1.Text)
                            && Convert.ToSingle(lblStep2StrideRateF.Text) > Convert.ToSingle(lblStep2StrideRateM2.Text))
                        {
                            errorMessages += "Stride Rate is Too High#!#";
                        }
                    }
                }
                #endregion[Step2StrideRate]
                #region[Step2StrideLength]
                if (lblStep2StrideLengthM1.ForeColor == Color.Red && lblStep2StrideLengthM2.ForeColor == Color.Red)
                {
                    if (Convert.ToSingle(lblStep2StrideLengthI.Text) < Convert.ToSingle(lblStep2StrideLengthM1.Text) &&
                        Convert.ToSingle(lblStep2StrideLengthF.Text) < Convert.ToSingle(lblStep2StrideLengthM2.Text))
                    {
                        errorMessages += "Stride Length  is Too Short#!#";
                    }
                    else
                    {
                        if (Convert.ToSingle(lblStep2StrideLengthI.Text) > Convert.ToSingle(lblStep2StrideLengthM1.Text) &&
                            Convert.ToSingle(lblStep2StrideLengthF.Text) > Convert.ToSingle(lblStep2StrideLengthM2.Text))
                        {
                            errorMessages += "Stride Length  is Too Long#!#";
                        }
                    }
                }
                #endregion[Step2StrideLength]
                #region[Step2Velocity]
                if (lblStep2VelocityM1.ForeColor == Color.Red && lblStep2VelocityM2.ForeColor == Color.Red)
                {
                    errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                }
                #endregion[Step2Velocity]
                #region[Step3COGDistance]

                if (lblStep3COGDistanceM1.ForeColor == Color.Red && lblStep3COGDistanceM2.ForeColor == Color.Red)
                {
                    if (Math.Abs(Convert.ToSingle(lblStep3COGDistanceI.Text)) < Convert.ToSingle(lblStep3COGDistanceM1.Text) &&
                        Math.Abs(Convert.ToSingle(lblStep3COGDistanceF.Text)) < Convert.ToSingle(lblStep3COGDistanceM2.Text))
                    {
                        errorMessages += "COG Touchdown Distance is Too Close#!#";
                    }
                    else
                    {
                        if (Math.Abs(Convert.ToSingle(lblStep3COGDistanceI.Text)) > Convert.ToSingle(lblStep3COGDistanceM1.Text) &&
                            Math.Abs(Convert.ToSingle(lblStep3COGDistanceF.Text)) > Convert.ToSingle(lblStep3COGDistanceM2.Text))
                        {
                            errorMessages += "COG Touchdown Distance is Too Far#!#";
                        }
                    }
                }
                #endregion[Step3COGDistance]
                #region[TimeTo3m]

                if (lblTimeTo3mM1.ForeColor == Color.Red && lblTimeTo3mM2.ForeColor == Color.Red)
                {
                    errorMessages += "Time to 3 meters is Too Long#!#";
                }
                #endregion[TimeTo3m]
                #region[TimeTo5mM1]
                if (lblTimeTo5mM1.ForeColor == Color.Red && lblTimeTo5mM2.ForeColor == Color.Red)
                {
                    errorMessages += "Time to 5 meters is Too Long#!#";
                }
                #endregion[TimeTo5mM1]
            }
            return errorMessages;
        }
    }

    string returnErrorMessage(int step)
    {
        string errorMessages = string.Empty;
        if (!isComparison)
        {
            if (DropDownList1.SelectedItem.Text.EndsWith("Model View – Initial") || DropDownList1.SelectedItem.Text.EndsWith("Video View – Initial"))
            {
                #region[velocity]
                if (step == 1 || step == 2 || step == 3 || step == 4 || step == 5 || step == 6 || step == 7)
                {
                    if (lblVelocityM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    }
                }
                #endregion[Velocity]
                #region[Ground Time]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblGroundTimeLeftM1.ForeColor == Color.Red)
                    {
                        if (lblGroundTimeRightM1.ForeColor == Color.Red)
                        {
                            errorMessages += "Ground Time is Too Long#!#";
                        }
                        else
                        {
                            errorMessages += "Ground Time Left is Too Long#!#";
                        }
                    }
                    else
                        if (lblGroundTimeRightM1.ForeColor == Color.Red)
                        {
                            errorMessages += "Ground Time Right is Too Long#!#";
                        }

                }
                #endregion[Ground Time]
                #region[air time]
                if (step == 3 || step == 5 || step == 7)
                {
                    if (lblAirTimeLeftToRightM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblAirTimeLeftToRightI.Text) < Convert.ToDouble(lblAirTimeLeftToRightM1.Text))
                        {
                            if (lblAirTimeRightToLeftM1.ForeColor == Color.Red)
                            {
                                if (Convert.ToDouble(lblAirTimeRightToLeftI.Text) < Convert.ToDouble(lblAirTimeRightToLeftM1.Text))
                                {
                                    errorMessages += "Air Time is Too Short#!#";
                                    sprintAirTimeLtoRandRtoLShortI = true;

                                    sprintAirTimeAverageI = true;
                                }
                                else
                                {
                                    errorMessages += "Air Time Left to Right is Too Short#!#";
                                    errorMessages += "Air Time Right to Left is Too Long#!#";
                                }
                            }
                            else
                            {
                                errorMessages += "Air Time Left to Right is Too Short#!#";
                                sprintAirTimeLtoRShortI = true;
                            }
                        }
                        else if (lblAirTimeRightToLeftM1.ForeColor == Color.Red)
                        {
                            if (Convert.ToDouble(lblAirTimeRightToLeftI.Text) > Convert.ToDouble(lblAirTimeRightToLeftM1.Text))
                            {
                                errorMessages += "Air Time is Too Long#!#";
                                sprintAirTimeRtoLLongI = true;
                            }
                            else
                            {
                                errorMessages += "Air Time Left to Right is Too Long#!#";
                                errorMessages += "Air Time Right to Left is Too Short#!#";
                            }
                        }
                        else
                        {
                            errorMessages += "Air Time Left to Right is Too Long#!#";
                            sprintAirTimeLtoRLongI = true;
                        }
                    }
                    else if (lblAirTimeRightToLeftM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblAirTimeRightToLeftI.Text) < Convert.ToDouble(lblAirTimeRightToLeftM1.Text))
                        {
                            errorMessages += "Air Time Right to Left is Too Short#!#";
                            sprintAirTimeRtoLShortI = true;
                        }
                        else
                        {
                            errorMessages += "Air Time Right to Left is Too Long#!#";
                            sprintAirTimeRtoLLongI = true;
                        }
                    }
                }
                #endregion[air time]
                #region[Time To Upper Leg Full Flexion]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblTimeToUpperLegFullFlexionLeftM1.ForeColor == Color.Red)
                    {
                        if (lblTimeToUpperLegFullFlexionRightM1.ForeColor == Color.Red)
                        {
                            errorMessages += "Time To Upper Leg Full Flexion (High Knee Position) is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Time To Upper Leg Full Flexion Left (High Knee Position) is Too Short#!#";
                        }

                    }
                    else
                        if (lblTimeToUpperLegFullFlexionRightM1.ForeColor == Color.Red)
                        {
                            errorMessages += "Time To Upper Leg Full Flexion Right (High Knee Position) is Too Short#!#";
                        }

                }
                #endregion[Time To Upper Leg Full Flexion]
                #region[Stride Rate]
                if (step == 1 || step == 2 || step == 3 || step == 4 || step == 5 || step == 6 || step == 7)
                {
                    if (lblStrideRateM1.ForeColor == Color.Red)
                    {

                        if (Convert.ToDouble(lblStrideRateI.Text) < Convert.ToDouble(lblStrideRateM1.Text))
                        {
                            errorMessages += "Stride Rate is Too Low#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Rate is Too High#!#";
                        }
                    }
                }
                #endregion[Stride Rate]
                #region[stride length]
                if (step == 3 || step == 5 || step == 7)
                {
                    if (sprintStrideLengthAverageI)
                    {
                        if (sprintStrideLengthRtoLShortI)
                            errorMessages += "Stride Length is Too Short#!#";
                        else
                            errorMessages += "Stride Length is Too Long#!#";
                    }
                    else
                    {
                        if (sprintStrideLengthRtoLShortI)
                            errorMessages += "Stride Length Right to Left is Too Short#!#";
                        else if (sprintStrideLengthRtoLLongI)
                        {

                            errorMessages += "Stride Length Right to Left is Too Long#!#";
                        }
                        if (sprintStrideLengthLtoRShortI)
                            errorMessages += "Stride Length Left to Right is Too Short#!#";
                        else if (sprintStrideLengthLtoRLongI)
                        {

                            errorMessages += "Stride Length Left to Right is Too Long#!#";
                        }
                    }
                }
                #endregion[stride length]
                #region[Touchdown Distance]
                if (step == 1 || step == 3 || step == 5 || step == 7)
                {
                    if (lblTouchDownDistanceLeftM1.ForeColor == Color.Red)
                    {
                        if (lblTouchDownDistanceRightM1.ForeColor == Color.Red)
                        {
                            errorMessages += "Touchdown Distance is Too Long#!#";
                        }
                        else
                        {
                            errorMessages += "Touchdown Distance Left is Too Long#!#";
                        }
                    }
                    else
                    {
                        if (lblTouchDownDistanceRightM1.ForeColor == Color.Red)
                        {
                            errorMessages += "Touchdown Distance Right is Too Long#!#";
                        }
                    }
                }
                #endregion[Touchdown Distance]
                #region[Upper Leg Full Extension Angle]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblUpperLegFullExtentionAngleLeftM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblUpperLegFullExtentionAngleLeftI.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleLeftM1.Text))
                        {
                            if (lblUpperLegFullExtentionAngleRightM1.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblUpperLegFullExtentionAngleRightI.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleRightM1.Text))
                                {
                                    errorMessages += "Upper Leg Full Extension Angle is Too Small (Over-Extending into Backside)#!#";
                                }

                                else
                                {
                                    errorMessages += "Upper Leg Full Extension Angle Left is Too Small (Over-Extending into Backside)#!#";
                                    errorMessages += "Upper Leg Full Extension Angle Right is Too Large (Insufficient Extension)#!#";
                                }
                            }

                            else
                            {
                                errorMessages += "Upper Leg Full Extension Angle Left is Too Small (Over-Extending into Backside)#!#";
                            }
                        }

                        else
                            if (lblUpperLegFullExtentionAngleRightM1.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblUpperLegFullExtentionAngleRightI.Text) > Convert.ToInt32(lblUpperLegFullExtentionAngleRightM1.Text))
                                {
                                    errorMessages += "Upper Leg Full Extension Angle is Too Large (Insufficient Extension)#!#";
                                }
                                else
                                {
                                    errorMessages += "Upper Leg Full Extension Angle Left is Too Large (Insufficient Extension) (Insufficient Extension)#!#";
                                    errorMessages += "Upper Leg Full Extension Angle Right is Too Small (Over-Extending into Backside)#!#";
                                }
                            }

                            else
                            {
                                errorMessages += "Upper Leg Full Extension Angle Left is Too Large (Insufficient Extension)#!#";
                            }
                    }
                    else if (lblUpperLegFullExtentionAngleRightM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblUpperLegFullExtentionAngleRightI.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleRightM1.Text))
                        {
                            errorMessages += "Upper Leg Full Extension Angle Right is Too Small (Over-Extending into Backside)#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Full Extension Angle Left is Too Large (Insufficient Extension)#!#";
                        }

                    }

                }
                #endregion[Upper Leg Full Extension Angle]
                #region[Lower Leg Angle at Takeoff]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblLowerLegAngleAtTakeOfLeftM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftI.Text) < Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftM1.Text))
                        {
                            if (lblLowerLegAngleAtTakeOfRightM1.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblLowerLegAngleAtTakeOfRightI.Text) < Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM1.Text))
                                {
                                    errorMessages += "Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Angle at Takeoff Left is Too Small (Insufficient Extension)#!#";
                                    errorMessages += "Lower Leg Angle at Takeoff Right is Too Large (Over-Extending into Backside)#!#";
                                }
                            }

                            else
                            {
                                errorMessages += "Lower Leg Angle at Takeoff Left is Too Small (Insufficient Extension)#!#";
                            }
                        }

                        else
                            if (lblLowerLegAngleAtTakeOfRightM1.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblLowerLegAngleAtTakeOfRightI.Text) > Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM1.Text))
                                {
                                    errorMessages += "Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Angle at Takeoff Left is Too Large (Over-Extending into Backside)#!#";
                                    errorMessages += "Lower Leg Angle at Takeoff Right is Too Small (Insufficient Extension)#!#";
                                }
                            }

                            else
                            {
                                errorMessages += "Lower Leg Angle at Takeoff Left is Too Large (Over-Extending into Backside)#!#";
                            }
                    }
                    else if (lblLowerLegAngleAtTakeOfRightM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegAngleAtTakeOfRightI.Text) < Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM1.Text))
                        {
                            errorMessages += "Lower Leg Angle at Takeoff Right is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Angle at Takeoff Right is Too Large (Over-Extending into Backside)#!#";
                        }
                    }
                }
                #endregion[Lower Leg Angle at Takeoff]
                #region[Lower Leg Full Flexion Angle]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblLowerLegFullFlexionAngleLeftM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegFullFlexionAngleLeftI.Text) < Convert.ToInt32(lblLowerLegFullFlexionAngleLeftM1.Text))
                        {
                            if (lblLowerLegFullFlexionAngleRightM1.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblLowerLegFullFlexionAngleRightI.Text) < Convert.ToInt32(lblLowerLegFullFlexionAngleRightM1.Text))
                                {
                                    errorMessages += "Lower Leg Full Flexion Angle is Too Small (Back Side Indicator)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Full Flexion Angle Left is Too Small (Back Side Indicator)#!#";
                                    errorMessages += "Lower Leg Full Flexion Angle Right is Too Large (Check Flexibility)#!#";
                                }
                            }

                            else
                            {
                                errorMessages += "Lower Leg Full Flexion Angle Left is Too Small (Back Side Indicator)#!#";
                            }
                        }

                        else
                            if (lblLowerLegFullFlexionAngleRightI.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblLowerLegFullFlexionAngleRightI.Text) > Convert.ToInt32(lblLowerLegFullFlexionAngleRightM1.Text))
                                {
                                    errorMessages += "Lower Leg Full Flexion Angle is Too Large (Check Flexibility)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Full Flexion Angle Left is Too Large (Check Flexibility)#!#";
                                    errorMessages += "Lower Leg Full Flexion Angle Right is Too Small (Back Side Indicator)#!#";
                                }
                            }

                            else
                            {
                                errorMessages += "Lower Leg Full Flexion Angle Left is Too Large (Check Flexibility)#!#";
                            }
                    }
                    else if (lblLowerLegFullFlexionAngleRightM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegFullFlexionAngleRightI.Text) < Convert.ToInt32(lblLowerLegFullFlexionAngleRightM1.Text))
                        {
                            errorMessages += "Lower Leg Full Flexion Angle Right is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Full Flexion Angle Right is Too Large (Check Flexibility)#!#";
                        }

                    }
                }
                #endregion[Lower Leg Full Flexion Angle]
                #region[Lower Leg Angle at Ankle Cross]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblLowerLegAngleAtAnkleCrossLeftM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftI.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftM1.Text))
                        {
                            if (lblLowerLegAngleAtAnkleCrossRightM1.ForeColor == Color.Red)
                            {

                                if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightI.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM1.Text))
                                {
                                    errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Angle at Ankle Cross Left is Too Small (Back Side Indicator)#!#";
                                    errorMessages += "Lower Leg Angle at Ankle Cross Right is Too Large (Check Flexibility)#!#";
                                }
                            }

                            else
                            {
                                errorMessages += "Lower Leg Angle at Ankle Cross Left is Too Small (Back Side Indicator)#!#";
                            }
                        }

                        else
                            if (lblLowerLegAngleAtAnkleCrossRightM1.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightI.Text) > Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM1.Text))
                                {
                                    errorMessages += "Lower Leg Angle at Ankle Cross is Too Large (Check Flexibility)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Angle at Ankle Cross Left is Too Large (Check Flexibility)#!#";
                                    errorMessages += "Lower Leg Angle at Ankle Cross Right is Too Small (Back Side Indicator)#!#";
                                }
                            }

                            else
                            {
                                errorMessages += "Lower Leg Angle at Ankle Cross Left is Too Large (Check Flexibility)#!#";
                            }
                    }
                    else if (lblLowerLegAngleAtAnkleCrossRightM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightI.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM1.Text))
                        {
                            errorMessages += "Lower Leg Angle at Ankle Cross Right is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Angle at Ankle Cross Right is Too Large (Check Flexibility)#!#";
                        }

                    }
                }
                #endregion[Lower Leg Angle at Ankle Cross]
                #region[Upper Leg Full Flexion Angle]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblUpperLegFullFlexionAngleLeftM1.ForeColor == Color.Red)
                    {
                        if (lblUpperLegFullFlexionAngleRightM1.ForeColor == Color.Red)
                        {
                            errorMessages += "Upper Leg Full Flexion Angle (High Knee Position) is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Full Flexion Angle Left (High Knee Position) is Too Small#!#";
                        }
                    }
                    else
                        if (lblUpperLegFullFlexionAngleRightM1.ForeColor == Color.Red)
                        {
                            errorMessages += "Upper Leg Full Flexion Angle Right (High Knee Position) is Too Small#!#";
                        }
                }
                #endregion[Upper Leg Full Flexion Angle]
                MakeSprintFinalVariableChartValuesHidden();
                return errorMessages;
            }
            //for final errors
            else
            {
                #region[Velocity]
                if (step == 1 || step == 2 || step == 3 || step == 4 || step == 5 || step == 6 || step == 7)
                {
                    if (lblVelocityM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    }
                }
                #endregion[Velocity]
                #region[Ground Time]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblGroundTimeLeftM2.ForeColor == Color.Red)
                    {
                        if (lblGroundTimeRightM2.ForeColor == Color.Red)
                        {
                            errorMessages += "Ground Time is Too Long#!#";
                        }
                        else
                        {
                            errorMessages += "Ground Time Left is Too Long#!#";
                        }
                    }
                    else
                        if (lblGroundTimeRightM2.ForeColor == Color.Red)
                        {
                            errorMessages += "Ground Time Right is Too Long#!#";
                        }

                }
                #endregion[Ground Time]
                #region[air time]
                if (step == 3 || step == 5 || step == 7)
                {
                    if (lblAirTimeLeftToRightM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblAirTimeLeftToRightF.Text) < Convert.ToDouble(lblAirTimeLeftToRightM2.Text))
                        {

                            if (lblAirTimeRightToLeftM2.ForeColor == Color.Red)
                            {
                                if (Convert.ToDouble(lblAirTimeRightToLeftF.Text) < Convert.ToDouble(lblAirTimeRightToLeftM2.Text))
                                {
                                    errorMessages += "Air Time is Too Short#!#";
                                    sprintAirTimeLtoRandRtoLShortF = true;

                                    sprintAirTimeAverageF = true;
                                }
                                else
                                {
                                    errorMessages += "Air Time Left to Right is Too Short#!#";
                                    errorMessages += "Air Time Right to Left is Too Long#!#";
                                }
                            }
                            else
                            {
                                errorMessages += "Air Time Left to Right is Too Short#!#";
                                sprintAirTimeLtoRShortF = true;
                            }
                        }
                        else if (lblAirTimeRightToLeftM2.ForeColor == Color.Red)
                        {
                            if (Convert.ToDouble(lblAirTimeRightToLeftF.Text) > Convert.ToDouble(lblAirTimeRightToLeftM2.Text))
                            {
                                errorMessages += "Air Time is Too Long#!#";
                                sprintAirTimeRtoLLongF = true;
                            }
                            else
                            {
                                errorMessages += "Air Time Left to Right is Too Long#!#";
                                errorMessages += "Air Time Right to Left is Too Short#!#";
                            }
                        }
                        else
                        {
                            errorMessages += "Air Time Left to Right is Too Long#!#";
                            sprintAirTimeLtoRLongF = true;
                        }
                    }
                    else if (lblAirTimeRightToLeftM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblAirTimeRightToLeftF.Text) < Convert.ToDouble(lblAirTimeRightToLeftM2.Text))
                        {
                            errorMessages += "Air Time Right to Left is Too Short#!#";
                            sprintAirTimeRtoLShortF = true;
                        }
                        else
                        {
                            errorMessages += "Air Time Right to Left is Too Long#!#";
                            sprintAirTimeRtoLLongF = true;
                        }
                    }
                }
                #endregion[air time]
                #region[Time To Upper Leg Full Flexion]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblTimeToUpperLegFullFlexionLeftM2.ForeColor == Color.Red)
                    {
                        if (lblTimeToUpperLegFullFlexionRightM2.ForeColor == Color.Red)
                        {
                            errorMessages += "Time To Upper Leg Full Flexion (High Knee Position) is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Time To Upper Leg Full Flexion Left (High Knee Position) is Too Short#!#";
                        }

                    }
                    else

                        if (lblTimeToUpperLegFullFlexionRightM2.ForeColor == Color.Red)
                        {
                            errorMessages += "Time To Upper Leg Full Flexion Right (High Knee Position) is Too Short#!#";
                        }

                }
                #endregion[Time To Upper Leg Full Flexion]
                #region[Stride Rate]
                if (step == 1 || step == 2 || step == 3 || step == 4 || step == 5 || step == 6 || step == 7)
                {
                    if (lblStrideRateM2.ForeColor == Color.Red)
                    {

                        if (Convert.ToDouble(lblStrideRateF.Text) < Convert.ToDouble(lblStrideRateM2.Text))
                        {
                            errorMessages += "Stride Rate is Too Low#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Rate is Too High#!#";
                        }
                    }
                }
                #endregion[Stride Rate]
                #region[stride length]
                if (step == 3 || step == 5 || step == 7)
                {
                    if (sprintStrideLengthAverageF)
                    {
                        if (sprintStrideLengthRtoLShortF)
                            errorMessages += "Stride Length is Too Short#!#";
                        else
                            errorMessages += "Stride Length is Too Long#!#";
                    }
                    else
                    {
                        if (sprintStrideLengthRtoLShortF)
                            errorMessages += "Stride Length Right to Left is Too Short#!#";
                        else if (sprintStrideLengthRtoLLongF)
                        {

                            errorMessages += "Stride Length Right to Left is Too Long#!#";
                        }
                        if (sprintStrideLengthLtoRShortF)
                            errorMessages += "Stride Length Left to Right is Too Short#!#";
                        else if (sprintStrideLengthLtoRLongF)
                        {

                            errorMessages += "Stride Length Left to Right is Too Long#!#";
                        }
                    }
                }
                #endregion[stride length]
                #region[Touchdown Distance]
                if (step == 1 || step == 3 || step == 5 || step == 7)
                {
                    if (lblTouchDownDistanceLeftM2.ForeColor == Color.Red)
                    {
                        if (lblTouchDownDistanceRightM2.ForeColor == Color.Red)
                        {
                            errorMessages += "Touchdown Distance is Too Long#!#";
                        }
                        else
                        {
                            errorMessages += "Touchdown Distance Left is Too Long#!#";
                        }
                    }
                    else
                    {
                        if (lblTouchDownDistanceRightM2.ForeColor == Color.Red)
                        {
                            errorMessages += "Touchdown Distance Right is Too Long#!#";
                        }
                    }
                }
                #endregion[Touchdown Distance]
                #region[Upper Leg Full Extension]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblUpperLegFullExtentionAngleLeftM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblUpperLegFullExtentionAngleLeftF.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleLeftM2.Text))
                        {
                            if (lblUpperLegFullExtentionAngleRightM2.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblUpperLegFullExtentionAngleRightF.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleRightM2.Text))
                                {
                                    errorMessages += "Upper Leg Full Extension Angle is Too Small (Over-Extending into Backside)#!#";
                                }

                                else
                                {
                                    errorMessages += "Upper Leg Full Extension Angle Left is Too Small (Over-Extending into Backside)#!#";
                                    errorMessages += "Upper Leg Full Extension Angle Right is Too Large (Insufficient Extension) (Insufficient Extension)#!#";
                                }
                            }
                            else
                            {
                                errorMessages += "Upper Leg Full Extension Angle Left is Too Small (Over-Extending into Backside)#!#";
                            }
                        }
                        else
                            if (lblUpperLegFullExtentionAngleRightM2.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblUpperLegFullExtentionAngleRightF.Text) > Convert.ToInt32(lblUpperLegFullExtentionAngleRightM2.Text))
                                {
                                    errorMessages += "Upper Leg Full Extension Angle is Too Large (Insufficient Extension)#!#";
                                }
                                else
                                {
                                    errorMessages += "Upper Leg Full Extension Angle Left is Too Large (Insufficient Extension)#!#";
                                    errorMessages += "Upper Leg Full Extension Angle Right is Too Small (Over-Extending into Backside)#!#";
                                }
                            }

                            else
                            {
                                errorMessages += "Upper Leg Full Extension Angle Left is Too Large (Insufficient Extension)#!#";
                            }
                    }
                    else if (lblUpperLegFullExtentionAngleRightM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblUpperLegFullExtentionAngleRightF.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleRightM2.Text))
                        {
                            errorMessages += "Upper Leg Full Extension Angle Right is Too Small (Over-Extending into Backside)#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Full Extension Angle Left is Too Large (Insufficient Extension)#!#";
                        }

                    }
                }
                #endregion[Upper Leg Full Extension]
                #region[Lower Leg Angle at Takeoff]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblLowerLegAngleAtTakeOfLeftM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftF.Text) < Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftM2.Text))
                        {
                            if (lblLowerLegAngleAtTakeOfRightM2.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblLowerLegAngleAtTakeOfRightF.Text) < Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM2.Text))
                                {
                                    errorMessages += "Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Angle at Takeoff Left is Too Small (Insufficient Extension)#!#";
                                    errorMessages += "Lower Leg Angle at Takeoff Right is Too Large (Over-Extending into Backside)#!#";
                                }
                            }

                            else
                            {
                                errorMessages += "Lower Leg Angle at Takeoff Left is Too Small (Insufficient Extension)#!#";
                            }
                        }

                        else
                            if (lblLowerLegAngleAtTakeOfRightM2.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblLowerLegAngleAtTakeOfRightF.Text) > Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM2.Text))
                                {
                                    errorMessages += "Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Angle at Takeoff Left is Too Large (Over-Extending into Backside)#!#";
                                    errorMessages += "Lower Leg Angle at Takeoff Right is Too Small (Insufficient Extension)#!#";
                                }
                            }

                            else
                            {
                                errorMessages += "Lower Leg Angle at Takeoff Left is Too Large (Over-Extending into Backside)#!#";
                            }
                    }
                    else if (lblLowerLegAngleAtTakeOfRightM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegAngleAtTakeOfRightF.Text) < Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM2.Text))
                        {
                            errorMessages += "Lower Leg Angle at Takeoff Right is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Angle at Takeoff Right is Too Large (Over-Extending into Backside)#!#";
                        }
                    }
                }
                #endregion[Lower Leg Angle at Takeoff]
                #region[Lower Leg Full Flexion Angle]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblLowerLegFullFlexionAngleLeftM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegFullFlexionAngleLeftF.Text) < Convert.ToInt32(lblLowerLegFullFlexionAngleLeftM2.Text))
                        {
                            if (lblLowerLegFullFlexionAngleRightM2.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblLowerLegFullFlexionAngleRightF.Text) < Convert.ToInt32(lblLowerLegFullFlexionAngleRightM2.Text))
                                {
                                    errorMessages += "Lower Leg Full Flexion Angle is Too Small (Back Side Indicator)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Full Flexion Angle Left is Too Small (Back Side Indicator)#!#";
                                    errorMessages += "Lower Leg Full Flexion Angle Right is Too Large (Check Flexibility)#!#";
                                }
                            }

                            else
                            {
                                errorMessages += "Lower Leg Full Flexion Angle Left is Too Small (Back Side Indicator)#!#";
                            }
                        }

                        else
                            if (lblLowerLegFullFlexionAngleRightM2.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblLowerLegFullFlexionAngleRightF.Text) > Convert.ToInt32(lblLowerLegFullFlexionAngleRightM2.Text))
                                {
                                    errorMessages += "Lower Leg Full Flexion Angle is Too Large (Check Flexibility)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Full Flexion Angle Left is Too Large (Check Flexibility)#!#";
                                    errorMessages += "Lower Leg Full Flexion Angle Right is Too Small (Back Side Indicator)#!#";
                                }
                            }

                            else
                            {
                                errorMessages += "Lower Leg Full Flexion Angle Left is Too Large (Check Flexibility)#!#";
                            }
                    }
                    else if (lblLowerLegFullFlexionAngleRightM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegFullFlexionAngleRightF.Text) < Convert.ToInt32(lblLowerLegFullFlexionAngleRightM2.Text))
                        {
                            errorMessages += "Lower Leg Full Flexion Angle Right is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Full Flexion Angle Right is Too Large (Check Flexibility)#!#";
                        }

                    }
                }
                #endregion[Lower Leg Full Flexion Angle]
                #region[Lower Leg Angle at Ankle Cross]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblLowerLegAngleAtAnkleCrossLeftM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftF.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftM2.Text))
                        {
                            if (lblLowerLegAngleAtAnkleCrossRightM2.ForeColor == Color.Red)
                            {

                                if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightF.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM2.Text))
                                {
                                    errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Angle at Ankle Cross Left is Too Small (Back Side Indicator)#!#";
                                    errorMessages += "Lower Leg Angle at Ankle Cross Right is Too Large (Check Flexibility)#!#";
                                }
                            }
                            else
                            {
                                errorMessages += "Lower Leg Angle at Ankle Cross Left is Too Small (Back Side Indicator)#!#";
                            }
                        }
                        else
                            if (lblLowerLegAngleAtAnkleCrossRightM2.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightF.Text) > Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM2.Text))
                                {
                                    errorMessages += "Lower Leg Angle at Ankle Cross is Too Large (Check Flexibility)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Angle at Ankle Cross Left is Too Large (Check Flexibility)#!#";
                                    errorMessages += "Lower Leg Angle at Ankle Cross Right is Too Small (Back Side Indicator)#!#";
                                }
                            }
                            else
                            {
                                errorMessages += "Lower Leg Angle at Ankle Cross Left is Too Large (Check Flexibility)#!#";
                            }
                    }
                    else if (lblLowerLegAngleAtAnkleCrossRightM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightF.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM2.Text))
                        {
                            errorMessages += "Lower Leg Angle at Ankle Cross Right is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Angle at Ankle Cross Right is Too Large (Check Flexibility)#!#";
                        }

                    }
                }
                #endregion[Lower Leg Angle at Ankle Cross]
                #region[Upper Leg Full Flexion Angle]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblUpperLegFullFlexionAngleLeftM2.ForeColor == Color.Red)
                    {
                        if (lblUpperLegFullFlexionAngleRightM2.ForeColor == Color.Red)
                        {
                            errorMessages += "Upper Leg Full Flexion Angle (High Knee Position) is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Full Flexion Angle Left (High Knee Position) is Too Small#!#";
                        }
                    }
                    else
                        if (lblUpperLegFullFlexionAngleRightM2.ForeColor == Color.Red)
                        {
                            errorMessages += "Upper Leg Full Flexion Angle Right (High Knee Position) is Too Small#!#";
                        }
                }
                #endregion[Upper Leg Full Flexion Angle]
                MakeSprintInitialVariableChartValuesHidden();
            }
            return errorMessages;
        }
        else
        {
            leftMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList1.SelectedValue));
            rightMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList3.SelectedValue));

            string LVideopath = leftMovie.FilePath;
            string RVideopath = rightMovie.FilePath;

            if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
            {
                GetSprintLeftMovieVariablesforNonTires(leftMovie.LessonId, LVideopath);
                GetSprintRightMovieVariablesforNonTires(rightMovie.LessonId, RVideopath);
            }
            try
            {
                #region[Velocity]
                if (step == 1 || step == 2 || step == 3 || step == 4 || step == 5 || step == 6 || step == 7)
                {
                    if (lblVelocityM1.ForeColor == Color.Red && lblVelocityM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    }
                }
                #endregion[Velocity]
                #region[Ground Time]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblGroundTimeLeftM1.ForeColor == Color.Red && lblGroundTimeLeftM2.ForeColor == Color.Red)
                    {
                        if (lblGroundTimeRightM1.ForeColor == Color.Red && lblGroundTimeRightM2.ForeColor == Color.Red)
                        {
                            errorMessages += "Ground Time is Too Long#!#";
                        }
                        else
                        {
                            errorMessages += "Ground Time Left is Too Long#!#";
                        }
                    }
                    else if (lblGroundTimeRightM1.ForeColor == Color.Red && lblGroundTimeRightM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Ground Time Right is Too Long#!#";
                    }
                }

                #endregion[Ground Time]
                #region[air time]

                if (step == 3 || step == 5 || step == 7)
                {
                    if (lblAirTimeLeftToRightM1.ForeColor == Color.Red && lblAirTimeLeftToRightM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblAirTimeLeftToRightF.Text) < Convert.ToDouble(lblAirTimeLeftToRightM2.Text)
                            && Convert.ToDouble(lblAirTimeLeftToRightI.Text) < Convert.ToDouble(lblAirTimeLeftToRightM1.Text))
                        {
                            if (lblAirTimeRightToLeftM2.ForeColor == Color.Red && lblAirTimeRightToLeftM1.ForeColor == Color.Red)
                            {
                                if (Convert.ToDouble(lblAirTimeRightToLeftF.Text) < Convert.ToDouble(lblAirTimeRightToLeftM2.Text) &&
                                    Convert.ToDouble(lblAirTimeRightToLeftI.Text) < Convert.ToDouble(lblAirTimeRightToLeftM1.Text))
                                {
                                    errorMessages += "Air Time is Too Short#!#";
                                    sprintAirTimeLtoRandRtoLShortF = true;
                                    sprintAirTimeLtoRandRtoLShortI = true;
                                    sprintAirTimeAverageF = true;
                                }
                                else
                                {
                                    errorMessages += "Air Time Left to Right is Too Short#!#";
                                    sprintAirTimeLtoRShortF = true;
                                    sprintAirTimeLtoRShortI = true;

                                    if (Convert.ToDouble(lblAirTimeRightToLeftF.Text) > Convert.ToDouble(lblAirTimeRightToLeftM2.Text) &&
                                        Convert.ToDouble(lblAirTimeRightToLeftI.Text) > Convert.ToDouble(lblAirTimeRightToLeftM1.Text))
                                    {
                                        errorMessages += "Air Time Right to Left is Too Long#!#";
                                        sprintAirTimeRtoLLongF = true;
                                        sprintAirTimeRtoLLongI = true;
                                    }
                                }
                            }
                            else
                            {
                                errorMessages += "Air Time Left to Right is Too Short#!#";
                                sprintAirTimeLtoRShortF = true;
                                sprintAirTimeLtoRShortI = true;
                            }
                        }
                        else if (lblAirTimeRightToLeftM2.ForeColor == Color.Red && lblAirTimeRightToLeftM1.ForeColor == Color.Red)
                        {
                            if (Convert.ToDouble(lblAirTimeRightToLeftF.Text) > Convert.ToDouble(lblAirTimeRightToLeftM2.Text)
                                && Convert.ToDouble(lblAirTimeRightToLeftI.Text) > Convert.ToDouble(lblAirTimeRightToLeftM1.Text))
                            {
                                if (Convert.ToDouble(lblAirTimeLeftToRightF.Text) > Convert.ToDouble(lblAirTimeLeftToRightM2.Text)
                                    && Convert.ToDouble(lblAirTimeLeftToRightI.Text) > Convert.ToDouble(lblAirTimeLeftToRightM1.Text))
                                {
                                    errorMessages += "Air Time is Too Long#!#";
                                    sprintAirTimeLtoRandRtoLLongF = true;
                                    sprintAirTimeLtoRandRtoLLongI = true;
                                    sprintAirTimeAverageF = true;
                                }
                                else
                                {
                                    errorMessages += "Air Time Right to Left is Too Long#!#";
                                    sprintAirTimeRtoLLongF = true;
                                    sprintAirTimeRtoLLongI = true;
                                }
                            }
                            else
                            {
                                if (Convert.ToDouble(lblAirTimeLeftToRightF.Text) > Convert.ToDouble(lblAirTimeLeftToRightM2.Text)
                                    && Convert.ToDouble(lblAirTimeLeftToRightI.Text) > Convert.ToDouble(lblAirTimeLeftToRightM1.Text))
                                {
                                    errorMessages += "Air Time Left to Right is Too Long#!#";
                                    sprintAirTimeLtoRLongF = true;
                                    sprintAirTimeLtoRLongI = true;
                                }

                                if (Convert.ToDouble(lblAirTimeRightToLeftF.Text) < Convert.ToDouble(lblAirTimeRightToLeftM2.Text)
                                    && Convert.ToDouble(lblAirTimeRightToLeftI.Text) < Convert.ToDouble(lblAirTimeRightToLeftM1.Text))
                                {
                                    errorMessages += "Air Time Right to Left is Too Short#!#";
                                    sprintAirTimeLtoRShortF = true;
                                    sprintAirTimeLtoRShortI = true;
                                }
                            }
                        }
                        else
                        {
                            if (Convert.ToDouble(lblAirTimeLeftToRightF.Text) > Convert.ToDouble(lblAirTimeLeftToRightM2.Text)
                                && Convert.ToDouble(lblAirTimeLeftToRightI.Text) > Convert.ToDouble(lblAirTimeLeftToRightM1.Text))
                            {
                                errorMessages += "Air Time Left to Right is Too Long#!#";
                                sprintAirTimeLtoRLongF = true;
                                sprintAirTimeLtoRLongI = true;
                            }
                        }
                    }
                    else if (lblAirTimeRightToLeftM2.ForeColor == Color.Red && lblAirTimeRightToLeftM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblAirTimeRightToLeftF.Text) < Convert.ToDouble(lblAirTimeRightToLeftM2.Text) &&
                            Convert.ToDouble(lblAirTimeRightToLeftI.Text) < Convert.ToDouble(lblAirTimeRightToLeftM1.Text))
                        {
                            errorMessages += "Air Time Right to Left is Too Short#!#";
                            sprintAirTimeRtoLShortF = true;
                            sprintAirTimeRtoLShortI = true;
                        }
                        else
                        {
                            if (Convert.ToDouble(lblAirTimeRightToLeftF.Text) > Convert.ToDouble(lblAirTimeRightToLeftM2.Text) &&
                                Convert.ToDouble(lblAirTimeRightToLeftI.Text) > Convert.ToDouble(lblAirTimeRightToLeftM1.Text))
                            {
                                errorMessages += "Air Time Right to Left is Too Long#!#";
                                sprintAirTimeRtoLLongF = true;
                                sprintAirTimeRtoLLongI = true;
                            }
                        }
                    }
                }
                #endregion[air time]
                #region[Time To Upper Leg Full Flexion]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblTimeToUpperLegFullFlexionLeftM2.ForeColor == Color.Red && lblTimeToUpperLegFullFlexionLeftM1.ForeColor == Color.Red)
                    {
                        if (lblTimeToUpperLegFullFlexionRightM2.ForeColor == Color.Red && lblTimeToUpperLegFullFlexionRightM1.ForeColor == Color.Red)
                        {
                            errorMessages += "Time To Upper Leg Full Flexion (High Knee Position) is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Time To Upper Leg Full Flexion Left (High Knee Position) is Too Short#!#";
                        }

                    }
                    else

                        if (lblTimeToUpperLegFullFlexionRightM2.ForeColor == Color.Red && lblTimeToUpperLegFullFlexionRightM1.ForeColor == Color.Red)
                        {
                            errorMessages += "Time To Upper Leg Full Flexion Right (High Knee Position) is Too Short#!#";
                        }
                }
                #endregion[Time To Upper Leg Full Flexion]
                #region[Stride Rate]
                if (step == 1 || step == 2 || step == 3 || step == 4 || step == 5 || step == 6 || step == 7)
                {
                    if ((lblStrideRateI.Text != "" && lblStrideRateM1.Text != "") && (lblStrideRateF.Text != "" && lblStrideRateM2.Text != ""))
                    {
                        if (lblStrideRateM2.ForeColor == Color.Red && lblStrideRateM1.ForeColor == Color.Red)
                        {
                            if (Convert.ToDouble(lblStrideRateF.Text) < Convert.ToDouble(lblStrideRateM2.Text) &&
                                Convert.ToDouble(lblStrideRateI.Text) < Convert.ToDouble(lblStrideRateM1.Text))
                            {
                                errorMessages += "Stride Rate is Too Low#!#";
                            }
                            else
                            {
                                if (Convert.ToDouble(lblStrideRateF.Text) > Convert.ToDouble(lblStrideRateM2.Text) &&
                                    Convert.ToDouble(lblStrideRateI.Text) > Convert.ToDouble(lblStrideRateM1.Text))
                                {
                                    errorMessages += "Stride Rate is Too High#!#";
                                }
                            }

                        }
                    }
                }
                #endregion[Stride Rate]
                #region[stride length]
                if (step == 3 || step == 5 || step == 7)
                {
                    if (sprintStrideLengthAverageF && sprintStrideLengthAverageI)
                    {
                        if (sprintStrideLengthRtoLShortF && sprintStrideLengthRtoLShortI)
                            errorMessages += "Stride Length is Too Short#!#";
                        else
                        {
                            if (sprintStrideLengthRtoLLongF && sprintStrideLengthRtoLLongI)
                                errorMessages += "Stride Length is Too Long#!#";
                        }
                    }
                    else
                    {
                        if (sprintStrideLengthRtoLShortF && sprintStrideLengthRtoLShortI)
                            errorMessages += "Stride Length Right to Left is Too Short#!#";
                        else if (sprintStrideLengthRtoLLongF && sprintStrideLengthRtoLLongI)
                        {
                            errorMessages += "Stride Length Right to Left is Too Long#!#";
                        }
                        if (sprintStrideLengthLtoRShortF && sprintStrideLengthLtoRShortI)
                            errorMessages += "Stride Length Left to Right is Too Short#!#";
                        else if (sprintStrideLengthLtoRLongF && sprintStrideLengthLtoRLongI)
                        {
                            errorMessages += "Stride Length Left to Right is Too Long#!#";
                        }
                    }
                }
                #endregion[stride length]
                #region[Touchdown Distance]
                if (step == 1 || step == 3 || step == 5 || step == 7)
                {
                    if (lblTouchDownDistanceLeftM2.ForeColor == Color.Red && lblTouchDownDistanceLeftM1.ForeColor == Color.Red)
                    {
                        if (lblTouchDownDistanceRightM2.ForeColor == Color.Red && lblTouchDownDistanceRightM1.ForeColor == Color.Red)
                        {
                            errorMessages += "Touchdown Distance is Too Long#!#";
                        }
                        else
                        {
                            errorMessages += "Touchdown Distance Left is Too Long#!#";
                        }
                    }
                    else
                    {
                        if (lblTouchDownDistanceRightM2.ForeColor == Color.Red && lblTouchDownDistanceRightM1.ForeColor == Color.Red)
                        {
                            errorMessages += "Touchdown Distance Right is Too Long#!#";
                        }
                    }
                }
                #endregion[Touchdown Distance]
                #region[Upper Leg Full Extension]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblUpperLegFullExtentionAngleLeftM2.Text != "" && lblUpperLegFullExtentionAngleLeftM1.Text != "")
                    {
                        if (lblUpperLegFullExtentionAngleLeftM2.ForeColor == Color.Red && lblUpperLegFullExtentionAngleLeftM1.ForeColor == Color.Red)
                        {
                            if (Convert.ToInt32(lblUpperLegFullExtentionAngleLeftF.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleLeftM2.Text)
                                && Convert.ToInt32(lblUpperLegFullExtentionAngleLeftI.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleLeftM1.Text))
                            {
                                if (lblUpperLegFullExtentionAngleRightM2.ForeColor == Color.Red && lblUpperLegFullExtentionAngleRightM1.ForeColor == Color.Red)
                                {
                                    if (Convert.ToInt32(lblUpperLegFullExtentionAngleRightF.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleRightM2.Text)
                                        && Convert.ToInt32(lblUpperLegFullExtentionAngleRightI.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleRightM1.Text))
                                    {
                                        errorMessages += "Upper Leg Full Extension Angle is Too Small (Over-Extending into Backside)#!#";
                                    }

                                    else
                                    {
                                        errorMessages += "Upper Leg Full Extension Angle Left is Too Small (Over-Extending into Backside)#!#";

                                        if (Convert.ToInt32(lblUpperLegFullExtentionAngleRightF.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleRightM2.Text)
                                            && Convert.ToInt32(lblUpperLegFullExtentionAngleRightI.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleRightM1.Text))
                                        {
                                            errorMessages += "Upper Leg Full Extension Angle Right is Too Large (Insufficient Extension)#!#";
                                        }
                                    }
                                }
                                else
                                {
                                    errorMessages += "Upper Leg Full Extension Angle Left is Too Small (Over-Extending into Backside)#!#";
                                }
                            }
                            else if (lblUpperLegFullExtentionAngleRightM2.ForeColor == Color.Red && lblUpperLegFullExtentionAngleRightM1.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblUpperLegFullExtentionAngleRightF.Text) > Convert.ToInt32(lblUpperLegFullExtentionAngleRightM2.Text) &&
                                    Convert.ToInt32(lblUpperLegFullExtentionAngleRightI.Text) > Convert.ToInt32(lblUpperLegFullExtentionAngleRightM1.Text))
                                {
                                    if (Convert.ToInt32(lblUpperLegFullExtentionAngleLeftF.Text) > Convert.ToInt32(lblUpperLegFullExtentionAngleLeftM2.Text) &&
                                        Convert.ToInt32(lblUpperLegFullExtentionAngleLeftI.Text) > Convert.ToInt32(lblUpperLegFullExtentionAngleLeftM1.Text))
                                    {
                                        errorMessages += "Upper Leg Full Extension Angle is Too Large (Insufficient Extension)#!#";
                                    }
                                    else
                                    {
                                        errorMessages += "Upper Leg Full Extension Angle Right is Too Large (Insufficient Extension)#!#";
                                    }
                                }
                                else
                                {
                                    if (Convert.ToInt32(lblUpperLegFullExtentionAngleRightF.Text) > Convert.ToInt32(lblUpperLegFullExtentionAngleRightM2.Text) &&
                                        Convert.ToInt32(lblUpperLegFullExtentionAngleRightI.Text) > Convert.ToInt32(lblUpperLegFullExtentionAngleRightM1.Text))
                                    {
                                        errorMessages += "Upper Leg Full Extension Angle Left is Too Large (Insufficient Extension)#!#";
                                    }

                                    if (Convert.ToInt32(lblUpperLegFullExtentionAngleLeftF.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleLeftM2.Text) &&
                                        Convert.ToInt32(lblUpperLegFullExtentionAngleLeftI.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleLeftM1.Text))
                                    {
                                        errorMessages += "Upper Leg Full Extension Angle Right is Too Small (Over-Extending into Backside)#!#";
                                    }
                                }
                            }
                            else
                            {
                                if (Convert.ToInt32(lblUpperLegFullExtentionAngleRightF.Text) > Convert.ToInt32(lblUpperLegFullExtentionAngleRightM2.Text) &&
                                    Convert.ToInt32(lblUpperLegFullExtentionAngleRightI.Text) > Convert.ToInt32(lblUpperLegFullExtentionAngleRightM1.Text))
                                {
                                    errorMessages += "Upper Leg Full Extension Angle Left is Too Large (Insufficient Extension)#!#";
                                }
                            }
                        }
                        else if (lblUpperLegFullExtentionAngleRightM2.ForeColor == Color.Red && lblUpperLegFullExtentionAngleRightM1.ForeColor == Color.Red)
                        {
                            if (Convert.ToInt32(lblUpperLegFullExtentionAngleRightF.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleRightM2.Text) &&
                                Convert.ToInt32(lblUpperLegFullExtentionAngleRightI.Text) < Convert.ToInt32(lblUpperLegFullExtentionAngleRightM1.Text))
                            {
                                errorMessages += "Upper Leg Full Extension Angle Right is Too Small (Over-Extending into Backside)#!#";
                            }
                            else
                            {
                                if (Convert.ToInt32(lblUpperLegFullExtentionAngleRightF.Text) > Convert.ToInt32(lblUpperLegFullExtentionAngleRightM2.Text) &&
                                    Convert.ToInt32(lblUpperLegFullExtentionAngleRightI.Text) > Convert.ToInt32(lblUpperLegFullExtentionAngleRightM1.Text))
                                {
                                    errorMessages += "Upper Leg Full Extension Angle Right is Too Large (Insufficient Extension)#!#";
                                }
                            }
                        }
                    }
                }
                #endregion[Upper Leg Full Extension]
                #region[Lower Leg Angle at Takeoff]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblLowerLegAngleAtTakeOfLeftM2.ForeColor == Color.Red && lblLowerLegAngleAtTakeOfLeftM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftF.Text) < Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftM2.Text) &&
                            Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftI.Text) < Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftM1.Text))
                        {
                            if (lblLowerLegAngleAtTakeOfRightM2.ForeColor == Color.Red && lblLowerLegAngleAtTakeOfRightM1.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblLowerLegAngleAtTakeOfRightF.Text) < Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM2.Text) &&
                                    Convert.ToInt32(lblLowerLegAngleAtTakeOfRightI.Text) < Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM1.Text))
                                {
                                    errorMessages += "Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Angle at Takeoff Left is Too Small (Insufficient Extension)#!#";

                                    if (Convert.ToInt32(lblLowerLegAngleAtTakeOfRightF.Text) > Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM2.Text) &&
                                        Convert.ToInt32(lblLowerLegAngleAtTakeOfRightI.Text) > Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM1.Text))
                                    {
                                        errorMessages += "Lower Leg Angle at Takeoff Right is Too Large (Over-Extending into Backside)#!#";
                                    }
                                }
                            }
                            else
                            {
                                errorMessages += "Lower Leg Angle at Takeoff Left is Too Small (Insufficient Extension)#!#";
                            }
                        }
                        else if (lblLowerLegAngleAtTakeOfRightM2.ForeColor == Color.Red && lblLowerLegAngleAtTakeOfRightM1.ForeColor == Color.Red)
                        {
                            if (Convert.ToInt32(lblLowerLegAngleAtTakeOfRightF.Text) > Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM2.Text) &&
                                Convert.ToInt32(lblLowerLegAngleAtTakeOfRightI.Text) > Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM1.Text))
                            {
                                if (Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftF.Text) > Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftM2.Text) &&
                                    Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftI.Text) > Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftM1.Text))
                                {
                                    errorMessages += "Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Angle at Takeoff Right is Too Large (Over-Extending into Backside)#!#";
                                }
                            }
                            else
                            {
                                if (Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftF.Text) > Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftM2.Text) &&
                                    Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftI.Text) > Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftM1.Text))
                                {
                                    errorMessages += "Lower Leg Angle at Takeoff Left is Too Large (Over-Extending into Backside)#!#";
                                }

                                if (Convert.ToInt32(lblLowerLegAngleAtTakeOfRightF.Text) < Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM2.Text) &&
                                    Convert.ToInt32(lblLowerLegAngleAtTakeOfRightI.Text) < Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM1.Text))
                                {
                                    errorMessages += "Lower Leg Angle at Takeoff Right is Too Small (Insufficient Extension)#!#";
                                }
                            }
                        }
                        else
                        {
                            if (Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftF.Text) > Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftM2.Text) &&
                                Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftI.Text) > Convert.ToInt32(lblLowerLegAngleAtTakeOfLeftM1.Text))
                            {
                                errorMessages += "Lower Leg Angle at Takeoff Left is Too Large (Over-Extending into Backside)#!#";
                            }
                        }
                    }
                    else if (lblLowerLegAngleAtTakeOfRightM2.ForeColor == Color.Red && lblLowerLegAngleAtTakeOfRightM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegAngleAtTakeOfRightF.Text) < Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM2.Text) &&
                            Convert.ToInt32(lblLowerLegAngleAtTakeOfRightI.Text) < Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM1.Text))
                        {
                            errorMessages += "Lower Leg Angle at Takeoff Right is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            if (Convert.ToInt32(lblLowerLegAngleAtTakeOfRightF.Text) > Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM2.Text) &&
                                Convert.ToInt32(lblLowerLegAngleAtTakeOfRightI.Text) > Convert.ToInt32(lblLowerLegAngleAtTakeOfRightM1.Text))
                            {
                                errorMessages += "Lower Leg Angle at Takeoff Right is Too Large (Over-Extending into Backside)#!#";
                            }
                        }
                    }
                }
                #endregion[Lower Leg Angle at Takeoff]
                #region[Lower Leg Full Flexion Angle]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblLowerLegFullFlexionAngleLeftM2.ForeColor == Color.Red && lblLowerLegFullFlexionAngleLeftM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegFullFlexionAngleLeftF.Text) < Convert.ToInt32(lblLowerLegFullFlexionAngleLeftM2.Text) &&
                            Convert.ToInt32(lblLowerLegFullFlexionAngleLeftI.Text) < Convert.ToInt32(lblLowerLegFullFlexionAngleLeftM1.Text))
                        {
                            if (lblLowerLegFullFlexionAngleRightM2.ForeColor == Color.Red && lblLowerLegFullFlexionAngleRightM1.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblLowerLegFullFlexionAngleRightF.Text) < Convert.ToInt32(lblLowerLegFullFlexionAngleRightM2.Text) &&
                                    Convert.ToInt32(lblLowerLegFullFlexionAngleRightI.Text) < Convert.ToInt32(lblLowerLegFullFlexionAngleRightM1.Text))
                                {
                                    errorMessages += "Lower Leg Full Flexion Angle is Too Small (Back Side Indicator)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Full Flexion Angle Left is Too Small (Back Side Indicator)#!#";

                                    if (Convert.ToInt32(lblLowerLegFullFlexionAngleRightF.Text) > Convert.ToInt32(lblLowerLegFullFlexionAngleRightM2.Text) &&
                                        Convert.ToInt32(lblLowerLegFullFlexionAngleRightI.Text) > Convert.ToInt32(lblLowerLegFullFlexionAngleRightM1.Text))
                                    {
                                        errorMessages += "Lower Leg Full Flexion Angle Right is Too Large (Check Flexibility)#!#";
                                    }
                                }
                            }
                            else
                            {
                                errorMessages += "Lower Leg Full Flexion Angle Left is Too Small (Back Side Indicator)#!#";
                            }
                        }
                        else if (lblLowerLegFullFlexionAngleRightM2.ForeColor == Color.Red && lblLowerLegFullFlexionAngleRightM1.ForeColor == Color.Red)
                        {
                            if (Convert.ToInt32(lblLowerLegFullFlexionAngleRightF.Text) > Convert.ToInt32(lblLowerLegFullFlexionAngleRightM2.Text)
                                && Convert.ToInt32(lblLowerLegFullFlexionAngleRightI.Text) > Convert.ToInt32(lblLowerLegFullFlexionAngleRightM1.Text))
                            {
                                if (Convert.ToInt32(lblLowerLegFullFlexionAngleLeftF.Text) > Convert.ToInt32(lblLowerLegFullFlexionAngleLeftM2.Text) &&
                                    Convert.ToInt32(lblLowerLegFullFlexionAngleLeftI.Text) > Convert.ToInt32(lblLowerLegFullFlexionAngleLeftM1.Text))
                                {
                                    errorMessages += "Lower Leg Full Flexion Angle is Too Large (Check Flexibility)#!#";
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Full Flexion Angle Right is Too Large (Check Flexibility)#!#";
                                }
                            }
                            else
                            {
                                if (Convert.ToInt32(lblLowerLegFullFlexionAngleLeftF.Text) > Convert.ToInt32(lblLowerLegFullFlexionAngleLeftM2.Text) &&
                                    Convert.ToInt32(lblLowerLegFullFlexionAngleLeftI.Text) > Convert.ToInt32(lblLowerLegFullFlexionAngleLeftM1.Text))
                                {
                                    errorMessages += "Lower Leg Full Flexion Angle Left is Too Large (Check Flexibility)#!#";
                                }

                                if (Convert.ToInt32(lblLowerLegFullFlexionAngleRightF.Text) < Convert.ToInt32(lblLowerLegFullFlexionAngleRightM2.Text)
                                    && Convert.ToInt32(lblLowerLegFullFlexionAngleRightI.Text) < Convert.ToInt32(lblLowerLegFullFlexionAngleRightM1.Text))
                                {
                                    errorMessages += "Lower Leg Full Flexion Angle Right is Too Small (Back Side Indicator)#!#";
                                }
                            }
                        }
                        else
                        {
                            if (Convert.ToInt32(lblLowerLegFullFlexionAngleLeftF.Text) > Convert.ToInt32(lblLowerLegFullFlexionAngleLeftM2.Text) &&
                                Convert.ToInt32(lblLowerLegFullFlexionAngleLeftI.Text) > Convert.ToInt32(lblLowerLegFullFlexionAngleLeftM1.Text))
                            {
                                errorMessages += "Lower Leg Full Flexion Angle Left is Too Large (Check Flexibility)#!#";
                            }
                        }
                    }
                    else if (lblLowerLegFullFlexionAngleRightM2.ForeColor == Color.Red && lblLowerLegFullFlexionAngleRightM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblLowerLegFullFlexionAngleRightF.Text) < Convert.ToInt32(lblLowerLegFullFlexionAngleRightM2.Text) &&
                            Convert.ToInt32(lblLowerLegFullFlexionAngleRightI.Text) < Convert.ToInt32(lblLowerLegFullFlexionAngleRightM1.Text))
                        {
                            errorMessages += "Lower Leg Full Flexion Angle Right is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            if (Convert.ToInt32(lblLowerLegFullFlexionAngleRightF.Text) > Convert.ToInt32(lblLowerLegFullFlexionAngleRightM2.Text) &&
                                Convert.ToInt32(lblLowerLegFullFlexionAngleRightI.Text) > Convert.ToInt32(lblLowerLegFullFlexionAngleRightM1.Text))
                            {
                                errorMessages += "Lower Leg Full Flexion Angle Right is Too Large (Check Flexibility)#!#";
                            }
                        }
                    }
                }
                #endregion[Lower Leg Full Flexion Angle]
                #region[Lower Leg Angle at Ankle Cross]
                if (step == 2 || step == 4 || step == 6)
                {
                    if ((lblLowerLegAngleAtAnkleCrossLeftF.Text != "" && lblLowerLegAngleAtAnkleCrossLeftM2.Text != "") &&
                        (lblLowerLegAngleAtAnkleCrossLeftI.Text != "" && lblLowerLegAngleAtAnkleCrossLeftM1.Text != ""))
                    {
                        if (lblLowerLegAngleAtAnkleCrossLeftM2.ForeColor == Color.Red && lblLowerLegAngleAtAnkleCrossLeftM1.ForeColor == Color.Red)
                        {
                            if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftF.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftM2.Text)
                                && Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftI.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftM1.Text))
                            {
                                if (lblLowerLegAngleAtAnkleCrossRightM2.ForeColor == Color.Red && lblLowerLegAngleAtAnkleCrossRightM1.ForeColor == Color.Red)
                                {
                                    if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightF.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM2.Text)
                                        && Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightI.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM1.Text))
                                    {
                                        errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                                    }
                                    else
                                    {
                                        errorMessages += "Lower Leg Angle at Ankle Cross Left is Too Small (Back Side Indicator)#!#";

                                        if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightF.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM2.Text)
                                            && Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightI.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM1.Text))
                                        {
                                            errorMessages += "Lower Leg Angle at Ankle Cross Right is Too Large (Check Flexibility)#!#";
                                        }
                                    }
                                }
                                else
                                {
                                    errorMessages += "Lower Leg Angle at Ankle Cross Left is Too Small (Back Side Indicator)#!#";
                                }
                            }
                            else if (lblLowerLegAngleAtAnkleCrossRightM2.ForeColor == Color.Red && lblLowerLegAngleAtAnkleCrossRightM1.ForeColor == Color.Red)
                            {
                                if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightF.Text) > Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM2.Text)
                                    && Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightI.Text) > Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM1.Text))
                                {
                                    if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftF.Text) > Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftM2.Text)
                                        && Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftI.Text) > Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftM1.Text))
                                    {
                                        errorMessages += "Lower Leg Angle at Ankle Cross is Too Large (Check Flexibility)#!#";
                                    }
                                    else
                                    {
                                        errorMessages += "Lower Leg Angle at Ankle Cross Right is Too Large (Check Flexibility)#!#";
                                    }
                                }
                                else
                                {
                                    if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftF.Text) > Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftM2.Text)
                                       && Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftI.Text) > Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftM1.Text))
                                    {
                                        errorMessages += "Lower Leg Angle at Ankle Cross Left is Too Large (Check Flexibility)#!#";
                                    }

                                    if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightF.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM2.Text)
                                        && Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightI.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM1.Text))
                                    {
                                        errorMessages += "Lower Leg Angle at Ankle Cross Right is Too Small (Back Side Indicator)#!#";
                                    }
                                }
                            }
                            else
                            {
                                if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftF.Text) > Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftM2.Text)
                                   && Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftI.Text) > Convert.ToInt32(lblLowerLegAngleAtAnkleCrossLeftM1.Text))
                                {
                                    errorMessages += "Lower Leg Angle at Ankle Cross Left is Too Large (Check Flexibility)#!#";
                                }
                            }
                        }
                        else if (lblLowerLegAngleAtAnkleCrossRightM2.ForeColor == Color.Red && lblLowerLegAngleAtAnkleCrossRightM1.ForeColor == Color.Red)
                        {
                            if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightF.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM2.Text)
                                && Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightI.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM1.Text))
                            {
                                errorMessages += "Lower Leg Angle at Ankle Cross Right is Too Small (Back Side Indicator)#!#";
                            }
                            else
                            {
                                if (Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightF.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM2.Text)
                                    && Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightI.Text) < Convert.ToInt32(lblLowerLegAngleAtAnkleCrossRightM1.Text))
                                {
                                    errorMessages += "Lower Leg Angle at Ankle Cross Right is Too Large (Check Flexibility)#!#";
                                }
                            }
                        }
                    }
                }
                #endregion[Lower Leg Angle at Ankle Cross]
                #region[Upper Leg Full Flexion Angle]
                if (step == 2 || step == 4 || step == 6)
                {
                    if (lblUpperLegFullFlexionAngleLeftM2.ForeColor == Color.Red && lblUpperLegFullFlexionAngleLeftM1.ForeColor == Color.Red)
                    {
                        if (lblUpperLegFullFlexionAngleRightM2.ForeColor == Color.Red && lblUpperLegFullFlexionAngleRightM1.ForeColor == Color.Red)
                        {
                            errorMessages += "Upper Leg Full Flexion Angle (High Knee Position) is Too Small#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Full Flexion Angle Left (High Knee Position) is Too Small#!#";
                        }
                    }
                    else
                        if (lblUpperLegFullFlexionAngleRightM2.ForeColor == Color.Red && lblUpperLegFullFlexionAngleRightM1.ForeColor == Color.Red)
                        {
                            errorMessages += "Upper Leg Full Flexion Angle Right (High Knee Position) is Too Small#!#";
                        }
                }
                #endregion[Upper Leg Full Flexion Angle]
            }
            catch (Exception ex)
            {
                ex.Message.ToString();
            }
            return errorMessages;
        }
    }
    
    //For HurdleSteps ReturnError Messages
    string returnErrorMessageHurdleSteps(int step)
    {
        string errorMessages = string.Empty;
        if (!isComparison)
        {
            if (DropDownList1.SelectedItem.Text.EndsWith("Model View – Initial") || DropDownList1.SelectedItem.Text.EndsWith("Video View – Initial"))
            {

                #region[Stride Length Into]
                if (step == 7)
                {
                    if (lblHurdleStepIntoM1.ForeColor == Color.Red) //lblHurdleStepIntoI
                    {
                        if (Math.Abs(Convert.ToSingle(lblHurdleStepIntoI.Text)) < Convert.ToSingle(lblHurdleStepIntoM1.Text))
                        {
                            errorMessages += "Stride Length Into is Too Short (Too Close)#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Length Into is Too Long (Too Far)#!#";
                        }
                    }
                }
                #endregion[Stride Length Into]
                #region[Stride Length Off]
                if (step == 1)
                {
                    if (lblHurdleStepOffM1.ForeColor == Color.Red)//lblHurdleStepOffM1
                    {
                        if (Math.Abs(Convert.ToSingle(lblHurdleStepOffI.Text)) < Convert.ToSingle(lblHurdleStepOffM1.Text))
                        {
                            errorMessages += "Stride Length Off is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Length Off is Too Long#!#";
                        }
                    }
                }
                #endregion[Stride Length Off]
                #region[Velocity]
                if (step == 1 || step == 2 || step == 3 || step == 4 || step == 5 || step == 6 || step == 7)
                {
                    if (lblHurdleStepVelocityM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    }
                }
                #endregion[Velocity]
                #region[Ground Time]
                if (step == 2)
                {
                    if (lblStep1HSGroundTimeM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Ground Time is Too Long#!#";
                    }
                }
                if (step == 4)
                {
                    if (lblStep2HSGroundTimeM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Ground Time is Too Long#!#";
                    }
                }
                if (step == 6)
                {
                    if (lblStep3HSGroundTimeM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Ground Time is Too Long#!#";
                    }
                }
                #endregion[Ground Time]
                #region[Air Time]
                if (step == 3)
                {
                    if (lblStep1HSAirTimeM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep1HSAirTimeI.Text) < Convert.ToDouble(lblStep1HSAirTimeM1.Text))
                        {
                            errorMessages += "Air Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Air Time is Too Long#!#";
                        }
                    }
                }
                if (step == 5)
                {
                    if (lblStep2HSAirTimeM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep2HSAirTimeI.Text) < Convert.ToDouble(lblStep2HSAirTimeM1.Text))
                        {
                            errorMessages += "Air Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Air Time is Too Long#!#";
                        }
                    }
                }
                if (step == 7)
                {
                    if (lblStep3HSAirTimeM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep3HSAirTimeI.Text) < Convert.ToDouble(lblStep3HSAirTimeM1.Text))
                        {
                            errorMessages += "Air Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Air Time is Too Long#!#";
                        }
                    }
                }
                #endregion[Air Time]
                #region[Time To Upper Leg Full Flexion]
                if (step == 2)
                {
                   //if (lblStep1UlFlexTimeM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Time To Upper Leg Full Flexion is Too Long#!#";
                    }
                }
                if (step == 4)
                {
                    //if (lblStep2UlFlexTimeM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Time To Upper Leg Full Flexion is Too Long#!#";
                    }
                }
                if (step == 6)
                {
                    //if (lblStep3UlFlexTimeM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Time To Upper Leg Full Flexion is Too Long#!#";
                    }
                }
                #endregion[Time To Upper Leg Full Flexion]
                #region[Stride Rate]
                if (step == 1 || step == 2 || step == 3)
                {
                    if (lblStep1HSStrideRateM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep1HSStrideRateI.Text) < Convert.ToDouble(lblStep1HSStrideRateM1.Text))
                        {
                            errorMessages += "Step One Stride Rate is Too Low#!#";
                        }
                        else
                        {
                            errorMessages += "Step One Stride Rate is Too High#!#";
                        }
                    }
                }
                if (step == 3 || step == 4 || step == 5)
                {
                    if (lblStep2HSStrideRateM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep2HSStrideRateI.Text) < Convert.ToDouble(lblStep2HSStrideRateM1.Text))
                        {
                            errorMessages += "Step Two Stride Rate is Too Low#!#";
                        }
                        else
                        {
                            errorMessages += "Step Two Stride Rate is Too High#!#";
                        }
                    }
                }
                if (step == 5 || step == 6 || step == 7)
                {
                    if (lblStep3StrideRateM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep3StrideRateI.Text) < Convert.ToDouble(lblStep3StrideRateM1.Text))
                        {
                            errorMessages += "Step Three Stride Rate is Too Low#!#";
                        }
                        else
                        {
                            errorMessages += "Step Three Stride Rate is Too High#!#";
                        }
                    }
                }
                #endregion[Stride Rate]
                #region[Stride Length]
                if (step == 3)
                {
                    if (lblStep1StrideLengthM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep1StrideLengthI.Text) < Convert.ToDouble(lblStep1StrideLengthM1.Text))
                        {
                            errorMessages += "Step One Stride Length is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Step One Stride Length is Too Long#!#";
                        }
                    }
                }
                if (step == 5)
                {
                    if (lblStep2StrideLengthM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep2StrideLengthI.Text) < Convert.ToDouble(lblStep2StrideLengthM1.Text))
                        {
                            errorMessages += "Step Two Stride Length is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Step Two Stride Length is Too Long#!#";
                        }
                    }
                }
                if (step == 7)
                {
                    if (lblStep3StrideLengthM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep3StrideLengthI.Text) < Convert.ToDouble(lblStep3StrideLengthM1.Text))
                        {
                            errorMessages += "Step Three Stride Length is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Step Three Stride Length is Too Long#!#";
                        }
                    }
                }
                #endregion[stride length]
                #region[Touchdown Distance]
                if (step == 1)
                {
                    if (lblStep1TouchdownDistanceM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance is Too Long#!#";
                    }
                }
                if (step == 3)
                {
                    if (lblStep2TouchdownDistanceM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance is Too Long#!#";
                    }
                }
                if (step == 5)
                {
                    if (lblStep3TouchdownDistanceM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance is Too Long#!#";
                    }
                }
                if (step == 7)
                {
                    if (lblIntoHurdleTouchdownDistanceM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance is Too Long#!#";
                    }
                }
                #endregion[Touchdown Distance]
                #region[Knee Seperation]
                if (step == 1)
                {
                    if (lblStep1KSTouchdownM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Knee Seperation is Too Small#!#";
                    }
                }
                if (step == 3)
                {
                    if (lblStep2KSAtTouchdownM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Knee Seperation is Too Large#!#";
                    }
                }
                if (step == 5)
                {
                    if (lblStep3KSAtTouchdownM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Knee Seperation is Too Large#!#";
                    }
                }
                if (step == 7)
                {
                    if (lblIntoHurdleKSTouchdownM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Knee Seperation is Too Large#!#";
                    }
                }
                #endregion[Knee Seperation]


                #region[Trunk Touchdown Angle]
                if (step == 1)
                {
                    if (lblStep1TrunkTouchdownAngleM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep1TrunkTouchdownAngleI.Text) < Convert.ToDouble(lblStep1TrunkTouchdownAngleM1.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Flexed#!#";
                        }
                    }
                }
                if (step == 3)
                {
                    if (lblStep2TrunkTouchdownAngleM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep2TrunkTouchdownAngleI.Text) < Convert.ToDouble(lblStep2TrunkTouchdownAngleM1.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Flexed#!#";
                        }
                    }
                }
                if (step == 5)
                {
                    if (lblStep3TrunkTouchdownAngleM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep3TrunkTouchdownAngleI.Text) < Convert.ToDouble(lblStep3TrunkTouchdownAngleM1.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Flexed#!#";
                        }
                    }
                }
                if (step == 7)
                {
                    if (lblIntoHurdleTrunkTouchdownAngleF.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblIntoHurdleTrunkTouchdownAngleI.Text) < Convert.ToDouble(lblIntoHurdleTrunkTouchdownAngleM1.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Flexed#!#";
                        }
                    }
                }
                #endregion[Trunk Touchdown Angle]
                #region[Trunk Takeoff Angle]
                if (step == 2)
                {
                    if (lblStep1TrunkTakeoffAngleM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep1TrunkTakeoffAngleI.Text) < Convert.ToDouble(lblStep1TrunkTakeoffAngleM1.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Flexed#!#";
                        }
                    }
                }
                if (step == 4)
                {
                    if (lblStep2TrunkTakeoffAngleM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep2TrunkTakeoffAngleI.Text) < Convert.ToDouble(lblStep2TrunkTakeoffAngleM1.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Flexed#!#";
                        }
                    }
                }
                if (step == 6)
                {
                    if (lblStep3TrunkTakeoffAngleM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep3TrunkTakeoffAngleI.Text) < Convert.ToDouble(lblStep3TrunkTakeoffAngleM1.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Flexed#!#";
                        }
                    }
                }
                #endregion[Trunk Takeoff Angle]




                #region[Upper Leg Full Extension Angle]
                if (step == 2)
                {
                    if (lblStep1ULAtFullExtensionM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep1ULFullExtensionI.Text) < Convert.ToInt32(lblStep1ULAtFullExtensionM1.Text))
                        {
                            errorMessages += "Upper Leg Full Extension Angle is Too Small (Over-Extending into Backside)#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Full Extension Angle is Too Large (Insufficient Extension)#!#";
                        }
                    }
                }
                if (step == 4)
                {
                    if (lblStep2ULAtFullExtensionM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep2ULAtFullExtensionI.Text) < Convert.ToInt32(lblStep2ULAtFullExtensionM1.Text))
                        {
                            errorMessages += "Upper Leg Full Extension Angle is Too Small (Over-Extending into Backside)#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Full Extension Angle is Too Large (Insufficient Extension)#!#";
                        }
                    }
                }
                if (step == 6)
                {
                    if (lblStep3ULAtFullExtensionM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep3ULAtFullExtensionI.Text) < Convert.ToInt32(lblStep3ULAtFullExtensionM1.Text))
                        {
                            errorMessages += "Upper Leg Full Extension Angle is Too Small (Over-Extending into Backside)#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Full Extension Angle is Too Large (Insufficient Extension)#!#";
                        }
                    }
                }
                #endregion[Upper Leg Full Extension Angle]
                #region[Lower Leg Angle at Takeoff]
                if (step == 2)
                {
                    if (lblStep1LLAtTakeoffM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep1LLAtTakeoffI.Text) < Convert.ToInt32(lblStep1LLAtTakeoffM1.Text))
                        {
                            errorMessages += "Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                        }
                    }
                }
                if (step == 4)
                {
                    if (lblStep2LLAtTakeoffM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep2LLAtTakeoffI.Text) < Convert.ToInt32(lblStep2LLAtTakeoffM1.Text))
                        {
                            errorMessages += "Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                        }
                    }
                }
                if (step == 6)
                {
                    if (lblStep3LLAtTakeoffM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep3LLAtTakeoffI.Text) < Convert.ToInt32(lblStep3LLAtTakeoffM1.Text))
                        {
                            errorMessages += "Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                        }
                    }
                }
                #endregion[Lower Leg Angle at Takeoff]
                #region[Lower Leg Full Flexion Angle]
                if (step == 4)
                {
                    if (lblStep2LLFullAtFlexionM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep2LLAtFullFlexionI.Text) < Convert.ToInt32(lblStep2LLFullAtFlexionM1.Text))
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Large (Check Flexibility)#!#";
                        }
                    }
                }
                if (step == 6)
                {
                    if (lblStep3LLAtFullFlexionM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep3LLAtFullFlexionI.Text) < Convert.ToInt32(lblStep3LLAtFullFlexionM1.Text))
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Large (Check Flexibility)#!#";
                        }
                    }
                }
                #endregion[Lower Leg Full Flexion Angle]
                #region[Lower Leg Angle at Ankle Cross]
                if (step == 4)
                {
                    if (lblStep2LLAtAngleCrossM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep2LLAtAngleCrossI.Text) < Convert.ToInt32(lblStep2LLAtAngleCrossM1.Text))
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Large (Check Flexibility)#!#";
                        }
                    }
                }
                if (step == 6)
                {
                    if (lblStep3LLAtAngleCrossM1.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep3LLAtAngleCrossI.Text) < Convert.ToInt32(lblStep3LLAtAngleCrossM1.Text))
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Large (Check Flexibility)#!#";
                        }
                    }
                }
                #endregion[Lower Leg Angle at Ankle Cross]
                #region[Upper Leg Full Flexion Angle]
                if (step == 2)
                {
                    if (lblStep1ULFullFlexionM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Upper Leg Full Flexion Angle (High Knee Position) is Too Small#!#";
                    }
                }
                if (step == 4)
                {
                    if (lblStep2ULAtFullFlexionM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Upper Leg Full Flexion Angle (High Knee Position) is Too Small#!#";
                    }
                }
                if (step == 6)
                {
                    if (lblStep3ULAtFullFlexionM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Upper Leg Full Flexion Angle (High Knee Position) is Too Small#!#";
                    }
                }
                #endregion[Upper Leg Full Flexion Angle]
                #region[Lower Leg Full Flexion Angle at Touchdown]
                if (step == 7)
                {
                    if (lblIntoHurdleLLTouchdownM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Lower Leg Flexion Angle at Touchdown is Too Small#!#";
                    }
                }
                #endregion[Lower Leg Full Flexion Angle at Touchdown]
                MakeSprintFinalVariableChartValuesHidden();
                return errorMessages;
            }
            //for final errors
            else
            {
                #region[Stride Length Into]
                if (step == 7)
                {
                    if (lblHurdleStepIntoM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblHurdleStepIntoF.Text)) < Convert.ToSingle(lblHurdleStepIntoM2.Text))
                        {
                            errorMessages += "Stride Length Into is Too Short (Too Close)#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Length Into is Too Long (Too Far)#!#";
                        }
                    }
                }
                #endregion[Stride Length Into]
                #region[Stride Length Off]
                if (step == 1)
                {
                    if (lblHurdleStepOffM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblHurdleStepOffF.Text)) < Convert.ToSingle(lblHurdleStepOffM2.Text))
                        {
                            errorMessages += "Stride Length Off is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Stride Length Off is Too Long#!#";
                        }
                    }
                }
                #endregion[Stride Length Off]
                #region[Velocity]
                if (step == 1 || step == 2 || step == 3 || step == 4 || step == 5 || step == 6 || step == 7)
                {
                    if (lblHurdleStepVelocityM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    }
                }
                #endregion[Velocity]
                #region[Ground Time]
                if (step == 2)
                {
                    if (lblStep1HSGroundTimeM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Ground Time is Too Long#!#";
                    }
                }
                if (step == 4)
                {
                    if (lblStep2HSGroundTimeM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Ground Time is Too Long#!#";
                    }
                }
                if (step == 6)
                {
                    if (lblStep3HSGroundTimeM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Ground Time is Too Long#!#";
                    }
                }
                #endregion[Ground Time]
                #region[Air Time]
                if (step == 3)
                {
                    if (lblStep1HSAirTimeM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep1HSAirTimeF.Text) < Convert.ToDouble(lblStep1HSAirTimeM2.Text))
                        {
                            errorMessages += "Air Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Air Time is Too Long#!#";
                        }
                    }
                }
                if (step == 5)
                {
                    if (lblStep2HSAirTimeM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep2HSAirTimeF.Text) < Convert.ToDouble(lblStep2HSAirTimeM2.Text))
                        {
                            errorMessages += "Air Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Air Time is Too Long#!#";
                        }
                    }
                }
                if (step == 7)
                {
                    if (lblStep3HSAirTimeM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep3HSAirTimeF.Text) < Convert.ToDouble(lblStep3HSAirTimeM2.Text))
                        {
                            errorMessages += "Air Time is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Air Time is Too Long#!#";
                        }
                    }
                }
                #endregion[Air Time]
                #region[Time To Upper Leg Full Flexion]
                if (step == 2)
                {
                    //if (lblStep1UlFlexTimeM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Time To Upper Leg Full Flexion is Too Long#!#";
                    }
                }
                if (step == 4)
                {
                   //if (lblStep2UlFlexTimeM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Time To Upper Leg Full Flexion is Too Long#!#";
                    }
                }
                if (step == 6)
                {
                    //if (lblStep3UlFlexTimeM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Time To Upper Leg Full Flexion is Too Long#!#";
                    }
                }
                #endregion[Time To Upper Leg Full Flexion]
                #region[Stride Rate]
                if (step == 1 || step == 2 || step == 3)
                {
                    if (lblStep1HSStrideRateM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep1HSStrideRateF.Text) < Convert.ToDouble(lblStep1HSStrideRateM2.Text))
                        {
                            errorMessages += "Step One Stride Rate is Too Low#!#";
                        }
                        else
                        {
                            errorMessages += "Step One Stride Rate is Too High#!#";
                        }
                    }
                }
                if (step == 3 || step == 4 || step == 5)
                {
                    if (lblStep2HSStrideRateM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep2HSStrideRateF.Text) < Convert.ToDouble(lblStep2HSStrideRateM2.Text))
                        {
                            errorMessages += "Step Two Stride Rate is Too Low#!#";
                        }
                        else
                        {
                            errorMessages += "Step Two Stride Rate is Too High#!#";
                        }
                    }
                }
                if (step == 5 || step == 6 || step == 7)
                {
                    if (lblStep3StrideRateM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep3StrideRateM2.Text) < Convert.ToDouble(lblStep3StrideRateM2.Text))
                        {
                            errorMessages += "Step Three Stride Rate is Too Low#!#";
                        }
                        else
                        {
                            errorMessages += "Step Three Stride Rate is Too High#!#";
                        }
                    }
                }
                #endregion[Stride Rate]
                #region[Stride Length]
                if (step == 3)
                {
                    if (lblStep1StrideLengthM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep1StrideLengthF.Text) < Convert.ToDouble(lblStep1StrideLengthM2.Text))
                        {
                            errorMessages += "Step One Stride Length is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Step One Stride Length is Too Long#!#";
                        }
                    }
                }
                if (step == 5)
                {
                    if (lblStep2StrideLengthM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep2StrideLengthF.Text) < Convert.ToDouble(lblStep2StrideLengthM2.Text))
                        {
                            errorMessages += "Step Two Stride Length is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Step Two Stride Length is Too Long#!#";
                        }
                    }
                }
                if (step == 7)
                {
                    if (lblStep3StrideLengthM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep3StrideLengthF.Text) < Convert.ToDouble(lblStep3StrideLengthM2.Text))
                        {
                            errorMessages += "Step Three Stride Length is Too Short#!#";
                        }
                        else
                        {
                            errorMessages += "Step Three Stride Length is Too Long#!#";
                        }
                    }
                }
                #endregion[stride length]
                #region[Touchdown Distance]
                if (step == 1)
                {
                    if (lblStep1TouchdownDistanceM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance is Too Long#!#";
                    }
                }
                if (step == 3)
                {
                    if (lblStep2TouchdownDistanceM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance is Too Long#!#";
                    }
                }
                if (step == 5)
                {
                    if (lblStep3TouchdownDistanceM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance is Too Long#!#";
                    }
                }
                if (step == 7)
                {
                    if (lblIntoHurdleTouchdownDistanceM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance is Too Long#!#";
                    }
                }
                #endregion[Touchdown Distance]
                #region[Knee Seperation]
                if (step == 1)
                {
                    if (lblStep1KSTouchdownM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Knee Seperation is Too Small#!#";
                    }
                }
                if (step == 3)
                {
                    if (lblStep2KSAtTouchdownM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Knee Seperation is Too Large#!#";
                    }
                }
                if (step == 5)
                {
                    if (lblStep3KSAtTouchdownM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Knee Seperation is Too Large#!#";
                    }
                }
                if (step == 7)
                {
                    if (lblIntoHurdleKSTouchdownM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Knee Seperation is Too Large#!#";
                    }
                }
                #endregion[Knee Seperation]

                #region[Trunk Touchdown Angle]
                if (step == 1)
                {
                    if (lblStep1TrunkTouchdownAngleM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep1TrunkTouchdownAngleF.Text) < Convert.ToDouble(lblStep1TrunkTouchdownAngleM2.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Flexed#!#";
                        }
                    }
                }
                if (step == 3)
                {
                    if (lblStep2TrunkTouchdownAngleM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep2TrunkTouchdownAngleF.Text) < Convert.ToDouble(lblStep2TrunkTouchdownAngleM2.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Flexed#!#";
                        }
                    }
                }
                if (step == 5)
                {
                    if (lblStep3TrunkTouchdownAngleM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep3TrunkTouchdownAngleF.Text) < Convert.ToDouble(lblStep3TrunkTouchdownAngleM2.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Flexed#!#";
                        }
                    }
                }
                if (step == 7)
                {
                    if (lblIntoHurdleTrunkTouchdownAngleM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblIntoHurdleTrunkTouchdownAngleF.Text) < Convert.ToDouble(lblIntoHurdleTrunkTouchdownAngleM2.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Flexed#!#";
                        }
                    }
                }
                #endregion[Trunk Touchdown Angle]
                #region[Trunk Takeoff Angle]
                if (step == 2)
                {
                    if (lblStep1TrunkTakeoffAngleM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep1TrunkTakeoffAngleF.Text) < Convert.ToDouble(lblStep1TrunkTakeoffAngleM2.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Flexed#!#";
                        }
                    }
                }
                if (step == 4)
                {
                    if (lblStep2TrunkTakeoffAngleM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep2TrunkTakeoffAngleF.Text) < Convert.ToDouble(lblStep2TrunkTakeoffAngleM2.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Flexed#!#";
                        }
                    }
                }
                if (step == 6)
                {
                    if (lblStep3TrunkTakeoffAngleM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep3TrunkTakeoffAngleF.Text) < Convert.ToDouble(lblStep3TrunkTakeoffAngleM2.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            errorMessages += "Trunk Angle is Too Flexed#!#";
                        }
                    }
                }
                #endregion[Trunk Takeoff Angle]

                #region[Upper Leg Full Extension Angle]
                if (step == 2)
                {
                    if (lblStep1ULFullExtensionM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep1ULAtFullExtensionF.Text) < Convert.ToInt32(lblStep1ULFullExtensionM2.Text))
                        {
                            errorMessages += "Upper Leg Full Extension Angle is Too Small (Over-Extending into Backside)#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Full Extension Angle is Too Large (Insufficient Extension)#!#";
                        }
                    }
                }
                if (step == 4)
                {
                    if (lblStep2ULAtFullExtensionM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep2ULAtFullExtensionF.Text) < Convert.ToInt32(lblStep2ULAtFullExtensionM2.Text))
                        {
                            errorMessages += "Upper Leg Full Extension Angle is Too Small (Over-Extending into Backside)#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Full Extension Angle is Too Large (Insufficient Extension)#!#";
                        }
                    }
                }
                if (step == 6)
                {
                    if (lblStep3ULAtFullExtensionM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep3ULAtFullExtensionF.Text) < Convert.ToInt32(lblStep3ULAtFullExtensionM2.Text))
                        {
                            errorMessages += "Upper Leg Full Extension Angle is Too Small (Over-Extending into Backside)#!#";
                        }
                        else
                        {
                            errorMessages += "Upper Leg Full Extension Angle is Too Large (Insufficient Extension)#!#";
                        }
                    }
                }
                #endregion[Upper Leg Full Extension Angle]
                #region[Lower Leg Angle at Takeoff]
                if (step == 2)
                {
                    if (lblStep1LLAtTakeoffM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep1LLAtTakeoffF.Text) < Convert.ToInt32(lblStep1LLAtTakeoffM2.Text))
                        {
                            errorMessages += "Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                        }
                    }
                }
                if (step == 4)
                {
                    if (lblStep2LLAtTakeoffM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep2LLAtTakeoffF.Text) < Convert.ToInt32(lblStep2LLAtTakeoffM2.Text))
                        {
                            errorMessages += "Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                        }
                    }
                }
                if (step == 6)
                {
                    if (lblStep3LLAtTakeoffM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep3LLAtTakeoffF.Text) < Convert.ToInt32(lblStep3LLAtTakeoffM2.Text))
                        {
                            errorMessages += "Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                        }
                    }
                }
                #endregion[Lower Leg Angle at Takeoff]
                #region[Lower Leg Full Flexion Angle]
                if (step == 4)
                {
                    if (lblStep2LLAtFullFlexionM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep2LLAtFullFlexionF.Text) < Convert.ToInt32(lblStep2LLAtFullFlexionM2.Text))
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Large (Check Flexibility)#!#";
                        }
                    }
                }
                if (step == 6)
                {
                    if (lblStep3LLAtFullFlexionM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep3LLAtFullFlexionF.Text) < Convert.ToInt32(lblStep3LLAtFullFlexionM2.Text))
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Large (Check Flexibility)#!#";
                        }
                    }
                }
                #endregion[Lower Leg Full Flexion Angle]
                #region[Lower Leg Angle at Ankle Cross]
                if (step == 4)
                {
                    if (lblStep2LLAtAngleCrossM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep2LLAtAngleCrossF.Text) < Convert.ToInt32(lblStep2LLAtAngleCrossM2.Text))
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Large (Check Flexibility)#!#";
                        }
                    }
                }
                if (step == 6)
                {
                    if (lblStep3LLAtAngleCrossM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToInt32(lblStep3LLAtAngleCrossF.Text) < Convert.ToInt32(lblStep3LLAtAngleCrossM2.Text))
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Large (Check Flexibility)#!#";
                        }
                    }
                }
                #endregion[Lower Leg Angle at Ankle Cross]
                #region[Upper Leg Full Flexion Angle]
                if (step == 2)
                {
                    if (lblStep1ULFullFlexionM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Upper Leg Full Flexion Angle (High Knee Position) is Too Small#!#";
                    }
                }
                if (step == 4)
                {
                    if (lblStep2ULAtFullFlexionM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Upper Leg Full Flexion Angle (High Knee Position) is Too Small#!#";
                    }
                }
                if (step == 6)
                {
                    if (lblStep3ULAtFullFlexionM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Upper Leg Full Flexion Angle (High Knee Position) is Too Small#!#";
                    }
                }
                #endregion[Upper Leg Full Flexion Angle]
                #region[Lower Leg Full Flexion Angle at Touchdown]
                if (step == 7)
                {
                    if (lblIntoHurdleLLTouchdownM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Lower Leg Flexion Angle at Touchdown is Too Small#!#";
                    }
                }
                #endregion[Lower Leg Full Flexion Angle at Touchdown]
                MakeSprintInitialVariableChartValuesHidden();
            }
            return errorMessages;
        }
        else
        {
            leftMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList1.SelectedValue));
            rightMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList3.SelectedValue));

            string LVideopath = leftMovie.FilePath;
            string RVideopath = rightMovie.FilePath;

            if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
            {
                GetHurdleStepsLeftMovieVariablesforNonTires(leftMovie.LessonId, LVideopath);
                GetHurdleStepsRightMovieVariablesforNonTires(rightMovie.LessonId, RVideopath);
            }
            try
            {
                #region[Stride Length Into Hurdle]
                if (step == 7)
                {
                    if (lblHurdleStepIntoM1.ForeColor == Color.Red && lblHurdleStepIntoM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblHurdleStepIntoI.Text)) < Convert.ToSingle(lblHurdleStepIntoM1.Text)
                            && Math.Abs(Convert.ToSingle(lblHurdleStepIntoF.Text)) < Convert.ToSingle(lblHurdleStepIntoM2.Text))
                        {
                            errorMessages += "Stride Length Into is Too Short (Too Close)#!#";
                        }
                        else
                        {
                            if (Math.Abs(Convert.ToSingle(lblHurdleStepIntoI.Text)) > Convert.ToSingle(lblHurdleStepIntoM1.Text)
                                && Math.Abs(Convert.ToSingle(lblHurdleStepIntoF.Text)) > Convert.ToSingle(lblHurdleStepIntoM2.Text))
                            {
                                errorMessages += "Stride Length Into is Too Long (Too Far)#!#";
                            }
                        }
                    }
                }
                #endregion[Stride Length Into Hurdle]
                #region[Stride Length Off Hurdle]
                if (step == 1)
                {
                    if (lblHurdleStepOffM1.ForeColor == Color.Red && lblHurdleStepOffM2.ForeColor == Color.Red)
                    {
                        if (Math.Abs(Convert.ToSingle(lblHurdleStepOffI.Text)) < Convert.ToSingle(lblHurdleStepOffM1.Text)
                            && Math.Abs(Convert.ToSingle(lblHurdleStepOffF.Text)) < Convert.ToSingle(lblHurdleStepOffM2.Text))
                        {
                            errorMessages += "Stride Length Off is Too Short#!#";
                        }
                        else
                        {
                            if (Math.Abs(Convert.ToSingle(lblHurdleStepOffI.Text)) > Convert.ToSingle(lblHurdleStepOffM1.Text)
                                && Math.Abs(Convert.ToSingle(lblHurdleStepOffF.Text)) > Convert.ToSingle(lblHurdleStepOffM2.Text))
                            {
                                errorMessages += "Stride Length Off is Too Long#!#";
                            }
                        }
                    }
                }
                #endregion[Stride Length Off Hurdle]
                #region[Velocity]
                if (step == 1 || step == 2 || step == 3 || step == 4 || step == 5 || step == 6 || step == 7)
                {
                    if (lblHurdleStepVelocityM1.ForeColor == Color.Red && lblHurdleStepVelocityM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Velocity is Too Low (Compared to World Record Performance)#!#";
                    }
                }
                #endregion[Velocity]
                #region[Ground Time]
                if (step == 2)
                {
                    if (lblStep1HSGroundTimeM1.ForeColor == Color.Red && lblStep1HSGroundTimeM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Ground Time is Too Long#!#";
                    }
                }
                if (step == 4)
                {
                    if (lblStep2HSGroundTimeM1.ForeColor == Color.Red && lblStep2HSGroundTimeM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Ground Time is Too Long#!#";
                    }
                }
                if (step == 6)
                {
                    if (lblStep3HSGroundTimeM1.ForeColor == Color.Red && lblStep3HSGroundTimeM2.ForeColor == Color.Red)
                    {
                        errorMessages += "Ground Time is Too Long#!#";
                    }
                }

                #endregion[Ground Time]
                #region[Air Time]
                if (step == 3 || step == 5 || step == 7)
                {
                    if (lblStep1HSGroundTimeM1.ForeColor == Color.Red && lblStep1HSGroundTimeM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep1HSAirTimeF.Text) < Convert.ToDouble(lblStep1HSAirTimeM2.Text)
                            && Convert.ToDouble(lblStep1HSAirTimeI.Text) < Convert.ToDouble(lblStep1HSGroundTimeM1.Text))
                        {
                            if (lblAirTimeRightToLeftM2.ForeColor == Color.Red && lblAirTimeRightToLeftM1.ForeColor == Color.Red)
                            {
                                errorMessages += "Air Time is Too Short#!#";
                            }
                        }
                        else
                        {
                            if (Convert.ToDouble(lblStep1HSAirTimeF.Text) > Convert.ToDouble(lblStep1HSAirTimeM2.Text)
                                && Convert.ToDouble(lblStep1HSAirTimeI.Text) > Convert.ToDouble(lblStep1HSGroundTimeM1.Text))
                            {
                                if (lblAirTimeRightToLeftM2.ForeColor == Color.Red && lblAirTimeRightToLeftM1.ForeColor == Color.Red)
                                {
                                    errorMessages += "Air Time is Too Long#!#";
                                }
                            }
                        }
                    }
                }
                #endregion[Air Time]
                #region[Time To Upper Leg Full Flexion]
                if (step == 2)
                {
                    //if (lblStep1UlFlexTimeM2.ForeColor == Color.Red && lblStep1UlFlexTimeM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Time To Upper Leg Full Flexion is Too Long#!#";
                    }
                }
                if (step == 4)
                {
                    //if (lblStep2UlFlexTimeM2.ForeColor == Color.Red && lblStep2UlFlexTimeM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Time To Upper Leg Full Flexion is Too Long#!#";
                    }
                }
                if (step == 6)
                {
                    //if (lblStep3UlFlexTimeM2.ForeColor == Color.Red && lblStep3UlFlexTimeM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Time To Upper Leg Full Flexion is Too Long#!#";
                    }
                }
                #endregion[Time To Upper Leg Full Flexion]
                #region[Stride Rate]
                if (step == 1 || step == 2 || step == 3)
                {
                    if ((lblStep1HSStrideRateI.Text != "" && lblStep1HSStrideRateM1.Text != "") && (lblStep1HSStrideRateF.Text != "" && lblStep1HSStrideRateM2.Text != ""))
                    {
                        if (lblStep1HSStrideRateM2.ForeColor == Color.Red && lblStep1HSStrideRateM1.ForeColor == Color.Red)
                        {
                            if (Convert.ToDouble(lblStep1HSStrideRateF.Text) < Convert.ToDouble(lblStep1HSStrideRateM2.Text) &&
                                Convert.ToDouble(lblStep1HSStrideRateI.Text) < Convert.ToDouble(lblStep1HSStrideRateM1.Text))
                            {
                                errorMessages += "Step One Stride Rate is Too Low#!#";
                            }
                            else
                            {
                                if (Convert.ToDouble(lblStep1HSStrideRateF.Text) > Convert.ToDouble(lblStep1HSStrideRateM2.Text) &&
                                    Convert.ToDouble(lblStep1HSStrideRateI.Text) > Convert.ToDouble(lblStep1HSStrideRateM1.Text))
                                {
                                    errorMessages += "Step One Stride Rate is Too High#!#";
                                }
                            }
                        }
                    }
                }
                if (step == 3 || step == 4 || step == 5)
                {
                    if ((lblStep2HSStrideRateI.Text != "" && lblStep2HSStrideRateM1.Text != "") && (lblStep2HSStrideRateF.Text != "" && lblStep2HSStrideRateM2.Text != ""))
                    {
                        if (lblStep2HSStrideRateM2.ForeColor == Color.Red && lblStep2HSStrideRateM1.ForeColor == Color.Red)
                        {
                            if (Convert.ToDouble(lblStep2HSStrideRateF.Text) < Convert.ToDouble(lblStep2HSStrideRateM2.Text) &&
                                Convert.ToDouble(lblStep2HSStrideRateI.Text) < Convert.ToDouble(lblStep2HSStrideRateM1.Text))
                            {
                                errorMessages += "Step Two Stride Rate is Too Low#!#";
                            }
                            else
                            {
                                if (Convert.ToDouble(lblStep2HSStrideRateF.Text) > Convert.ToDouble(lblStep2HSStrideRateM2.Text) &&
                                    Convert.ToDouble(lblStep2HSStrideRateI.Text) > Convert.ToDouble(lblStep2HSStrideRateM1.Text))
                                {
                                    errorMessages += "Step Two Stride Rate is Too High#!#";
                                }
                            }
                        }
                    }
                }
                if (step == 5 || step == 6 || step == 7)
                {
                    if ((lblStep3StrideRateI.Text != "" && lblStep3StrideRateM1.Text != "") && (lblStep3StrideRateF.Text != "" && lblStep3StrideRateM2.Text != ""))
                    {
                        if (lblStep3StrideRateM2.ForeColor == Color.Red && lblStep3StrideRateM1.ForeColor == Color.Red)
                        {
                            if (Convert.ToDouble(lblStep3StrideRateF.Text) < Convert.ToDouble(lblStep3StrideRateM2.Text) &&
                                Convert.ToDouble(lblStep3StrideRateI.Text) < Convert.ToDouble(lblStep3StrideRateM1.Text))
                            {
                                errorMessages += "Step Three Stride Rate is Too Low#!#";
                            }
                            else
                            {
                                if (Convert.ToDouble(lblStep3StrideRateF.Text) > Convert.ToDouble(lblStep3StrideRateM2.Text) &&
                                    Convert.ToDouble(lblStep3StrideRateI.Text) > Convert.ToDouble(lblStep3StrideRateM1.Text))
                                {
                                    errorMessages += "Step Three Stride Rate is Too High#!#";
                                }
                            }
                        }
                    }
                }
                #endregion[Stride Rate]
                #region[Stride Length]
                if (step == 3)
                {
                    if ((lblStep1StrideLengthI.Text != "" && lblStep1StrideLengthM1.Text != "") && (lblStep1StrideLengthF.Text != "" && lblStep1StrideLengthM2.Text != ""))
                    {
                        if (lblStep1StrideLengthM2.ForeColor == Color.Red && lblStep1StrideLengthM1.ForeColor == Color.Red)
                        {
                            if (Convert.ToDouble(lblStep1StrideLengthF.Text) < Convert.ToDouble(lblStep1StrideLengthM2.Text) &&
                                Convert.ToDouble(lblStep1StrideLengthI.Text) < Convert.ToDouble(lblStep1StrideLengthM1.Text))
                            {
                                errorMessages += "Step One Stride Length is Too Short#!#";
                            }
                            else
                            {
                                if (Convert.ToDouble(lblStep1StrideLengthF.Text) > Convert.ToDouble(lblStep1StrideLengthM2.Text) &&
                                    Convert.ToDouble(lblStep1StrideLengthI.Text) > Convert.ToDouble(lblStep1StrideLengthM1.Text))
                                {
                                    errorMessages += "Step One Stride Length is Too Long#!#";
                                }
                            }
                        }
                    }
                }
                if (step == 5)
                {
                    if ((lblStep2StrideLengthI.Text != "" && lblStep2StrideLengthM1.Text != "") && (lblStep2StrideLengthF.Text != "" && lblStep2StrideLengthM2.Text != ""))
                    {
                        if (lblStep2StrideLengthM2.ForeColor == Color.Red && lblStep2StrideLengthM1.ForeColor == Color.Red)
                        {
                            if (Convert.ToDouble(lblStep2StrideLengthF.Text) < Convert.ToDouble(lblStep2StrideLengthM2.Text) &&
                                Convert.ToDouble(lblStep2StrideLengthI.Text) < Convert.ToDouble(lblStep2StrideLengthM1.Text))
                            {
                                errorMessages += "Step Two Stride Length is Too Short#!#";
                            }
                            else
                            {
                                if (Convert.ToDouble(lblStep2StrideLengthF.Text) > Convert.ToDouble(lblStep2StrideLengthM2.Text) &&
                                    Convert.ToDouble(lblStep2StrideLengthI.Text) > Convert.ToDouble(lblStep2StrideLengthM1.Text))
                                {
                                    errorMessages += "Step Two Stride Length is Too Long#!#";
                                }
                            }
                        }
                    }
                }
                if (step == 7)
                {
                    if ((lblStep3StrideLengthI.Text != "" && lblStep3StrideLengthM1.Text != "") && (lblStep3StrideLengthF.Text != "" && lblStep3StrideLengthM2.Text != ""))
                    {
                        if (lblStep3StrideLengthM2.ForeColor == Color.Red && lblStep3StrideLengthM1.ForeColor == Color.Red)
                        {
                            if (Convert.ToDouble(lblStep3StrideLengthF.Text) < Convert.ToDouble(lblStep3StrideLengthM2.Text) &&
                                Convert.ToDouble(lblStep3StrideLengthI.Text) < Convert.ToDouble(lblStep3StrideLengthM1.Text))
                            {
                                errorMessages += "Step Three Stride Length is Too Short#!#";
                            }
                            else
                            {
                                if (Convert.ToDouble(lblStep3StrideLengthF.Text) > Convert.ToDouble(lblStep3StrideLengthM2.Text) &&
                                    Convert.ToDouble(lblStep3StrideLengthI.Text) > Convert.ToDouble(lblStep3StrideLengthM1.Text))
                                {
                                    errorMessages += "Step Three Stride Length is Too Long#!#";
                                }
                            }
                        }
                    }
                }
                #endregion[Stride Length]
                #region[Touchdown Distance]
                if (step == 1)
                {
                    if (lblStep1TouchdownDistanceM2.ForeColor == Color.Red && lblStep1TouchdownDistanceM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance is Too Long#!#";
                    }
                }
                if (step == 3)
                {
                    if (lblStep2TouchdownDistanceM2.ForeColor == Color.Red && lblStep2TouchdownDistanceM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance is Too Long#!#";
                    }
                }
                if (step == 5)
                {
                    if (lblStep3TouchdownDistanceM2.ForeColor == Color.Red && lblStep3TouchdownDistanceM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance is Too Long#!#";
                    }
                }
                if (step == 7)
                {
                    if (lblIntoHurdleTouchdownDistanceM2.ForeColor == Color.Red && lblIntoHurdleTouchdownDistanceM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Touchdown Distance is Too Long#!#";
                    }
                }
                #endregion[Touchdown Distance]
                #region[Knee Seperation]
                if (step == 1)
                {
                    if (lblStep1KSTouchdownM2.ForeColor == Color.Red && lblStep1KSTouchdownM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Knee Seperation Distance is Too Small#!#";
                    }
                }
                if (step == 3)
                {
                    if (lblStep2KSAtTouchdownM2.ForeColor == Color.Red && lblStep2KSAtTouchdownM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Knee Seperation Distance is Too Large#!#";
                    }
                }
                if (step == 5)
                {
                    if (lblStep3KSAtTouchdownM2.ForeColor == Color.Red && lblStep3KSAtTouchdownM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Knee Seperation Distance is Too Large#!#";
                    }
                }
                if (step == 7)
                {
                    if (lblIntoHurdleKSTouchdownM2.ForeColor == Color.Red && lblIntoHurdleKSTouchdownM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Knee Seperation Distance is Too Large#!#";
                    }
                }
                #endregion[Knee Seperation]

                #region[Trunk Touchdown Angle]
                if (step == 1)
                {
                    if (lblStep1TrunkTouchdownAngleM1.ForeColor == Color.Red && lblStep1TrunkTouchdownAngleM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep1TrunkTouchdownAngleF.Text) < Convert.ToDouble(lblStep1TrunkTouchdownAngleM2.Text)
                            && Convert.ToDouble(lblStep1TrunkTouchdownAngleI.Text) < Convert.ToDouble(lblStep1TrunkTouchdownAngleM1.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            if (Convert.ToDouble(lblStep1TrunkTouchdownAngleF.Text) > Convert.ToDouble(lblStep1TrunkTouchdownAngleM2.Text)
                                && Convert.ToDouble(lblStep1TrunkTouchdownAngleI.Text) > Convert.ToDouble(lblStep1TrunkTouchdownAngleM1.Text))
                            {
                                errorMessages += "Trunk Angle is Too Flexed#!#";
                            }
                        }
                    }
                }
                if (step == 3)
                {
                    if (lblStep2TrunkTouchdownAngleM1.ForeColor == Color.Red && lblStep2TrunkTouchdownAngleM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep2TrunkTouchdownAngleF.Text) < Convert.ToDouble(lblStep2TrunkTouchdownAngleM2.Text)
                            && Convert.ToDouble(lblStep2TrunkTouchdownAngleI.Text) < Convert.ToDouble(lblStep2TrunkTouchdownAngleM1.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            if (Convert.ToDouble(lblStep2TrunkTouchdownAngleF.Text) > Convert.ToDouble(lblStep2TrunkTouchdownAngleM2.Text)
                                && Convert.ToDouble(lblStep2TrunkTouchdownAngleI.Text) > Convert.ToDouble(lblStep2TrunkTouchdownAngleM1.Text))
                            {
                                errorMessages += "Trunk Angle is Too Flexed#!#";
                            }
                        }
                    }
                }
                if (step == 5)
                {
                    if (lblStep3TrunkTouchdownAngleM1.ForeColor == Color.Red && lblStep3TrunkTouchdownAngleM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep3TrunkTouchdownAngleF.Text) < Convert.ToDouble(lblStep3TrunkTouchdownAngleM2.Text)
                            && Convert.ToDouble(lblStep3TrunkTouchdownAngleI.Text) < Convert.ToDouble(lblStep3TrunkTouchdownAngleM1.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            if (Convert.ToDouble(lblStep3TrunkTouchdownAngleF.Text) > Convert.ToDouble(lblStep3TrunkTouchdownAngleM2.Text)
                                && Convert.ToDouble(lblStep3TrunkTouchdownAngleI.Text) > Convert.ToDouble(lblStep3TrunkTouchdownAngleM1.Text))
                            {
                                errorMessages += "Trunk Angle is Too Flexed#!#";
                            }
                        }
                    }
                }
                if (step == 7)
                {
                    if (lblIntoHurdleTrunkTouchdownAngleM1.ForeColor == Color.Red && lblIntoHurdleTrunkTouchdownAngleM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblIntoHurdleTrunkTouchdownAngleF.Text) < Convert.ToDouble(lblIntoHurdleTrunkTouchdownAngleM2.Text)
                            && Convert.ToDouble(lblIntoHurdleTrunkTouchdownAngleI.Text) < Convert.ToDouble(lblIntoHurdleTrunkTouchdownAngleM1.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            if (Convert.ToDouble(lblIntoHurdleTrunkTouchdownAngleF.Text) > Convert.ToDouble(lblIntoHurdleTrunkTouchdownAngleM2.Text)
                                && Convert.ToDouble(lblIntoHurdleTrunkTouchdownAngleI.Text) > Convert.ToDouble(lblIntoHurdleTrunkTouchdownAngleM1.Text))
                            {
                                errorMessages += "Trunk Angle is Too Flexed#!#";
                            }
                        }
                    }
                }
                #endregion[Trunk Touchdown Angle]
                #region[Trunk Takeoff Angle]
                if (step == 2)
                {
                    if (lblStep1TrunkTakeoffAngleM1.ForeColor == Color.Red && lblStep1TrunkTakeoffAngleM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep1TrunkTakeoffAngleF.Text) < Convert.ToDouble(lblStep1TrunkTakeoffAngleM2.Text)
                            && Convert.ToDouble(lblStep1TrunkTakeoffAngleI.Text) < Convert.ToDouble(lblStep1TrunkTakeoffAngleM1.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            if (Convert.ToDouble(lblStep1TrunkTakeoffAngleF.Text) > Convert.ToDouble(lblStep1TrunkTakeoffAngleM2.Text)
                                && Convert.ToDouble(lblStep1TrunkTakeoffAngleI.Text) > Convert.ToDouble(lblStep1TrunkTakeoffAngleM1.Text))
                            {
                                errorMessages += "Trunk Angle is Too Flexed#!#";
                            }
                        }
                    }
                }
                if (step == 4)
                {
                    if (lblStep2TrunkTakeoffAngleM1.ForeColor == Color.Red && lblStep2TrunkTakeoffAngleM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep2TrunkTakeoffAngleF.Text) < Convert.ToDouble(lblStep2TrunkTakeoffAngleM2.Text)
                            && Convert.ToDouble(lblStep2TrunkTakeoffAngleI.Text) < Convert.ToDouble(lblStep2TrunkTakeoffAngleM1.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            if (Convert.ToDouble(lblStep2TrunkTakeoffAngleF.Text) > Convert.ToDouble(lblStep2TrunkTakeoffAngleM2.Text)
                                && Convert.ToDouble(lblStep2TrunkTakeoffAngleI.Text) > Convert.ToDouble(lblStep2TrunkTakeoffAngleM1.Text))
                            {
                                errorMessages += "Trunk Angle is Too Flexed#!#";
                            }
                        }
                    }
                }
                if (step == 6)
                {
                    if (lblStep3TrunkTakeoffAngleM1.ForeColor == Color.Red && lblStep3TrunkTakeoffAngleM2.ForeColor == Color.Red)
                    {
                        if (Convert.ToDouble(lblStep3TrunkTakeoffAngleI.Text) < Convert.ToDouble(lblStep3TrunkTakeoffAngleM2.Text)
                            && Convert.ToDouble(lblStep3TrunkTakeoffAngleI.Text) < Convert.ToDouble(lblStep3TrunkTakeoffAngleM1.Text))
                        {
                            errorMessages += "Trunk Angle is Too Upright#!#";
                        }
                        else
                        {
                            if (Convert.ToDouble(lblStep3TrunkTakeoffAngleF.Text) > Convert.ToDouble(lblStep3TrunkTakeoffAngleM2.Text)
                                && Convert.ToDouble(lblStep3TrunkTakeoffAngleI.Text) > Convert.ToDouble(lblStep3TrunkTakeoffAngleM1.Text))
                            {
                                errorMessages += "Trunk Angle is Too Flexed#!#";
                            }
                        }
                    }
                }
                #endregion[Trunk Takeoff Angle]


                #region[Upper Leg Full Extension]
                if (step == 2)
                {
                    if (lblStep1ULFullExtensionM2.Text != "" && lblStep1ULAtFullExtensionM1.Text != "")
                    {
                        if (Convert.ToInt32(lblStep1ULAtFullExtensionF.Text) < Convert.ToInt32(lblStep1ULFullExtensionM2.Text)
                            && Convert.ToInt32(lblStep1ULFullExtensionI.Text) < Convert.ToInt32(lblStep1ULAtFullExtensionM1.Text))
                        {
                            errorMessages += "Upper Leg Full Extension Angle is Too Small (Over-Extending into Backside)#!#";
                        }
                        else
                        {
                            if (Convert.ToInt32(lblStep1ULAtFullExtensionF.Text) > Convert.ToInt32(lblStep1ULFullExtensionM2.Text)
                                && Convert.ToInt32(lblStep1ULFullExtensionI.Text) > Convert.ToInt32(lblStep1ULAtFullExtensionM1.Text))
                            {
                                errorMessages += "Upper Leg Full Extension Angle is Too Large (Insufficient Extension)#!#";
                            }
                        }
                    }
                }
                if (step == 4)
                {
                    if (lblStep2ULAtFullExtensionM2.Text != "" && lblStep2ULAtFullExtensionM1.Text != "")
                    {
                        if (Convert.ToInt32(lblStep2ULAtFullExtensionF.Text) < Convert.ToInt32(lblStep2ULAtFullExtensionM2.Text)
                            && Convert.ToInt32(lblStep2ULAtFullExtensionI.Text) < Convert.ToInt32(lblStep2ULAtFullExtensionM1.Text))
                        {
                            errorMessages += "Upper Leg Full Extension Angle is Too Small (Over-Extending into Backside)#!#";
                        }
                        else
                        {
                            if (Convert.ToInt32(lblStep2ULAtFullExtensionF.Text) > Convert.ToInt32(lblStep2ULAtFullExtensionM2.Text)
                                && Convert.ToInt32(lblStep2ULAtFullExtensionI.Text) > Convert.ToInt32(lblStep2ULAtFullExtensionM1.Text))
                            {
                                errorMessages += "Upper Leg Full Extension Angle is Too Large (Insufficient Extension)#!#";
                            }
                        }
                    }
                }
                if (step == 6)
                {
                    if (lblStep3ULAtFullExtensionM2.Text != "" && lblStep3ULAtFullExtensionM1.Text != "")
                    {
                        if (Convert.ToInt32(lblStep3ULAtFullExtensionF.Text) < Convert.ToInt32(lblStep3ULAtFullExtensionM2.Text)
                            && Convert.ToInt32(lblStep3ULAtFullExtensionI.Text) < Convert.ToInt32(lblStep3ULAtFullExtensionM1.Text))
                        {
                            errorMessages += "Upper Leg Full Extension Angle is Too Small (Over-Extending into Backside)#!#";
                        }
                        else
                        {
                            if (Convert.ToInt32(lblStep3ULAtFullExtensionF.Text) > Convert.ToInt32(lblStep3ULAtFullExtensionM2.Text)
                                && Convert.ToInt32(lblStep3ULAtFullExtensionI.Text) > Convert.ToInt32(lblStep3ULAtFullExtensionM1.Text))
                            {
                                errorMessages += "Upper Leg Full Extension Angle is Too Large (Insufficient Extension)#!#";
                            }
                        }
                    }
                }
                #endregion[Upper Leg Full Extension]
                #region[Lower Leg Angle at Takeoff]
                if (step == 2)
                {
                    if (lblStep1LLAtTakeoffM2.Text != "" && lblStep1LLAtTakeoffM1.Text != "")
                    {
                        if (Convert.ToInt32(lblStep1LLAtTakeoffF.Text) < Convert.ToInt32(lblStep1LLAtTakeoffM2.Text)
                            && Convert.ToInt32(lblStep1LLAtTakeoffI.Text) < Convert.ToInt32(lblStep1LLAtTakeoffM1.Text))
                        {
                            errorMessages += "Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            if (Convert.ToInt32(lblStep1LLAtTakeoffF.Text) > Convert.ToInt32(lblStep1LLAtTakeoffM2.Text)
                                && Convert.ToInt32(lblStep1LLAtTakeoffI.Text) > Convert.ToInt32(lblStep1LLAtTakeoffM1.Text))
                            {
                                errorMessages += "Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                            }
                        }
                    }
                }
                if (step == 4)
                {
                    if (lblStep2LLAtTakeoffM2.Text != "" && lblStep2LLAtTakeoffM1.Text != "")
                    {
                        if (Convert.ToInt32(lblStep2LLAtTakeoffF.Text) < Convert.ToInt32(lblStep2LLAtTakeoffM2.Text)
                            && Convert.ToInt32(lblStep2LLAtTakeoffI.Text) < Convert.ToInt32(lblStep2LLAtTakeoffM1.Text))
                        {
                            errorMessages += "Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            if (Convert.ToInt32(lblStep2LLAtTakeoffF.Text) > Convert.ToInt32(lblStep2LLAtTakeoffM2.Text)
                                && Convert.ToInt32(lblStep2LLAtTakeoffI.Text) > Convert.ToInt32(lblStep2LLAtTakeoffM1.Text))
                            {
                                errorMessages += "Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                            }
                        }
                    }
                }
                if (step == 6)
                {
                    if (lblStep3LLAtTakeoffM2.Text != "" && lblStep3LLAtTakeoffM1.Text != "")
                    {
                        if (Convert.ToInt32(lblStep3LLAtTakeoffF.Text) < Convert.ToInt32(lblStep3LLAtTakeoffM2.Text)
                            && Convert.ToInt32(lblStep3LLAtTakeoffI.Text) < Convert.ToInt32(lblStep3LLAtTakeoffM1.Text))
                        {
                            errorMessages += "Lower Leg Angle at Takeoff is Too Small (Insufficient Extension)#!#";
                        }
                        else
                        {
                            if (Convert.ToInt32(lblStep3LLAtTakeoffF.Text) > Convert.ToInt32(lblStep3LLAtTakeoffM2.Text)
                                && Convert.ToInt32(lblStep3LLAtTakeoffI.Text) > Convert.ToInt32(lblStep3LLAtTakeoffM1.Text))
                            {
                                errorMessages += "Lower Leg Angle at Takeoff is Too Large (Over-Extending into Backside)#!#";
                            }
                        }
                    }
                }
                #endregion[Lower Leg Angle at Takeoff]
                #region[Lower Leg Full Flexion Angle]
                if (step == 4)
                {
                    if (lblStep2LLAtFullFlexionM2.Text != "" && lblStep2LLFullAtFlexionM1.Text != "")
                    {
                        if (Convert.ToInt32(lblStep2LLAtFullFlexionF.Text) < Convert.ToInt32(lblStep2LLAtFullFlexionM2.Text)
                            && Convert.ToInt32(lblStep2LLAtFullFlexionI.Text) < Convert.ToInt32(lblStep2LLFullAtFlexionM1.Text))
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            if (Convert.ToInt32(lblStep2LLAtFullFlexionF.Text) > Convert.ToInt32(lblStep2LLAtFullFlexionM2.Text)
                                && Convert.ToInt32(lblStep2LLAtFullFlexionI.Text) > Convert.ToInt32(lblStep2LLFullAtFlexionM1.Text))
                            {
                                errorMessages += "Lower Leg Full Flexion Angle is Too Large (Check Flexibility)#!#";
                            }
                        }
                    }
                }
                if (step == 6)
                {
                    if (lblStep3LLAtFullFlexionM2.Text != "" && lblStep3LLAtFullFlexionM1.Text != "")
                    {
                        if (Convert.ToInt32(lblStep3LLAtFullFlexionF.Text) < Convert.ToInt32(lblStep3LLAtFullFlexionM2.Text)
                            && Convert.ToInt32(lblStep3LLAtFullFlexionI.Text) < Convert.ToInt32(lblStep3LLAtFullFlexionM1.Text))
                        {
                            errorMessages += "Lower Leg Full Flexion Angle is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            if (Convert.ToInt32(lblStep3LLAtFullFlexionF.Text) > Convert.ToInt32(lblStep3LLAtFullFlexionM2.Text)
                                && Convert.ToInt32(lblStep3LLAtFullFlexionI.Text) > Convert.ToInt32(lblStep3LLAtFullFlexionM1.Text))
                            {
                                errorMessages += "Lower Leg Full Flexion Angle is Too Large (Check Flexibility)#!#";
                            }
                        }
                    }
                }
                #endregion[Lower Leg Full Flexion Angle]
                #region[Lower Leg Angle at Ankle Cross]
                if (step == 4)
                {
                    if (lblStep2LLAtAngleCrossM2.Text != "" && lblStep2LLAtAngleCrossM1.Text != "")
                    {
                        if (Convert.ToInt32(lblStep2LLAtAngleCrossF.Text) < Convert.ToInt32(lblStep2LLAtAngleCrossM2.Text)
                            && Convert.ToInt32(lblStep2LLAtAngleCrossI.Text) < Convert.ToInt32(lblStep2LLAtAngleCrossM1.Text))
                        {
                            errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            if (Convert.ToInt32(lblStep2LLAtAngleCrossF.Text) > Convert.ToInt32(lblStep2LLAtAngleCrossM2.Text)
                                && Convert.ToInt32(lblStep2LLAtAngleCrossI.Text) > Convert.ToInt32(lblStep2LLAtAngleCrossM1.Text))
                            {
                                errorMessages += "Lower Leg Angle at Ankle Cross is Too Large (Check Flexibility)#!#";
                            }
                        }
                    }
                }
                if (step == 6)
                {
                    if (lblStep3LLAtAngleCrossM2.Text != "" && lblStep3LLAtAngleCrossM1.Text != "")
                    {
                        if (Convert.ToInt32(lblStep3LLAtAngleCrossF.Text) < Convert.ToInt32(lblStep3LLAtAngleCrossM2.Text)
                            && Convert.ToInt32(lblStep3LLAtAngleCrossI.Text) < Convert.ToInt32(lblStep3LLAtAngleCrossM1.Text))
                        {
                            errorMessages += "Lower Leg Angle at Ankle Cross is Too Small (Back Side Indicator)#!#";
                        }
                        else
                        {
                            if (Convert.ToInt32(lblStep3LLAtAngleCrossF.Text) > Convert.ToInt32(lblStep3LLAtAngleCrossM2.Text)
                                && Convert.ToInt32(lblStep3LLAtAngleCrossI.Text) > Convert.ToInt32(lblStep3LLAtAngleCrossM1.Text))
                            {
                                errorMessages += "Lower Leg Angle at Ankle Cross is Too Large (Check Flexibility)#!#";
                            }
                        }
                    }
                }
                #endregion[Lower Leg Angle at Ankle Cross]
                #region[Upper Leg Full Flexion Angle]
                if (step == 2)
                {
                    if (lblStep1ULFullFlexionM2.ForeColor == Color.Red && lblStep1ULFullFlexionM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Upper Leg Full Flexion Angle (High Knee Position) is Too Small#!#";
                    }
                }
                if (step == 4)
                {
                    if (lblStep2ULAtFullFlexionM2.ForeColor == Color.Red && lblStep2ULAtFullFlexionM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Upper Leg Full Flexion Angle (High Knee Position) is Too Small#!#";
                    }
                }
                if (step == 6)
                {
                    if (lblStep3ULAtFullFlexionM2.ForeColor == Color.Red && lblStep3ULAtFullFlexionM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Upper Leg Full Flexion Angle (High Knee Position) is Too Small#!#";
                    }
                }
                #endregion[Upper Leg Full Flexion Angle]
                #region[Lower Leg Full Flexion Angle at Touchdown]
                if (step == 7)
                {
                    if (lblIntoHurdleLLTouchdownM2.ForeColor == Color.Red && lblIntoHurdleLLTouchdownM1.ForeColor == Color.Red)
                    {
                        errorMessages += "Lower Leg Flexion Angle at Touchdown is Too Small#!#";
                    }
                }
                #endregion[Lower Leg Full Flexion Angle at Touchdown]
            }
            catch (Exception ex)
            {
                ex.Message.ToString();
            }
            return errorMessages;
        }
    }


    string returnIntegerInString(string value)
    {
        return (value == null || value == "" ? "0" : value);
    }

    private string CheckTypeofSession(string selectedSession)
    {
        string sesionType = string.Empty;
        string one;
        if (selectedSession.Contains("Model View – Initial"))
        {
            one = "Model View – Initial";
            sesionType = selectedSession.Replace(one, "TypeZero");
        }
        if (selectedSession.Contains("Video View – Initial"))
        {
            one = "Video View – Initial";
            sesionType = selectedSession.Replace(one, "TypeOne");
        }
        if (selectedSession.Contains("Model View – Final"))
        {
            one = "Model View – Final";
            sesionType = selectedSession.Replace(one, "TypeTwo");
        }
        if (selectedSession.Contains("Video View – Final"))
        {
            one = "Video View – Final";
            sesionType = selectedSession.Replace(one, "TypeFour");
        }
        return sesionType;
    }


    private void DisplaySummaryForComparisonSessions(string summaryDate, string lDate, string rDate, string leftLocaton, string rightLocation, string selectedDate, string latestDate)
    {
        string selectedSession = DropDownList1.SelectedItem.Text;
        string sessionVideo = CheckTypeofSession(selectedSession);
        int sessioType = Convert.ToInt16(DropDownList2.SelectedItem.Value);
        string selectedSummaryPath = sae.CheckRequestedSessionExists(summaryDate, lesson.CustomerId, sessioType);
        string selectedSessionPath = sae.CheckRequestedSessionExists(sessionVideo, lesson.CustomerId, sessioType);

        if (lDate == rDate && leftLocaton == rightLocation)
        {
            LoadSummary();
            if (objdivsum.Visible == true)        //summary movie not available                   
            {
                Label8.Visible = false;
            }
            else
            {
                //Label8.Text = "Summary Video is displayed";
                //Label8.Visible = true;
                Label10.Visible = false;
                Label13.Visible = false;
                lblSummaryRequested.Visible = false;
                MsgDiv2.Visible = false;
                Label16.Visible = false;

            }
            if (obj1div.Visible.Equals(true) || obj1div2.Visible.Equals(true))  //video is not available
            {
                if (selectedSessionPath == "")
                {
                    MsgDiv.Visible = true;
                }
                else
                {
                    MsgDiv.Visible = false;
                    lblSessionRequested.Text = "Session Video has been requested.  You will be notified when it is available.";
                    lblSessionRequested.Visible = true;
                    Label10.Visible = false;
                    Label8.Visible = false;
                    Label13.Visible = false;
                    lblSummaryRequested.Visible = false;
                    MsgDiv2.Visible = false;
                    Label16.Visible = false;

                }
            }

            if (selectedDate == latestDate)
            {
                if (selectedSummaryPath == "")
                {
                    //MsgDiv2.Visible = true;
                    //MsgDiv2.Style.Add("display", "block");
                    Label10.Visible = false;
                    Label16.Visible = false;
                    Label8.Visible = false;
                    Label13.Visible = false;
                    lblSummaryRequested.Visible = false;
                }
                else
                {
                    MsgDiv2.Visible = false;
                    lblSummaryRequested.Visible = true;
                    Label10.Visible = false;
                    Label16.Visible = false;
                    Label13.Visible = false;
                    Label8.Visible = false;
                }
            }
            else
            {
                //Label16.Text = "Summary Video is only available for the Latest Session";
                //Label16.Visible = true;
                Label10.Visible = false;
                Label8.Visible = false;
                Label13.Visible = false;
                lblSummaryRequested.Visible = false;
                MsgDiv2.Visible = false;
            }
            if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
            {
                SprintId.Attributes["style"] = string.Format("margin-top:650px");
                System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "OtherComparison", "MakeSprintHeight();", true);
            }

            if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
            {
              //HurdleStepId.Attributes["style"] = string.Format("margin-top:1200px");
              HurdleStepId.Attributes["style"] = string.Format("margin-top:650px");
                System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "OtherComparison", "MakeHurdleStepsHeight();", true);
            }
            if (DropDownList2.SelectedItem.Text.Equals("Start"))
            {
                System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "OtherStartComparisonHeight", "MakeStartHeight();", true);
                StartId.Attributes["style"] = string.Format("margin-top:650px");
            }
            if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
            {
                HurdleId.Attributes["style"] = string.Format("margin-top:650px");
                System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "OtherHurdleComparisonHeight", "MakeHurdleHeight();", true);
            }
        }
        else
        {
            Label16.Visible = false;
            Label8.Visible = false;
            Label10.Visible = false;
            //Label13.Text = "No Summary Video Displayed In Comparison Mode";
            //Label13.Visible = true;
            MsgDiv2.Visible = false;
            lblSummaryRequested.Visible = false;
            if (obj1div.Visible.Equals(true) || obj1div2.Visible.Equals(true))  //video is not available
            {
                MsgDiv.Visible = false;
                if (isComparison)
                {
                    Label7.Visible = false;
                    Label17.Text = "Session Videos can only be requested in Session Mode";
                    Label17.Visible = true;
                    lblSessionRequested.Visible = false;
                    MsgDiv.Visible = false;
                    Label7.Visible = false;
                    Label9.Visible = false;
                    Label15.Visible = false;

                }
                else
                {
                    lblSessionRequested.Text = "Session Video has been requested.  You will be notified when it is available.";
                    lblSessionRequested.Visible = true;
                    Label17.Visible = false;
                    MsgDiv.Visible = false;
                    Label7.Visible = false;
                    Label9.Visible = false;
                    Label17.Visible = false;
                    Label15.Visible = false;
                }

            }
        }
    }

    public void AthleteChildSendMail()
    {
        customer = DataRepository.CustomerProvider.GetByAspnetMembershipUserId(new Guid(Membership.GetUser().ProviderUserKey.ToString()))[0];
        Guid MemGuid = new Guid(customer.AspnetMembershipUserId.ToString());
        MembershipUser user = Membership.GetUser(MemGuid);
        int sessionType = Convert.ToInt16(DropDownList2.SelectedItem.Value);
        string cust_fullname = customer.FirstName + " " + customer.LastName;
        int movieid = Convert.ToInt32(DropDownList1.SelectedItem.Value);
        leftMovie = DataRepository.MovieProvider.GetByMovieId(movieid);
        lesson = DataRepository.LessonProvider.GetByLessonId(leftMovie.LessonId);
        DateTime date = lesson.LessonDate;
        string Date = date.Month.ToString() + "/" + date.Day.ToString() + "/" + date.Year.ToString();

        string location = sae.SelectLessonlocation(lesson.LessonId.ToString());
        string[] path = rightMovie.FilePath.Split('/');
        string lpath = path[2];
        string selectedSession = DropDownList1.SelectedItem.Text;
        string sessionVideo = CheckTypeofSession(selectedSession);
        string sessionPath = sae.CheckRequestedSessionExists(sessionVideo, lesson.CustomerId, sessionType);
        string summaryCheckLocation = Date + "-" + location;
        string selectedSummaryPath = sae.CheckRequestedSessionExists(summaryCheckLocation, lesson.CustomerId, sessionType);
        if (!DropDownList1.SelectedValue.Equals("nodate"))
        {
            _child_id = DataRepository.CustomerProfileProvider.GetByCustomerId(customer.CustomerId)[0];
            int AthletesChildId = Convert.ToInt16(_child_id.InitialTeacher);

            try
            {
                if (obj1div.Visible.Equals(true) || obj1div2.Visible.Equals(true))  //video is not available
                {
                    if (obj1div.Visible.Equals(true))
                    {
                        moviediv1.Visible = true;
                    }
                    else
                    {
                        moviediv1.Visible = true;
                        isLeftMovie = true;
                    }
                    if (obj1div2.Visible.Equals(true))
                    {
                        moviediv2.Visible = true;
                    }
                    else
                    {
                        moviediv2.Visible = true;
                        isRightMovie = true;
                    }
                    if (AthletesChildId == 1)
                    {
                        if (!isComparison)
                        {
                            if (sessionPath == "")
                            {
                                MsgDiv.Visible = true;
                                Label7.Visible = false;
                                Label17.Visible = false;
                                lblSessionRequested.Visible = false;
                                Label9.Visible = false;
                                Label15.Visible = false;
                            }
                            else
                            {
                                MsgDiv.Visible = false;
                                lblSessionRequested.Text = "Session Video has been requested.  You will be notified when it is available.";
                                lblSessionRequested.Visible = true;
                                Label7.Visible = false;
                                Label9.Visible = false;
                                Label17.Visible = false;
                                Label15.Visible = false;
                            }
                        }
                    }
                    else
                    {
                        if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
                        {
                            // SprintTireText.Visible = true;
                            SprintIntro.Visible = false;
                            SummaryMessage.Visible = false;
                        }
                        else if (DropDownList2.SelectedItem.Text.Equals("Start"))
                        {
                            //  StartTireText.Visible = true;
                            StartIntro.Visible = false;
                            SummaryMessage.Visible = false;
                        }
                        else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
                        {
                            // SprintTireText.Visible = true;
                            HurdleStepsIntro.Visible = false;
                            SummaryMessage.Visible = false;
                        }
                        else if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
                        {
                            HurdleTireText.Visible = true;
                            HurdleIntro.Visible = false;
                            SummaryMessage.Visible = false;
                            SprintId.Visible = false;
                        }
                        MsgDiv.Visible = false;
                    }
                    Label7.Visible = false;
                    Label13.Visible = false;
                }
                else
                {
                    Label17.Visible = false;
                    MsgDiv.Visible = false;
                    Label7.Text = "Session Video is Displayed";
                    Label7.Visible = true;
                    lblSessionRequested.Visible = false;
                    Label15.Visible = false;
                    Label9.Visible = false;
                }
                if (location == "Summary")
                {
                    if (!isComparison)
                    {
                        Label9.Text = "No Session Video available since selected Session is Summary of all Sessions.";
                        Label9.Visible = true;
                        Label7.Visible = false;
                        Label17.Visible = false;
                        Label15.Visible = false;
                        MsgDiv.Visible = false;
                        lblSessionRequested.Visible = false;
                    }
                    else
                    {
                        Label7.Visible = false;
                        Label9.Visible = false;
                        Label17.Text = "Session Videos can only be requested in Session Mode";
                        Label17.Visible = true;
                        lblSessionRequested.Visible = false;
                        Label15.Visible = false;
                        MsgDiv.Visible = false;
                    }

                }
                else
                {
                    Label9.Visible = false;
                    Label13.Visible = false;
                }
            }
            catch
            {
            }
            try
            {
                if (AthletesChildId == 1)
                {
                    DateTime letestSummaryDate = ReturnLatestSummaryDate();
                    string letestDate = letestSummaryDate.Month.ToString() + "/" + letestSummaryDate.Day.ToString() + "/" + letestSummaryDate.Year.ToString();
                    leftMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList1.SelectedValue));
                    rightMovie = DataRepository.MovieProvider.GetByMovieId(int.Parse(DropDownList3.SelectedValue));
                    string Leftlocation = sae.SelectLessonlocation(leftMovie.LessonId.ToString());
                    string Rightlocation = sae.SelectLessonlocation(rightMovie.LessonId.ToString());
                    DateTime selectedLessonDate = leftMovie.DateRecorded;
                    string Ldate = leftMovie.DateRecorded.ToString();
                    string Rdate = rightMovie.DateRecorded.ToString();
                    string selectedLessonDate2 = selectedLessonDate.Month.ToString() + "/" + selectedLessonDate.Day.ToString() + "/" + selectedLessonDate.Year.ToString();

                    if (objdivsum.Visible == true)        //summary movie not available                   
                    {
                        if (AthletesChildId == 1)
                        {
                            if (selectedLessonDate2 == letestDate)
                            {
                                if (!isComparison)
                                {
                                    if (selectedSummaryPath == "")
                                    {
                                        //MsgDiv2.Visible = true;
                                        //MsgDiv2.Style.Add("display", "block");
                                        Label10.Visible = false;
                                        Label16.Visible = false;
                                        Label8.Visible = false;
                                        Label13.Visible = false;
                                        lblSummaryRequested.Visible = false;
                                    }
                                    else
                                    {
                                        MsgDiv2.Visible = false;
                                        lblSummaryRequested.Visible = true;
                                        Label10.Visible = false;
                                        Label16.Visible = false;
                                        Label8.Visible = false;
                                        Label13.Visible = false;
                                    }
                                }
                                else
                                {
                                    DisplaySummaryForComparisonSessions(summaryCheckLocation, Ldate, Rdate, Leftlocation, Rightlocation, selectedLessonDate2, letestDate);
                                }
                            }
                            else
                            {
                                MsgDiv2.Visible = false;
                                MsgDiv2.Style.Add("display", "none");
                                if (selectedLessonDate2 != "1/1/2020")
                                {
                                    if (!isComparison)
                                    {
                                        //Label16.Text = "Summary Video is only available for the Latest Session";
                                        //Label16.Visible = true;
                                        Label8.Visible = false;
                                        Label10.Visible = false;
                                        lblSummaryRequested.Visible = false;
                                        Label13.Visible = false;
                                        MsgDiv2.Visible = false;
                                    }
                                    else
                                    {
                                        DisplaySummaryForComparisonSessions(summaryCheckLocation, Ldate, Rdate, Leftlocation, Rightlocation, selectedLessonDate2, letestDate);
                                        //    Label16.Visible = false;
                                    }
                                }
                            }
                            int summaryCount = CheckSummaryAvailable();
                            if (summaryCount == 0)
                            {
                                HideSummary();
                                if (DropDownList2.SelectedItem.Text.Equals("Start"))
                                {
                                    StartId.Attributes["style"] = string.Format("margin-top:700px");
                                    System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeStartNoSummaryHeight", "MakeStartNoSummaryHeight();", true);
                                }
                                else if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
                                {
                                    SprintId.Attributes["style"] = string.Format("margin-top:700px");
                                    System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeSprintNoSummaryHeight", "MakeSprintNoSummaryHeight();", true);
                                    //StartId.Attributes["style"] = string.Format("margin-top:700px");
                                    //System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeStartHeight", "MakeStartComparisonHeight();", true);
                                }

                                else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
                                {
                                    //HurdleStepId.Attributes["style"] = string.Format("margin-top:700px");
                                    HurdleStepId.Attributes["style"] = string.Format("margin-top:645px");
                                    System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeHurdleStepsNoSummaryHeight", "MakeHurdleStepsNoSummaryHeight();", true);
                                    //StartId.Attributes["style"] = string.Format("margin-top:700px");
                                    //System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeStartHeight", "MakeStartComparisonHeight();", true);
                                }
                                else
                                {
                                    HurdleId.Attributes["style"] = string.Format("margin-top:700px");
                                    System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeHurdleNoSummaryHeight", "MakeHurdleNoSummaryHeight();", true);
                                }
                            }
                        }

                        else
                        {
                            if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
                            {
                                SprintIntro.Visible = false;
                                SummaryMessage.Visible = false;
                            }
                            else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
                            {
                                HurdleStepsIntro.Visible = false;
                                SummaryMessage.Visible = false;
                            }
                            else if (DropDownList2.SelectedItem.Text.Equals("Start"))
                            {
                                StartIntro.Visible = false;
                                SummaryMessage.Visible = false;
                            }
                            else if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
                            {
                                HurdleIntro.Visible = false;
                                SummaryMessage.Visible = false;
                            }
                            MsgDiv2.Visible = false;
                        }
                    }
                    else
                    {
                        if (!isComparison)
                        {
                            MsgDiv2.Visible = false;
                            //Label8.Text = "Summary Video is displayed";
                            //Label8.Visible = true;
                            Label13.Visible = false;
                            Label10.Visible = false;
                            Label16.Visible = false;
                            lblSummaryRequested.Visible = false;
                        }
                        else
                        {
                            DisplaySummaryForComparisonSessions(summaryCheckLocation, Ldate, Rdate, Leftlocation, Rightlocation, selectedLessonDate2, letestDate);
                        }
                    }
                }
                if (AthletesChildId == 1)
                {
                    if (DropDownList1.SelectedItem.Text.Contains("Summary"))
                    {
                        //Label10.Text = "No Summary Video Available for Summary Sessions.";
                        //Label10.Visible = true;
                        Label8.Visible = false;
                        MsgDiv2.Visible = false;
                        Label13.Visible = false;
                        Label16.Visible = false;
                        lblSummaryRequested.Visible = false;
                    }

                }
                else
                {
                    if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
                    {
                        //  SprintTireText.Visible = true;
                        SprintIntro.Visible = false;
                        SummaryMessage.Visible = false;

                    }

                    else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
                    {
                        //  SprintTireText.Visible = true;
                    HurdleStepsIntro.Visible = false;
                        SummaryMessage.Visible = false;

                    }
                    else if (DropDownList2.SelectedItem.Text.Equals("Start"))
                    {
                        //   StartTireText.Visible = true;
                        StartIntro.Visible = false;
                        SummaryMessage.Visible = false;
                    }
                    else if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
                    {
                        //  HurdleTireText.Visible = true;
                        HurdleIntro.Visible = false;
                        SummaryMessage.Visible = false;
                    }
                    MsgDiv2.Visible = false;
                    moviediv1.Visible = true;
                    moviediv2.Visible = true;
                }
            }
            catch (Exception ex)
            {
                ex.Message.ToString();

            }

            if (AthletesChildId == 1)
            {
                //Label10.Visible = true;
                //Label9.Visible = true;
            }
            else
            {
                if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
                {
                    SprintTireText.Visible = true;
                    StartTireText.Visible = false;
                    HurdleTireText.Visible = false;
                    SprintIntro.Visible = false;
                    SummaryMessage.Visible = false;
                    StartId.Visible = false;
                    HurdleId.Visible = false;

                    wmpfile1 = "../Users/MovieFiles/ModelSprint-Initial-Side.mp4";
                    wmpfile2 = "../Users/MovieFiles/ModelSprint-Initial-Back.mp4";
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
                {
                    HurdleStepsTrialText.Visible = true;
                    SprintTireText.Visible = false;
                    StartTireText.Visible = false;
                    HurdleTireText.Visible = false;

                    SprintIntro.Visible = false;
                    HurdleStepsIntro.Visible = false;
                    SummaryMessage.Visible = false;

                    StartId.Visible = false;
                    HurdleId.Visible = false;
                    SprintId.Visible = false;

                    wmpfile1 = "../Users/MovieFiles/ModelSprint-Initial-Side.mp4";
                    wmpfile2 = "../Users/MovieFiles/ModelSprint-Initial-Back.mp4";
                }



                else if (DropDownList2.SelectedItem.Text.Equals("Start"))
                {
                    StartTireText.Visible = true;
                    SprintTireText.Visible = false;
                    HurdleTireText.Visible = false;
                    StartIntro.Visible = false;
                    SummaryMessage.Visible = false;
                    SprintId.Visible = false;
                    HurdleId.Visible = false;
                    wmpfile1 = "../Users/MovieFiles/ModelStart-Initial-Side.mp4";
                    wmpfile2 = "../Users/MovieFiles/ModelStart-Initial-Back.mp4";
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
                {
                    HurdleTireText.Visible = true;
                    StartTireText.Visible = false;
                    SprintTireText.Visible = false;

                    HurdleIntro.Visible = false;
                    SummaryMessage.Visible = false;
                    SprintId.Visible = false;
                    StartId.Visible = false;
                    wmpfile1 = "../Users/MovieFiles/ModelHurdle-Side.mp4";
                    wmpfile2 = "../Users/MovieFiles/ModelHurdle-Back.mp4";
                }
                Label10.Visible = false;
                Label9.Visible = false;
                Label7.Visible = false;
            }
            if (AthletesChildId == 1 && obj1div.Visible.Equals(false))
            {
                wmpfile1 = "../" + leftMovie.FilePath;
            }
            else
            {
                if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
                {
                    wmpfile1 = "../Users/MovieFiles/ModelNoVideoSprint-Initial-Side.mp4";
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
                {
                    wmpfile1 = "../Users/MovieFiles/ModelNoVideoSprint-Initial-Side.mp4";
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Start"))
                {
                    wmpfile1 = "../Users/MovieFiles/ModelNoVideoStart-Initial-Side.mp4";
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
                {
                    wmpfile1 = "../Users/MovieFiles/ModelNoVideoHurdle-Initial-Side.mp4";
                }
                obj1div.Visible = false;
            }
            if (AthletesChildId == 1 && obj1div2.Visible.Equals(false))
            {
                wmpfile2 = "../" + rightMovie.FilePath;
            }
            else
            {
                if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
                {
                    wmpfile2 = "../Users/MovieFiles/ModelNoVideoSprint-Initial-Back.mp4";
                }

                else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
                {
                    wmpfile2 = "../Users/MovieFiles/ModelNoVideoSprint-Initial-Back.mp4";

                }
                else if (DropDownList2.SelectedItem.Text.Equals("Start"))
                {
                    wmpfile2 = "../Users/MovieFiles/ModelNoVideoStart-Initial-Back.mp4";
                }
                else if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
                {
                    wmpfile2 = "../Users/MovieFiles/ModelNoVideoHurdle-Initial-Back.mp4";
                }
                obj1div2.Visible = false;
            }
        }
    }

    protected void LinkButton1_Click(object sender, EventArgs e)
    {
        Teacher teacher = new Teacher();
        Customer customer = new Customer();
        _LoggedInCustomer = DataRepository.CustomerProvider.GetByAspnetMembershipUserId(new Guid(Membership.GetUser().ProviderUserKey.ToString()))[0];
        Guid memGuid = _LoggedInCustomer.AspnetMembershipUserId;
        MembershipUser Loggedinuser = Membership.GetUser(memGuid);
        int sessionType = Convert.ToInt16(DropDownList2.SelectedItem.Value);
        try
        {
            string cust_fullname = teacher.FirstName + " " + teacher.LastName;
            string MovieTypeZero = "Model View-Initial";
            string MovieTypeOne = "Video View-Initial";
            string MovieTypeTwo = "Model View-Final";
            string MovieTypeThree = "Video View-Final";
            string lessontype = DropDownList2.SelectedItem.Text;
            string selectedSession = DropDownList1.SelectedItem.Text;

            int leftmovieid = Convert.ToInt32(DropDownList1.SelectedItem.Value);
            leftMovie = DataRepository.MovieProvider.GetByMovieId(leftmovieid);
            int movietype = leftMovie.MovieType;
            date = leftMovie.DateRecorded.ToString();
            date = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
            string location = sae.SelectLessonlocation(leftMovie.LessonId.ToString());
            TList<Movie> movies1 = DataRepository.MovieProvider.GetByLessonId(leftMovie.LessonId);
            if (movies1.Count == 4)
            {
                string modelViewInitial = date + "-" + location + "-" + "TypeZero";
                sae.InsertIntoRquestedSession(modelViewInitial, _LoggedInCustomer.CustomerId, sessionType);

                string videoViewInitial = date + "-" + location + "-" + "TypeOne";
                sae.InsertIntoRquestedSession(videoViewInitial, _LoggedInCustomer.CustomerId, sessionType);

                string modelViewFinal = date + "-" + location + "-" + "TypeTwo";
                sae.InsertIntoRquestedSession(modelViewFinal, _LoggedInCustomer.CustomerId, sessionType);

                string videoViewFinal = date + "-" + location + "-" + "TypeThree";
                sae.InsertIntoRquestedSession(videoViewFinal, _LoggedInCustomer.CustomerId, sessionType);

                // lpath = date + "-" + location + "-" + MovieTypeZero + "," + videoViewInitial + "," + modelViewFinal + " and " + videoViewFinal;
                lpath = date + "-" + location + "-" + MovieTypeZero + "," +
                      date + "-" + location + "-" + MovieTypeOne + "," +
                      date + "-" + location + "-" + MovieTypeTwo + " and " +
                      date + "-" + location + "-" + MovieTypeThree;
            }
            else
            {
                if (movietype == 0 || movietype == 1)
                {
                    string modelViewInitial_zero = date + "-" + location + "-" + "TypeZero";
                    sae.InsertIntoRquestedSession(modelViewInitial_zero, _LoggedInCustomer.CustomerId, sessionType);

                    string modelViewInitial_one = date + "-" + location + "-" + "TypeOne";
                    sae.InsertIntoRquestedSession(modelViewInitial_one, _LoggedInCustomer.CustomerId, sessionType);

                    //lpath = modelViewInitial_zero + " and " + modelViewInitial_one;
                    lpath = date + "-" + location + "-" + MovieTypeZero + " and " + date + "-" + location + "-" + MovieTypeOne;

                }

                if (movietype == 2 || movietype == 3)
                {
                    string modelViewFinal_two = date + "-" + location + "-" + "TypeTwo";
                    sae.InsertIntoRquestedSession(modelViewFinal_two, _LoggedInCustomer.CustomerId, sessionType);

                    string modelViewFinal_three = date + "-" + location + "-" + "TypeThree";
                    sae.InsertIntoRquestedSession(modelViewFinal_three, _LoggedInCustomer.CustomerId, sessionType);

                    // lpath = modelViewFinal_two + " and " + modelViewFinal_three;
                    lpath = date + "-" + location + "-" + MovieTypeTwo + " and " + date + "-" + location + "-" + MovieTypeThree;
                }
            }
            string srtSubject;
            srtSubject = lpath;
            _strBody = srtSubject;

            string strfrom = Loggedinuser.Email;
            string strto = "dev@compusport.com";
            string _srtSubject = "Session Video Request: " + cust_fullname + " " + lessontype + " " + srtSubject;
            string strBody = "The Session Video has been requested for " + cust_fullname + " " + lessontype + " " + _strBody + ",";
            string strBody1 = "Date : " + date.ToString();
            SendMailMsgWithAttachment(strfrom, strto, _srtSubject, strBody + " " + strBody1);

            MsgDiv.Visible = false;
            lblSessionRequested.Text = "Session Video has been requested.  You will be notified when it is available.";
            lblSessionRequested.Visible = true;

            lesson = DataRepository.LessonProvider.GetByLessonId(leftMovie.LessonId);
            int athleteid = lesson.CustomerId;
            customer = DataRepository.CustomerProvider.GetByCustomerId(athleteid);
            Guid MemGuid = new Guid(customer.AspnetMembershipUserId.ToString());
            MembershipUser user = Membership.GetUser(MemGuid);
            cust_fullname = customer.FirstName + " " + customer.LastName;

            if (!DropDownList1.SelectedValue.Equals("nodate"))
            {
                _child_id = DataRepository.CustomerProfileProvider.GetByCustomerId(lesson.CustomerId)[0];
                int AthletesChildId = Convert.ToInt16(_child_id.InitialTeacher);
                _LoggedInCustomer = DataRepository.CustomerProvider.GetByAspnetMembershipUserId(new Guid(Membership.GetUser().ProviderUserKey.ToString()))[0];
                Guid AthleteMemGuid = new Guid(_LoggedInCustomer.AspnetMembershipUserId.ToString());
                MembershipUser LoggedInUser1 = Membership.GetUser(AthleteMemGuid);

                if (AthletesChildId == 1 || AthletesChildId == 0)
                {
                    string str_from = "info@compusport.com";
                    string str_to = LoggedInUser1.Email;
                    string srt_Subject = cust_fullname + " " + "Session Video Requested";
                    string str_Body = "You have requested the Session video for the Session " + lessontype + " " + _strBody + ".";
                    string str_Body2 = "You will be notified when the video is available.";
                    string str_Body3 = "CompuSport Support Team";
                    SendMailMsgWithAttachment(str_from, str_to, srt_Subject, str_Body + "<br/><br/>" + str_Body2 + "<br/><br/>" + str_Body3);
                    //  sae.InsertIntoRquestedSession(selectedSession, customer.CustomerId);
                }
            }

            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "OtherKey", "MakeSprintHeight();", true);
            // System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "anyOtherKey", "FunctionForAllBtns(2);", true);
            int ddl1_items = DropDownList1.Items.Count;
            int half = ddl1_items / 2;
            for (int cnt = half; cnt < DropDownList1.Items.Count; cnt++)
            {
                DropDownList1.Items[cnt].Attributes.CssStyle.Add("color", "red");
            }

            wmpfile1 = "../" + leftMovie.FilePath;
            wmpfile2 = "../" + rightMovie.FilePath;

        }
        catch (Exception ex)
        {
            ex.Message.ToString();
        }
        if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
        {
            wmpfile1 = "../Users/MovieFiles/ModelNoVideoSprint-Initial-Side.mp4";
            wmpfile2 = "../Users/MovieFiles/ModelNoVideoSprint-Initial-Back.mp4";
            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(2);", true);
            btnEight.Style.Add("display", "none");
            btnNine.Style.Add("display", "none");
            btnTen.Style.Add("display", "none");
            btnSeven.Style.Add("display", "block");
            btnSeven.Attributes["style"] = String.Format("margin-bottom:0px;");
        }
        else if (DropDownList2.SelectedItem.Text.Equals("Start"))
        {
            wmpfile1 = "../Users/MovieFiles/ModelNoVideoStart-Initial-Side.mp4";
            wmpfile2 = "../Users/MovieFiles/ModelNoVideoStart-Initial-Back.mp4";
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(0);", true);
            btnEight.Style.Add("display", "block");
            btnNine.Style.Add("display", "none");
            btnTen.Style.Add("display", "none");
            btnSeven.Style.Add("display", "block");
            btnSeven.Attributes["style"] = String.Format("margin-bottom:0px;");
        }
        else
        {
            wmpfile1 = "../Users/MovieFiles/ModelNoVideoHurdle-Initial-Side.mp4";
            wmpfile2 = "../Users/MovieFiles/ModelNoVideoHurdle-Initial-Back.mp4";
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(1);", true);
            btnSeven.Style.Add("display", "none");
            btnEight.Style.Add("display", "none");
            btnNine.Style.Add("display", "none");
            btnTen.Style.Add("display", "none");
        }

    }
    protected void LinkButton2_Click(object sender, EventArgs e)
    {
        Customer customer = new Customer();
        Teacher teacher = new Teacher();
        string sumpath;
        int sessionType = Convert.ToInt16(DropDownList2.SelectedItem.Value);
        try
        {
            int movieid = Convert.ToInt32(DropDownList1.SelectedItem.Value);
            int rightmovieid = Convert.ToInt32(DropDownList3.SelectedItem.Value);
            rightMovie = DataRepository.MovieProvider.GetByMovieId(rightmovieid);
            leftMovie = DataRepository.MovieProvider.GetByMovieId(movieid);
            lesson = DataRepository.LessonProvider.GetByLessonId(leftMovie.LessonId);
            int summarymovieid = Convert.ToInt32(lesson.LessonId);
            string location = sae.SelectLessonlocation(lesson.LessonId.ToString());
            string date = lesson.LessonDate.ToString();
            date = leftMovie.DateRecorded.Month.ToString() + "/" + leftMovie.DateRecorded.Day.ToString() + "/" + leftMovie.DateRecorded.Year.ToString();
            sumpath = date + "-" + location;
            string lessontype = DropDownList2.SelectedItem.Text;

            int athleteid = lesson.CustomerId;
            customer = DataRepository.CustomerProvider.GetByCustomerId(athleteid);
            Guid MemGuid = new Guid(customer.AspnetMembershipUserId.ToString());
            MembershipUser user = Membership.GetUser(MemGuid);
            string cust_fullname = customer.FirstName + " " + customer.LastName;

            string strfrom = user.Email;
            string strto = "dev@compusport.com";
            string srtSubject = "Summary Video Request: " + cust_fullname + " " + lessontype + " " + sumpath + ":";
            string strBody = "The Summary Video has been requested for" + " " + cust_fullname + " " + lessontype + " " + sumpath;
            string strBody1 = "Date : " + date.ToString();
            SendMailMsgWithAttachment(strfrom, strto, srtSubject, strBody);

            MsgDiv2.Visible = false;
            // lblSummaryRequested.Text = "Summary Video has been requested.  You will be notified when it is available.";
            lblSummaryRequested.Visible = true;

            if (!DropDownList1.SelectedValue.Equals("nodate"))
            {
                _child_id = DataRepository.CustomerProfileProvider.GetByCustomerId(lesson.CustomerId)[0];
                int AthletesChildId = Convert.ToInt16(_child_id.InitialTeacher);
                _LoggedInCustomer = DataRepository.CustomerProvider.GetByAspnetMembershipUserId(new Guid(Membership.GetUser().ProviderUserKey.ToString()))[0];
                Guid AthleteMemGuid = new Guid(_LoggedInCustomer.AspnetMembershipUserId.ToString());
                MembershipUser LoggedInUser2 = Membership.GetUser(AthleteMemGuid);
                string selectedSession = sumpath;
                if (AthletesChildId == 1)
                {
                    string str_from = "info@compusport.com";
                    string str_to = LoggedInUser2.Email;
                    string srt_Subject = cust_fullname + " " + "Summary Video Requested";
                    string str_Body = "You have requested the Summary video for the" + " " + lessontype + " " + sumpath + ":";
                    string str_Body2 = "You will be notified when the video is available";
                    string str_Body3 = "CompuSport Support Team";
                    SendMailMsgWithAttachment(str_from, str_to, srt_Subject, str_Body + "<br /> <br />" + str_Body2 + "<br /> <br />" + str_Body3);
                    sae.InsertIntoRquestedSession(selectedSession, lesson.CustomerId, sessionType);

                }
            }
        }
        catch (Exception ex)
        {
            ex.Message.ToString();
        }
        if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
        {
            wmpfile1 = "../Users/MovieFiles/ModelNoVideoSprint-Initial-Side.mp4";
            wmpfile2 = "../Users/MovieFiles/ModelNoVideoSprint-Initial-Back.mp4";

            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(2);", true);
            btnEight.Style.Add("display", "none");
            btnNine.Style.Add("display", "none");
            btnTen.Style.Add("display", "none");
            btnSeven.Style.Add("display", "block");
            btnSeven.Attributes["style"] = String.Format("margin-bottom:0px;");
        }
        else if (DropDownList2.SelectedItem.Text.Equals("Start"))
        {
            wmpfile1 = "../Users/MovieFiles/ModelNoVideoStart-Initial-Side.mp4";
            wmpfile2 = "../Users/MovieFiles/ModelNoVideoStart-Initial-Back.mp4";

            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(0);", true);
            btnEight.Style.Add("display", "block");
            btnNine.Style.Add("display", "none");
            btnTen.Style.Add("display", "none");
            btnSeven.Style.Add("display", "block");
            btnSeven.Attributes["style"] = String.Format("margin-bottom:0px;");
        }
        else
        {

            wmpfile1 = "../Users/MovieFiles/ModelNoVideoHurdle-Initial-Side.mp4";
            wmpfile2 = "../Users/MovieFiles/ModelNoVideoHurdle-Initial-Back.mp4";
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "checkIfVideoLoaded", "tempCount = 0; document.getElementById('divLoading').style.display = 'block'; document.getElementById('divLoadingMask').style.display = 'block'; Delay(1);", true);
            btnSeven.Style.Add("display", "none");
            btnEight.Style.Add("display", "none");
            btnNine.Style.Add("display", "none");
            btnTen.Style.Add("display", "none");
        }

        int ddl1_items = DropDownList1.Items.Count;
        int half = ddl1_items / 2;
        for (int cnt = half; cnt < DropDownList1.Items.Count; cnt++)
        {
            DropDownList1.Items[cnt].Attributes.CssStyle.Add("color", "red");
        }
        wmpfile1 = "../" + leftMovie.FilePath;
        wmpfile2 = "../" + rightMovie.FilePath;
    }



    public string SendMailMsgWithAttachment(string FromID, string ToID, string Subject, string Body)
    {
        try
        {
            System.Net.Mail.MailMessage oMsg = new System.Net.Mail.MailMessage();
            oMsg.From = new System.Net.Mail.MailAddress(FromID);
            // oMsg.To.Add(new MailAddress(ConfigurationManager.AppSettings["constSMTPTO"]));
            //oMsg.Bcc.Add(new System.Net.Mail.MailAddress(ConfigurationManager.AppSettings["constSMTPBCC"]));
            if (ToID.Length > 0)
            {
                oMsg.To.Add(new System.Net.Mail.MailAddress(ToID));
            }
            oMsg.Subject = Subject;
            oMsg.Body = Body;
            oMsg.IsBodyHtml = true;


            //if (File.Exists(filePath))
            //{
            //    /* Create the email attachment with the uploaded file */
            //    System.Net.Mail.Attachment attach = new Attachment(filePath);
            //    /* Attach the newly created email attachment */
            //    oMsg.Attachments.Add(attach);
            //}

            System.Net.Mail.SmtpClient smtp = new System.Net.Mail.SmtpClient("mail.compusport.com");
            //    smtp.Host = ConfigurationManager.AppSettings["constSMTPAddress"].ToString();
            //"localhost"; //"smtpout.secureserver.net";
            //    smtp.Port = Convert.ToInt32(ConfigurationManager.AppSettings["constSMTPPort"]);
            smtp.UseDefaultCredentials = false;
            smtp.Credentials = new System.Net.NetworkCredential(ConfigurationManager.AppSettings["constSMTPUserName"], ConfigurationManager.AppSettings["constSMTPPassword"]);
            smtp.EnableSsl = false;
            //oMsg.DeliveryNotificationOptions = DeliveryNotificationOptions.OnFailure;
            smtp.Send(oMsg);

        }

        catch (Exception ex)
        {
            return ex.Message;
        }
        return "E-mail sent successfully.";
    }


    //protected void UpdateTimer_Tick(object sender, EventArgs e)
    //{
    //    Time.Text = DateTime.Now.ToString();
    //}

    public void HideSummary()
    {
        // contplay.Style.Add("display", "none");
        fillerleft.Style.Add("display", "none");
        fillercenter.Style.Add("display", "none");
        fillerright.Style.Add("display", "none");
        teachersummaryleft.Style.Add("display", "none");
        teachersummarycenter.Style.Add("display", "none");
        teachersummaryright.Style.Add("display", "none");
        SumDivCenterPanel.Style.Add("display", "none");
        SumDivLeftPanel.Style.Add("display", "none");
       // SummaryVideo.Style.Add("display", "none");
        SummaryButtons.Style.Add("display", "none");
        SummaryDropDown.Style.Add("display", "none");
        SumDivRightPanel.Style.Add("display", "none");
        bottomleft.Style.Add("display", "none");
        contplay.Attributes["style"] = String.Format("font-family:Arial,Helvetica sans-serif;font-size:12px;color:#000000;text-decoration:none;position:absolute;height:660px;width:930px;");

        bottomleft.Attributes["style"] = String.Format("font-family:Arial,Helvetica,sans-serif;font-size:12px;text-decoration:none;position:absolute;height:31px;width:23px;left:0px;top:629px;");
        bottomcenter.Attributes["style"] = String.Format("font-family:Arial,Helvetica,sans-serif;font-size:12px;text-decoration:none;position:absolute;height:31px;width:879px;left:24px;top:629px;");
        bottomright.Attributes["style"] = String.Format("font-family:Arial,Helvetica,sans-serif;font-size:12px;text-decoration:none;position:absolute;height:31px;width:23px;left:897px;top:629px;");
        displaysummary = false;
        //Label14.Text = "Comparison Mode";
        Label14.Visible = true;
        Label2.Visible = false;
        System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "domready", "document.getElementById('square').innerHTML = 'No Errors Displayed In Session Comparisons.';", true);
        System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "comparison3", "isComparison = true;", true);
   }

    //check later
    private void TireOneAttributes(int lessonid)
    {
        if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
        {
            GetAllSprintAthleteData(leftMovie.LessonId);
            SprintId.Visible = true;
            StartId.Visible = false;
            HurdleId.Visible = false;

            SprintInitial.InnerText = "Initial";
            SprintFinal.InnerText = "Final";
            SprintInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            SprintFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");

            SprintText.Visible = true;
            StartText.Visible = false;
            HurdleText.Visible = false;

            SprintTireVariableText.Visible = false;
            StartTireVariablesChart.Visible = false;
            HurdleTireVarableChart.Visible = false;

            SprintIntro.Visible = true;
            StartIntro.Visible = false;
            HurdleIntro.Visible = false;

            Label6.Text = "Maximum Sprint Velocity";
            SprintId.Attributes["style"] = string.Format("margin-top:650px");
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "OtherKey3", "MakeSprintHeight();", true);
        }
        else if (DropDownList2.SelectedItem.Text.Equals("Start"))
        {
            GetAllStartAthleteData(leftMovie.LessonId);
            StartId.Visible = true;
            SprintId.Visible = false;
            HurdleId.Visible = false;
            HurdleStepId.Visible = false;

            StartText.Visible = true;
            SprintText.Visible = false;
            HurdleText.Visible = false;
            HurdleStepText.Visible = false;

            StartTireVariablesChart.Visible = false;
            SprintTireVariableText.Visible = false;
            HurdleTireVarableChart.Visible = false;
            HurdleStepTireVariablesText.Visible = false;


            StartInitial.InnerText = "Initial";
            StartFinal.InnerText = "Final";
            StartInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            StartFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");

            SprintIntro.Visible = false;
            StartIntro.Visible = true;
            HurdleIntro.Visible = false;
            HurdleStepsIntro.Visible = false;


            StartId.Attributes["style"] = string.Format("margin-top:650px");
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeStartHeight", "MakeStartHeight();", true);
            Label6.Text = "The Start";
        }
        else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
        {
            GetAllHurdleStepsAthleteData(leftMovie.LessonId);

            SprintId.Visible = false;
            StartId.Visible = false;
            HurdleId.Visible = false;
            HurdleStepId.Visible = true;

            StartTireVariablesChart.Visible = false;
            SprintTireVariableText.Visible = false;
            HurdleTireVarableChart.Visible = false;
            HurdleStepTireVariablesText.Visible = false;

            HurdleStepText.Visible = true;
            HurdleText.Visible = false;
            StartText.Visible = false;
            SprintText.Visible = false;


            HurdleStepInitial.InnerText = "Initial";
            HurdleStepFinal.InnerText = "Final";
            HurdleStepInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            HurdleStepFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");

            SprintIntro.Visible = false;
            StartIntro.Visible = false;
            HurdleIntro.Visible = false;
            HurdleStepsIntro.Visible = true;

            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeHurdleStepsHeight", "MakeHurdleStepsHeight();", true);
            Label6.Text = "Maximum Hurdle Steps Velocity";
            HurdleStepId.Attributes["style"] = string.Format("margin-top:650px");
         
        }



        else
        {
            GetAllHurdleAthleteData(leftMovie.LessonId);

            SprintId.Visible = false;
            StartId.Visible = false;
            HurdleId.Visible = true;
            HurdleStepId.Visible = false;

            StartTireVariablesChart.Visible = false;
            SprintTireVariableText.Visible = false;
            HurdleTireVarableChart.Visible = false;
            HurdleStepTireVariablesText.Visible = false;

            HurdleText.Visible = true;
            StartText.Visible = false;
            SprintText.Visible = false;
            HurdleStepText.Visible = false;

            HurdleInitial.InnerText = "Initial";
            HurdleFinal.InnerText = "Final";
            HurdleInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            HurdleFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");

            SprintIntro.Visible = false;
            StartIntro.Visible = false;
            HurdleIntro.Visible = true;
            HurdleStepsIntro.Visible = false;

            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeHurdleHeight", "MakeHurdleHeight();", true);
            Label6.Text = "Maximum Hurdle Velocity";
            HurdleId.Attributes["style"] = string.Format("margin-top:1200px");
        }
    }

    //check later
    private void ComparisonAttributes(int Left_lessonid, int right_lessonid, string leftmoviepath, string rightmoviepath)
    {
        if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
        {
            SprintId.Visible = true;
            StartId.Visible = false;
            HurdleId.Visible = false;
            HurdleStepId.Visible = false;

            if (leftmoviepath.Contains("Current"))
            {
                SprintInitial.InnerText = "Final";
                SprintInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (leftmoviepath.Contains("Initial"))
            {
                SprintInitial.InnerText = "Initial";
                SprintInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Initial"))
            {
                SprintFinal.InnerText = "Initial";
                SprintFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Current"))
            {
                SprintFinal.InnerText = "Final";
                SprintFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            SprintTireVariableText.Visible = true;
            StartTireVariablesChart.Visible = false;
            HurdleTireVarableChart.Visible = false;
            HurdleStepTireVariablesText.Visible = false;

            HurdleText.Visible = false;
            StartText.Visible = false;
            SprintText.Visible = false;
            HurdleStepText.Visible = false;

            SprintIntro.Visible = true;
            StartIntro.Visible = false;
            HurdleIntro.Visible = false;
            HurdleStepsIntro.Visible = false;

            Label6.Text = "Maximum Sprint Velocity";

            //GetSprintLeftMovieVariablesforNonTires(Left_lessonid, leftmoviepath);
            //GetSprintRightMovieVariablesforNonTires(right_lessonid, rightmoviepath);

            SprintId.Attributes["style"] = string.Format("margin-top:700px");
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "OtherKey3", "MakeSprintComparisonHeight();", true);

        }

         else if(DropDownList2.SelectedItem.Text.Equals("Start"))
         {
            SprintId.Visible = false;
            StartId.Visible = true;
            HurdleId.Visible = false;
            HurdleStepId.Visible = false;

            if (leftmoviepath.Contains("Current"))
            {
                StartInitial.InnerText = "Final";
                StartInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (leftmoviepath.Contains("Initial"))
            {
                StartInitial.InnerText = "Initial";
                StartInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Initial"))
            {
                StartFinal.InnerText = "Initial";
                StartFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Current"))
            {
                StartFinal.InnerText = "Final";
                StartFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            //GetStartLeftMovieVariablesforNonTires(Left_lessonid, leftmoviepath);
            //GetStartRightMovieVariablesforNonTires(right_lessonid, rightmoviepath);

            HurdleText.Visible = false;
            StartText.Visible = false;
            SprintText.Visible = false;
            HurdleStepText.Visible = false;

            StartTireVariablesChart.Visible = true;
            SprintTireVariableText.Visible = false;
            HurdleTireVarableChart.Visible = false;
            HurdleStepTireVariablesText.Visible = false;

            SprintIntro.Visible = false;
            StartIntro.Visible = true;
            HurdleIntro.Visible = false;
            HurdleStepsIntro.Visible = false;

            Label6.Text = "The Start";

            StartId.Attributes["style"] = string.Format("margin-top:700px");
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeStartHeight", "MakeStartComparisonHeight();", true);
        }


        else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
        {


            HurdleStepId.Visible = true;
            SprintId.Visible = false;
            StartId.Visible = false;
            HurdleId.Visible = false;

            if (leftmoviepath.Contains("Current"))
            {
                HurdleStepInitial.InnerText = "Final";
                HurdleStepInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (leftmoviepath.Contains("Initial"))
            {
                HurdleStepInitial.InnerText = "Initial";
                HurdleStepInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Initial"))
            {
                HurdleStepFinal.InnerText = "Initial";
                HurdleStepFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Current"))
            {
                HurdleStepFinal.InnerText = "Final";
                HurdleFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }

            HurdleStepTireVariablesText.Visible = true;
            StartTireVariablesChart.Visible = false;
            SprintTireVariableText.Visible = false;
            HurdleTireVarableChart.Visible = false;

            //GetHurdleLeftMovieVariablesforNonTires(Left_lessonid, leftmoviepath);
            //GetHurdleRightMovieVariablesforNonTires(right_lessonid, rightmoviepath);

            Label6.Text = "Maximum Hurdle Step Velocity";

            HurdleStepText.Visible = false;
            HurdleText.Visible = false;
            StartText.Visible = false;
            SprintText.Visible = false;


            SprintIntro.Visible = false;
            StartIntro.Visible = false;
            HurdleIntro.Visible = false;
            HurdleStepsIntro.Visible = true;

            //HurdleStepId.Attributes["style"] = string.Format("margin-top:700px");
            HurdleStepId.Attributes["style"] = string.Format("margin-top:645px");
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeHurdleStepHeight", "MakeHurdleStepComparisonHeight();", true);
            // Here We have to add these two function MakeHurdleStepHeight,  and  MakeHurdleStepComparisonHeight in aspx page
        
        
        }

        else
        {
            HurdleId.Visible = true;
            SprintId.Visible = false;
            StartId.Visible = false;
            HurdleStepId.Visible = false;

            if (leftmoviepath.Contains("Current"))
            {
                HurdleInitial.InnerText = "Final";
                HurdleInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (leftmoviepath.Contains("Initial"))
            {
                HurdleInitial.InnerText = "Initial";
                HurdleInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Initial"))
            {
                HurdleFinal.InnerText = "Initial";
                HurdleFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Current"))
            {
                HurdleFinal.InnerText = "Final";
                HurdleFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }

            HurdleTireVarableChart.Visible = true;
            StartTireVariablesChart.Visible = false;
            SprintTireVariableText.Visible = false;
            HurdleStepTireVariablesText.Visible = false;

            //GetHurdleLeftMovieVariablesforNonTires(Left_lessonid, leftmoviepath);
            //GetHurdleRightMovieVariablesforNonTires(right_lessonid, rightmoviepath);

            Label6.Text = "Maximum Hurdle Velocity";

            HurdleText.Visible = false;
            StartText.Visible = false;
            SprintText.Visible = false;
            HurdleStepText.Visible = false;

            SprintIntro.Visible = false;
            StartIntro.Visible = false;
            HurdleIntro.Visible = true;
            HurdleStepsIntro.Visible = false;

            HurdleId.Attributes["style"] = string.Format("margin-top:700px");
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeHurdleHeight", "MakeHurdleComparisonHeight();", true);
        }





    }


    private void ChangeVariableChartTitles(string leftmoviepath, string rightmoviepath)
    {

        if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
        {


            if (leftmoviepath.Contains("Current"))
            {
                SprintInitial.InnerText = "Final";
                SprintInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (leftmoviepath.Contains("Initial"))
            {
                SprintInitial.InnerText = "Initial";
                SprintInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Initial"))
            {
                SprintFinal.InnerText = "Initial";
                SprintFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Current"))
            {
                SprintFinal.InnerText = "Final";
                SprintFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }

        }
        else if (DropDownList2.SelectedItem.Text.Equals("Start"))
        {


            if (leftmoviepath.Contains("Current"))
            {
                StartInitial.InnerText = "Final";
                StartInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (leftmoviepath.Contains("Initial"))
            {
                StartInitial.InnerText = "Initial";
                StartInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Initial"))
            {
                StartFinal.InnerText = "Initial";
                StartFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Current"))
            {
                StartFinal.InnerText = "Final";
                StartFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }

        }
        else if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
        {

            if (leftmoviepath.Contains("Current"))
            {
                HurdleInitial.InnerText = "Final";
                HurdleInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (leftmoviepath.Contains("Initial"))
            {
                HurdleInitial.InnerText = "Initial";
                HurdleInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Initial"))
            {
                HurdleFinal.InnerText = "Initial";
                HurdleFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Current"))
            {
                HurdleFinal.InnerText = "Final";
                HurdleFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }



        }
        else
        {


            if (leftmoviepath.Contains("Current"))
            {
                HurdleStepInitial.InnerText = "Final";
                HurdleStepInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (leftmoviepath.Contains("Initial"))
            {
                HurdleStepInitial.InnerText = "Initial";
                HurdleStepInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Initial"))
            {
                HurdleStepFinal.InnerText = "Initial";
                HurdleStepFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }
            if (rightmoviepath.Contains("Current"))
            {
                HurdleStepFinal.InnerText = "Final";
                HurdleFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            }



        }

    }
    
    
    
    
    
    
    //check later
    private void NonTireAttributes(int lesssonid)
    {
        if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
        {
            SprintTireText.Visible = true;
            StartTireText.Visible = false;
            HurdleTireText.Visible = false;
            HurdleStepsTrialText.Visible = false;

            SprintIntro.Visible = false;
            StartIntro.Visible = false;
            HurdleIntro.Visible = false;
            HurdleStepsIntro.Visible = false;

            SprintInitial.InnerText = "Initial";
            SprintFinal.InnerText = "Final";
            SprintInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            SprintFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");

            StartTireVariablesChart.Visible = false;
            SprintTireVariableText.Visible = false;
            HurdleTireVarableChart.Visible = false;
            HurdleStepTireVariablesText.Visible = false;


            StartId.Visible = false;
            SprintId.Visible = true;
            HurdleId.Visible = false;
            HurdleStepId.Visible = false;

            SprintText.Visible = true;
            StartText.Visible = false;
            HurdleText.Visible = false;
            HurdleStepText.Visible = false;

            GetAllSprintAthleteData(lesssonid);

            Label6.Text = "Maximum Sprint Velocity";
            SummaryMessage.Visible = false;
            SprintId.Attributes["style"] = string.Format("margin-top:650px");
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeSprintNonTiresHeight", "MakeSprintNonTiresHeight();", true);
        }

        else if (DropDownList2.SelectedItem.Text.Equals("Hurdle Steps"))
        {
            HurdleStepsTrialText.Visible = true;
            SprintTireText.Visible = false;
            StartTireText.Visible = false;
            HurdleTireText.Visible = false;

            SprintIntro.Visible = false;
            StartIntro.Visible = false;
            HurdleIntro.Visible = false;
            HurdleStepsIntro.Visible = false;

            SprintInitial.InnerText = "Initial";
            SprintFinal.InnerText = "Final";
            SprintInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            SprintFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");

            HurdleStepInitial.InnerText = "Initial";
            HurdleStepFinal.InnerText = "Final";
            HurdleStepInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            HurdleStepFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");

            StartTireVariablesChart.Visible = false;
            SprintTireVariableText.Visible = false;
            HurdleTireVarableChart.Visible = false;
            HurdleStepTireVariablesText.Visible = false;


            StartId.Visible = false;
            SprintId.Visible = false;
            HurdleId.Visible = false;
            HurdleStepId.Visible = true;



            SprintText.Visible = false;
            StartText.Visible = false;
            HurdleText.Visible = false;
            HurdleStepText.Visible = true;


            GetAllHurdleStepsAthleteData(lesssonid);

            Label6.Text = "Maximum Hurdle Steps Velocity";
            SummaryMessage.Visible = false;
            HurdleStepId.Attributes["style"] = string.Format("margin-top:650px");
            switch (HttpContext.Current.Request.Browser.Browser)
            {
                case "Gecko":
                    System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeHurdleStepsNonTiresHeight", "MakeHurdleStepsNonTiresHeight();", true);

                    break;

                case "IE":
                    System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeHurdleStepsNonTiresHeight", "MakeHurdleStepsNonTiresHeight();", true);

                    break;

                case "AppleMAC-Safari":

                    break;
            }
        }

        else if (DropDownList2.SelectedItem.Text.Equals("Start"))
        {
            StartTireText.Visible = true;
            SprintTireText.Visible = false;
            HurdleTireText.Visible = false;
            HurdleStepsTrialText.Visible = false;

            SprintIntro.Visible = false;
            StartIntro.Visible = false;
            HurdleIntro.Visible = false;
            HurdleStepsIntro.Visible = false;

            StartInitial.InnerText = "Initial";
            StartFinal.InnerText = "Final";
            StartInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            StartFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");

            StartTireVariablesChart.Visible = false;
            SprintTireVariableText.Visible = false;
            HurdleTireVarableChart.Visible = false;
            HurdleStepTireVariablesText.Visible = false;

            StartId.Visible = true;
            SprintId.Visible = false;
            HurdleId.Visible = false;
            HurdleStepId.Visible = false;

            SprintText.Visible = false;
            StartText.Visible = true;
            HurdleText.Visible = false;
            HurdleStepText.Visible = false;

            GetAllStartAthleteData(lesssonid);

            SummaryMessage.Visible = false;
            Label6.Text = "The Start";
            StartId.Attributes["style"] = string.Format("margin-top:720px");
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeStartNonTiresHeight", "MakeStartNonTiresHeight();", true);
        }
        else //if (DropDownList2.SelectedItem.Text.Equals("Hurdle"))
        {
            HurdleTireText.Visible = true;
            StartTireText.Visible = false;
            SprintTireText.Visible = false;
            HurdleStepsTrialText.Visible = false;

            SprintIntro.Visible = false;
            StartIntro.Visible = false;
            HurdleIntro.Visible = false;
            HurdleStepsIntro.Visible = false;

            HurdleInitial.InnerText = "Initial";
            HurdleFinal.InnerText = "Final";
            HurdleInitial.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");
            HurdleFinal.Attributes.Add("style", "font-weight: bold;background-color:#006699;color:#FFFFFF");

            StartTireVariablesChart.Visible = false;
            SprintTireVariableText.Visible = false;
            HurdleTireVarableChart.Visible = false;
            HurdleStepTireVariablesText.Visible = false;

            StartId.Visible = false;
            SprintId.Visible = false;
            HurdleId.Visible = true;
            HurdleStepId.Visible = false;

            SprintText.Visible = false;
            StartText.Visible = false;
            HurdleText.Visible = true;
            HurdleStepText.Visible = false;

            GetAllHurdleAthleteData(lesssonid);

            SummaryMessage.Visible = false;
            Label6.Text = "Maximum Hurdle Velocity";
            HurdleId.Attributes["style"] = string.Format("margin-top:700px");
            System.Web.UI.ScriptManager.RegisterStartupScript(this.Page, this.Page.GetType(), "MakeHurdleNonTiresHeight", "MakeHurdleNonTiresHeight();", true);
        }
    }
    protected void btnreset_Click(object sender, EventArgs e)
    {
        DropDownList1_SelectedIndexChanged(null, null);
    }
    private DateTime ReturnLatestSummaryDate()
    {
        DateTime latestSummaryDate = DateTime.MaxValue;
        TList<Lesson> lessons = new TList<Lesson>();
        lessons = DataRepository.LessonProvider.GetByCustomerId(customer.CustomerId);
        lessons.Sort("LessonDate DESC");
        Movie sm;
        string date;
        TList<Movie> movies = new TList<Movie>();
        if (DropDownList2.SelectedItem.Text == "Start")
        {
            foreach (Lesson l in lessons)
            {
                if (l.LessonTypeId == 1)
                {
                    try
                    {
                        sm = DataRepository.MovieProvider.GetByLessonId(l.LessonId)[0];
                        date = Convert.ToString(sm.DateRecorded.Month.ToString() + "/" + sm.DateRecorded.Day.ToString() + "/" + sm.DateRecorded.Year.ToString());
                        if (!date.Equals("1/1/2020"))
                        {
                            movies.Add(sm);
                            latestSummaryDate = sm.DateRecorded;
                            break;
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
        }
        if (DropDownList2.SelectedItem.Text == "Sprint")
        {
            foreach (Lesson l in lessons)
            {
                if (l.LessonTypeId == 2)
                {
                    try
                    {
                        sm = DataRepository.MovieProvider.GetByLessonId(l.LessonId)[0];
                        date = Convert.ToString(sm.DateRecorded.Month.ToString() + "/" + sm.DateRecorded.Day.ToString() + "/" + sm.DateRecorded.Year.ToString());
                        if (!date.Equals("1/1/2020"))
                        {
                            movies.Add(sm);
                            latestSummaryDate = sm.DateRecorded;
                            break;
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
        }

        if (DropDownList2.SelectedItem.Text == "Hurdle Steps")
        {
            foreach (Lesson l in lessons)
            {
                if (l.LessonTypeId == 6)
                {
                    try
                    {
                        sm = DataRepository.MovieProvider.GetByLessonId(l.LessonId)[0];
                        date = Convert.ToString(sm.DateRecorded.Month.ToString() + "/" + sm.DateRecorded.Day.ToString() + "/" + sm.DateRecorded.Year.ToString());
                        if (!date.Equals("1/1/2020"))
                        {
                            movies.Add(sm);
                            latestSummaryDate = sm.DateRecorded;
                            break;
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
        }
        if (DropDownList2.SelectedItem.Text == "Hurdle")
        {
            foreach (Lesson l in lessons)
            {
                if (l.LessonTypeId == 3)
                {
                    try
                    {
                        sm = DataRepository.MovieProvider.GetByLessonId(l.LessonId)[0];
                        date = Convert.ToString(sm.DateRecorded.Month.ToString() + "/" + sm.DateRecorded.Day.ToString() + "/" + sm.DateRecorded.Year.ToString());
                        if (!date.Equals("1/1/2020"))
                        {
                            movies.Add(sm);
                            latestSummaryDate = sm.DateRecorded;
                            break;
                        }
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
        }
        return latestSummaryDate;
    }


    private void MakeSprintInitialVariableChartValuesHidden()
    {
        lblGroundTimeLeftI.Text = "";
        lblGroundTimeRightI.Text = "";
        lblGroundTimeAverageI.Text = "";
        lblAirTimeLeftToRightI.Text = "";
        lblAirTimeRightToLeftI.Text = "";
        lblAirTimeAverageI.Text = "";
        lblTimeToUpperLegFullFlexionLeftI.Text = "";
        lblTimeToUpperLegFullFlexionRightI.Text = "";
        lblTimeToUpperLegFullFlexionAverageI.Text = "";
        lblStrideRateI.Text = "";
        lblStrideLengthLeftToRightI.Text = "";
        lblStrideLengthRightToLeftI.Text = "";
        lblStrideLengthAverageI.Text = "";
        lblVelocity.Text = "";
        lblTouchDownDistanceLeftI.Text = "";
        lblTouchDownDistanceRightI.Text = "";
        lblTouchDownDistanceAverageI.Text = "";
        lblUpperLegFullExtentionAngleLeftI.Text = "";
        lblUpperLegFullExtentionAngleRightI.Text = "";
        lblUpperLegFullExtentionAngleAverageI.Text = "";
        lblLowerLegAngleAtTakeOfLeftI.Text = "";
        lblLowerLegAngleAtTakeOfRightI.Text = "";
        lblLowerLegAngleAtTakeOfAverageI.Text = "";
        lblLowerLegFullFlexionAngleLeftI.Text = "";
        lblLowerLegFullFlexionAngleRightI.Text = "";
        lblLowerLegFullFlexionAngleAverageI.Text = "";
        lblLowerLegAngleAtAnkleCrossLeftI.Text = "";
        lblLowerLegAngleAtAnkleCrossRightI.Text = "";
        lblLowerLegAngleAtAnkleCrossAverageI.Text = "";
        lblUpperLegFullFlexionAngleLeftI.Text = "";
        lblUpperLegFullFlexionAngleRightI.Text = "";
        lblUpperLegFullFlexionAngleAverageI.Text = "";
        lblGroundTimeLeftM1.Text = "";
        lblGroundTimeRightM1.Text = "";
        lblGroundTimeAverageM1.Text = "";
        lblAirTimeLeftToRightM1.Text = "";
        lblAirTimeRightToLeftM1.Text = "";
        lblAirTimeAverageM1.Text = "";
        lblTimeToUpperLegFullFlexionLeftM1.Text = "";
        lblTimeToUpperLegFullFlexionRightM1.Text = "";
        lblTimeToUpperLegFullFlexionAverageM1.Text = "";
        lblStrideRateM1.Text = "";
        lblStrideLengthLeftToRighM1.Text = "";
        lblStrideLengthRightToLeftM1.Text = "";
        lblStrideLengthAverageM1.Text = "";
        lblVelocityM1.Text = "";
        lblTouchDownDistanceLeftM1.Text = "";
        lblTouchDownDistanceRightM1.Text = "";
        lblTouchDownDistanceAverageM1.Text = "";
        lblUpperLegFullExtentionAngleLeftM1.Text = "";
        lblUpperLegFullExtentionAngleRightM1.Text = "";
        lblUpperLegFullExtentionAngleAverageM1.Text = "";
        lblLowerLegAngleAtTakeOfLeftM1.Text = "";
        lblLowerLegAngleAtTakeOfRightM1.Text = "";
        lblLowerLegAngleAtTakeOfAverageM1.Text = "";
        lblLowerLegFullFlexionAngleLeftM1.Text = "";
        lblLowerLegFullFlexionAngleRightM1.Text = "";
        lblLowerLegFullFlexionAngleAverageM1.Text = "";
        lblLowerLegAngleAtAnkleCrossLeftM1.Text = "";
        lblLowerLegAngleAtAnkleCrossRightM1.Text = "";
        lblLowerLegAngleAtAnkleCrossAverageM1.Text = "";
        lblUpperLegFullFlexionAngleLeftM1.Text = "";
        lblUpperLegFullFlexionAngleRightM1.Text = "";
        lblUpperLegFullFlexionAngleAverageM1.Text = "";
    }
    private void MakeSprintFinalVariableChartValuesHidden()
    {
        lblGroundTimeLeftF.Text = "";
        lblGroundTimeRightF.Text = "";
        lblGroundTimeAverageF.Text = "";
        lblAirTimeLeftToRightF.Text = "";
        lblAirTimeRightToLeftF.Text = "";
        lblAirTimeAverageF.Text = "";
        lblTimeToUpperLegFullFlexionLeftF.Text = "";
        lblTimeToUpperLegFullFlexionRightF.Text = "";
        lblTimeToUpperLegFullFlexionAverageF.Text = "";
        lblStrideRateF.Text = "";
        lblStrideLengthLeftToRighF.Text = "";
        lblStrideLengthRightToLeftF.Text = "";
        lblStrideLengthAverageF.Text = "";
        lblVelocityF.Text = "";
        lblTouchDownDistanceLeftF.Text = "";
        lblTouchDownDistanceRightF.Text = "";
        lblTouchDownDistanceAverageF.Text = "";
        lblUpperLegFullExtentionAngleLeftF.Text = "";
        lblUpperLegFullExtentionAngleRightF.Text = "";
        lblUpperLegFullExtentionAngleAverageF.Text = "";
        lblLowerLegAngleAtTakeOfLeftF.Text = "";
        lblLowerLegAngleAtTakeOfRightF.Text = "";
        lblLowerLegAngleAtTakeOfAverageF.Text = "";
        lblLowerLegFullFlexionAngleLeftF.Text = "";
        lblLowerLegFullFlexionAngleRightF.Text = "";
        lblLowerLegFullFlexionAngleAverageF.Text = "";
        lblLowerLegAngleAtAnkleCrossLeftF.Text = "";
        lblLowerLegAngleAtAnkleCrossRightF.Text = "";
        lblLowerLegAngleAtAnkleCrossAverageF.Text = "";
        lblUpperLegFullFlexionAngleLeftF.Text = "";
        lblUpperLegFullFlexionAngleRightF.Text = "";
        lblUpperLegFullFlexionAngleAverageF.Text = "";
        lblGroundTimeLeftM2.Text = "";
        lblGroundTimeRightM2.Text = "";
        lblGroundTimeAverageM2.Text = "";
        lblAirTimeLeftToRightM2.Text = "";
        lblAirTimeRightToLeftM2.Text = "";
        lblAirTimeAverageM2.Text = "";
        lblTimeToUpperLegFullFlexionLeftM2.Text = "";
        lblTimeToUpperLegFullFlexionRightM2.Text = "";
        lblTimeToUpperLegFullFlexionAverageM2.Text = "";
        lblStrideRateM2.Text = "";
        lblStrideLengthLeftToRighM2.Text = "";
        lblStrideLengthRightToLeftM2.Text = "";
        lblStrideLengthAverageM2.Text = "";
        lblVelocityM2.Text = "";
        lblTouchDownDistanceLeftM2.Text = "";
        lblTouchDownDistanceRightM2.Text = "";
        lblTouchDownDistanceAverageM2.Text = "";
        lblUpperLegFullExtentionAngleLeftM2.Text = "";
        lblUpperLegFullExtentionAngleRightM2.Text = "";
        lblUpperLegFullExtentionAngleAverageM2.Text = "";
        lblLowerLegAngleAtTakeOfLeftM2.Text = "";
        lblLowerLegAngleAtTakeOfRightM2.Text = "";
        lblLowerLegAngleAtTakeOfAverageM2.Text = "";
        lblLowerLegFullFlexionAngleLeftM2.Text = "";
        lblLowerLegFullFlexionAngleRightM2.Text = "";
        lblLowerLegFullFlexionAngleAverageM2.Text = "";
        lblLowerLegAngleAtAnkleCrossLeftM2.Text = "";
        lblLowerLegAngleAtAnkleCrossRightM2.Text = "";
        lblLowerLegAngleAtAnkleCrossAverageM2.Text = "";
        lblUpperLegFullFlexionAngleLeftM2.Text = "";
        lblUpperLegFullFlexionAngleRightM2.Text = "";
        lblUpperLegFullFlexionAngleAverageM2.Text = "";
    }
    //check later
    private void MakeHurdleStepsInitialVariableChartValuesHidden()
    {
        lblHurdleStepBetweenI.Text = " ";
        lblHurdleStepIntoI.Text = "";
        lblHurdleStepOffI.Text = "";
        lblHurdleStepVelocityI.Text = "";

        lblStep1HSGroundTimeI.Text = "";
        lblStep1HSAirTimeI.Text = "";

        //lblStep1UlFlexTimeI.Text = "";
        lblStep1HSStrideRateI.Text = "";
        lblStep1HSStrideLengthI.Text = "";
        lblStep1TouchdownDistanceI.Text = "";

        lblStep1KSTouchdownI.Text = "";
        lblStep1TrunkTouchdownAngleI.Text = "";
        lblStep1TrunkTakeoffAngleI.Text = "";
        lblStep1ULFullExtensionI.Text = "";
        lblStep1LLAtTakeoffI.Text = "";

        lblStep1ULFullFlexionI.Text = "";
        lblStep2HSGroundTimeI.Text = "";
        lblStep2HSAirTimeI.Text = "";
        //lblStep2UlFlexTimeI.Text = "";//chk

        lblStep2HSStrideRateI.Text = "";
        lblStep2HSStrideLengthI.Text = "";
        lblStep2TouchdownDistanceI.Text = "";

        lblStep2KSAtTouchdownI.Text = "";
        lblStep2TrunkTouchdownAngleI.Text = "";
        lblStep2TrunkTakeoffAngleI.Text = "";

        lblStep2ULAtFullExtensionI.Text = "";
        lblStep2LLAtTakeoffI.Text = "";

        lblStep2LLAtFullFlexionI.Text = "";
        lblStep2LLAtAngleCrossI.Text = "";
        lblStep2ULAtFullFlexionI.Text = "";

        lblStep3HSGroundTimeI.Text = "";
        lblStep3HSAirTimeI.Text = "";
        //lblStep3UlFlexTimeI.Text = "";//chk
        lblStep3StrideRateI.Text = "";

        lblStep3StrideLengthI.Text = "";
        lblStep3TouchdownDistanceI.Text = "";

        lblStep3KSAtTouchdownI.Text = "";
        lblStep3TrunkTouchdownAngleI.Text = "";
        lblStep3TrunkTakeoffAngleI.Text = "";

        lblStep3ULAtFullExtensionI.Text = "";
        lblStep3LLAtTakeoffI.Text = "";
        lblStep3LLAtFullFlexionI.Text = "";

        lblStep3LLAtAngleCrossI.Text = "";
        lblStep3ULAtFullFlexionI.Text = "";

        lblIntoHurdleTouchdownDistanceI.Text = "";
        lblIntoHurdleKSTouchdownI.Text = "";
        lblIntoHurdleTrunkTouchdownAngleI.Text = "";
        lblIntoHurdleLLTouchdownI.Text = "";

        //model data

        lblHurdleStepBetweenM1.Text = "";
        lblHurdleStepIntoM1.Text = "";
        lblHurdleStepOffM1.Text = "";

        lblHurdleStepVelocityM1.Text = "";
        lblStep1HSGroundTimeM1.Text = "";
        lblStep1HSAirTimeM1.Text = "";
        //lblStep1UlFlexTimeI.Text = "";//chk Step1UlFlexTime

        lblStep1HSStrideRateM1.Text = "";
        lblStep1HSStrideLengthM1.Text = "";
        lblStep1TouchdownDistanceM1.Text = "";

        lblStep1KSTouchdownM1.Text = "";
        lblStep1TrunkTouchdownAngleM1.Text = "";
        lblStep1TrunkTakeoffAngleM1.Text = "";


        lblStep1ULAtFullExtensionM1.Text = "";
        lblStep1LLAtTakeoffM1.Text = "";
        lblStep1ULFullFlexionM1.Text = "";

        lblStep2HSGroundTimeM1.Text = "";
        lblStep2HSAirTimeM1.Text = "";
        //lblStep2UlFlexTimeM1.Text = "";

        lblStep2HSStrideRateM1.Text = "";
        lblStepHS2StrideLengthM1.Text = "";
        lblStep2TouchdownDistanceM1.Text = "";

        lblStep2KSAtTouchdownM1.Text = "";
        lblStep2TrunkTouchdownAngleM1.Text = "";
        lblStep2TrunkTakeoffAngleM1.Text = "";



        lblStep2ULAtFullExtensionM1.Text = "";
        lblStep2LLAtTakeoffM1.Text = "";

        lblStep2LLFullAtFlexionM1.Text = "";
        lblStep2LLAtAngleCrossM1.Text = "";
        lblStep2ULAtFullFlexionM1.Text = "";

        lblStep3HSGroundTimeM1.Text = "";
        lblStep3HSAirTimeM1.Text = "";
        //lblStep3UlFlexTimeM1.Text = "";//chk

        lblStep3StrideRateM1.Text = "";
        lblStep3StrideLengthM1.Text = "";
        lblStep3TouchdownDistanceM1.Text = "";

        lblStep3KSAtTouchdownM1.Text = "";
        lblStep3TrunkTouchdownAngleM1.Text = "";
        lblStep3TrunkTakeoffAngleM1.Text = "";



        lblStep3ULAtFullExtensionM1.Text = "";
        lblStep3LLAtTakeoffM1.Text = "";

        lblStep3LLAtFullFlexionM1.Text = "";
        lblStep3LLAtAngleCrossM1.Text = "";
        lblStep3ULAtFullFlexionM1.Text = "";


        lblIntoHurdleTouchdownDistanceM1.Text = "";
        lblIntoHurdleKSTouchdownM1.Text = "";
        lblIntoHurdleLLTouchdownM1.Text = "";

    }
    private void MakeHurdleStepsFinalVariableChartValuesHidden()
    {
        lblHurdleStepBetweenF.Text = "";
        lblHurdleStepIntoF.Text = "";
        lblHurdleStepOffF.Text = "";


        lblHurdleStepVelocityF.Text = "";
        lblStep1HSGroundTimeF.Text = "";
        lblStep1HSAirTimeF.Text = "";
        //lblStep1UlFlexTimeF.Text = "";


        lblStep1HSStrideRateF.Text = "";
        lblStep1HSStrideLengthF.Text = "";
        lblStep1TouchdownDistanceF.Text = "";

        lblStep1KSTouchdownF.Text = "";
        lblStep1TrunkTouchdownAngleF.Text = "";
        lblStep1TrunkTakeoffAngleF.Text = "";



        lblStep1ULAtFullExtensionF.Text = "";
        lblStep1LLAtTakeoffF.Text = "";
        lblStep1ULFullFlexionF.Text = "";



        lblStep2HSGroundTimeF.Text = "";
        lblStep2HSAirTimeF.Text = "";
        //lblStep2UlFlexTimeF.Text = "";


        lblStep2HSStrideRateF.Text = "";
        lblStep2HSStrideLengthF.Text = "";
        lblStep2TouchdownDistanceF.Text = "";

        lblStep2KSAtTouchdownF.Text = "";
        lblStep2TrunkTouchdownAngleF.Text = "";
        lblStep2TrunkTakeoffAngleF.Text = "";

        lblStep2ULAtFullExtensionF.Text = "";
        lblStep2LLAtTakeoffF.Text = "";


        lblStep2LLAtFullFlexionF.Text = "";
        lblStep2LLAtAngleCrossF.Text = "";
        lblStep2ULAtFullFlexionF.Text = "";

        lblStep3HSGroundTimeF.Text = "";
        lblStep3HSAirTimeF.Text = "";
        //lblStep3UlFlexTimeF.Text = "";

        lblStep3StrideRateF.Text = "";
        lblStep3StrideLengthF.Text = "";
        lblStep3TouchdownDistanceF.Text = "";


        lblStep3KSAtTouchdownF.Text = "";
        lblStep3TrunkTouchdownAngleF.Text = "";
        lblStep3TrunkTakeoffAngleF.Text = "";

        lblStep3ULAtFullExtensionF.Text = "";
        lblStep3LLAtTakeoffF.Text = "";

        lblStep3LLAtFullFlexionF.Text = "";
        lblStep3LLAtAngleCrossF.Text = "";
        lblStep3ULAtFullFlexionF.Text = "";


        lblIntoHurdleTouchdownDistanceF.Text = "";
        lblIntoHurdleKSTouchdownF.Text = "";
        lblIntoHurdleTrunkTouchdownAngleF.Text = "";
        lblIntoHurdleLLTouchdownF.Text = "";






        //model 2  data
        lblHurdleStepBetweenM2.Text = "";
        lblHurdleStepIntoM2.Text = "";
        lblHurdleStepOffM2.Text = "";


        lblHurdleStepVelocityM2.Text = "";
        lblStep1HSGroundTimeM2.Text = "";
        lblStep1HSAirTimeM2.Text = "";
        //lblStep1UlFlexTimeM2.Text = "";


        lblStep1HSStrideRateM2.Text = "";
        lblStep1HSStrideLengthM2.Text = "";
        lblStep1TouchdownDistanceM2.Text = "";

        lblStep1KSTouchdownM2.Text = "";
        lblStep1TrunkTouchdownAngleM2.Text = "";
        lblStep1TrunkTakeoffAngleM2.Text = "";

        lblStep1ULFullExtensionM2.Text = "";
        lblStep1LLAtTakeoffM2.Text = "";
        lblStep1ULFullFlexionM2.Text = "";



        lblStep2HSGroundTimeM2.Text = "";
        lblStep2HSAirTimeM2.Text = "";
        //lblStep2UlFlexTimeM2.Text = "";


        lblStep2HSStrideRateM2.Text = "";
        lblStep2HSStrideLengthM2.Text = "";
        lblStep2TouchdownDistanceM2.Text = "";

        lblStep2KSAtTouchdownM2.Text = "";
        lblStep2TrunkTouchdownAngleM2.Text = "";
        lblStep2TrunkTakeoffAngleM2.Text = "";

        lblStep2ULAtFullExtensionM2.Text = "";
        lblStep2LLAtTakeoffM2.Text = "";


        lblStep2LLAtFullFlexionM2.Text = "";
        lblStep2LLAtAngleCrossM2.Text = "";
        lblStep2ULAtFullFlexionM2.Text = "";

        lblStep3HSGroundTimeM2.Text = "";
        lblStep3HSAirTimeM2.Text = "";
        //lblStep3UlFlexTimeM2.Text = "";

        lblStep3StrideRateM2.Text = "";
        lblStep3StrideLengthM2.Text = "";
        lblStep3TouchdownDistanceM2.Text = "";


        lblStep3KSAtTouchdownM2.Text = "";
        lblStep3TrunkTouchdownAngleM2.Text = "";
        lblStep3TrunkTakeoffAngleM2.Text = "";

        lblStep3ULAtFullExtensionM2.Text = "";
        lblStep3LLAtTakeoffM2.Text = "";

        lblStep3LLAtFullFlexionM2.Text = "";
        lblStep3LLAtAngleCrossM2.Text = "";
        lblStep3ULAtFullFlexionM2.Text = "";


        lblIntoHurdleTouchdownDistanceM2.Text = "";
        lblIntoHurdleKSTouchdownM2.Text = "";
        lblIntoHurdleTrunkTouchdownAngleM2.Text = "";
        lblIntoHurdleLLTouchdownM2.Text = "";
    }

        
    private void MakeStartInitialVariableChartValuesHidden()
    {
        lblSetFrontBlockDistanceI.Text = "";
        lblSetRearBlockDistanceI.Text = "";
        lblSetFrontULAngleI.Text = "";
        lblSetRearULAngleI.Text = "";
        lblSetFrontLLAngleI.Text = "";
        lblSetRearLLAngleI.Text = "";
        lblSetTrunkAngleI.Text = "";
        lblSetCOGDistanceI.Text = "";
        lblBCRearFootClearanceTimeI.Text = "";
        lblBCFrontFootClearanceTimeI.Text = "";
        lblBCRearLLAngleTakeoffI.Text = "";
        lblBCFrontLLAngleTakeoffI.Text = "";
        lblBCTrunkAngleTakeoffI.Text = "";
        lblBCLLAngleACI.Text = "";
        lblBCAirTimeI.Text = "";
        lblBCStrideRateI.Text = "";
        lblBCStrideLengthI.Text = "";
        lblBCVelocityI.Text = "";
        lblStep1COGDistanceI.Text = "";
        lblStep1LLAngleTakeoffI.Text = "";
        lblStep1TrunkAngleTakeoffI.Text = "";
        lblStep1LLAngleACI.Text = "";
        lblStep1GroundTimeI.Text = "";
        lblStep1AirTimeI.Text = "";
        lblStep1StrideRateI.Text = "";
        lblStep1StrideLengthI.Text = "";
        lblStep1VelocityI.Text = "";
        lblStep2COGDistanceI.Text = "";
        lblStep2LLAngleTakeoffI.Text = "";
        lblStep2TrunkAngleTakeoffI.Text = "";
        lblStep2LLAngleACI.Text = "";
        lblStep2GroundTimeI.Text = "";
        lblStep2AirTimeI.Text = "";
        lblStep2StrideRateI.Text = "";
        lblStep2StrideLengthI.Text = "";
        lblStep2VelocityI.Text = "";
        lblStep3COGDistanceI.Text = "";
        lblTimeTo3mI.Text = "";
        lblTimeTo5mI.Text = "";

        lblSetFrontBlockDistanceM1.Text = "";
        lblSetRearBlockDistanceM1.Text = "";
        lblSetFrontULAngleM1.Text = "";
        lblSetRearULAngleM1.Text = "";
        lblSetFrontLLAngleM1.Text = "";
        lblSetRearLLAngleM1.Text = "";
        lblSetTrunkAngleM1.Text = "";
        lblSetCOGDistanceM1.Text = "";
        lblBCRearFootClearanceTimeM1.Text = "";
        lblBCFrontFootClearanceTimeM1.Text = "";
        lblBCRearLLAngleTakeoffM1.Text = "";
        lblBCFrontLLAngleTakeoffM1.Text = "";
        lblBCTrunkAngleTakeoffM1.Text = "";
        lblBCLLAngleACM1.Text = "";
        lblBCAirTimeM1.Text = "";
        lblBCStrideRateM1.Text = "";
        lblBCStrideLengthM1.Text = "";
        lblBCVelocityM1.Text = "";
        lblStep1COGDistanceM1.Text = "";
        lblStep1LLAngleTakeoffM1.Text = "";
        lblStep1TrunkAngleTakeoffM1.Text = "";
        lblStep1LLAngleACM1.Text = "";
        lblStep1GroundTimeM1.Text = "";
        lblStep1AirTimeM1.Text = "";
        lblStep1StrideRateM1.Text = "";
        lblStep1StrideLengthM1.Text = "";
        lblStep1VelocityM1.Text = "";
        lblStep2COGDistanceM1.Text = "";
        lblStep2LLAngleTakeoffM1.Text = "";
        lblStep2TrunkAngleTakeoffM1.Text = "";
        lblStep2LLAngleACM1.Text = "";
        lblStep2GroundTimeM1.Text = "";
        lblStep2AirTimeM1.Text = "";
        lblStep2StrideRateM1.Text = "";
        lblStep2StrideLengthM1.Text = "";
        lblStep2VelocityM1.Text = "";
        lblStep3COGDistanceM1.Text = "";
        lblTimeTo3mM1.Text = "";
        lblTimeTo5mM1.Text = "";
    }
    private void MakeStartFinalVariableChartValuesHidden()
    {
        lblSetFrontBlockDistanceF.Text = "";
        lblSetRearBlockDistanceF.Text = "";
        lblSetFrontULAngleF.Text = "";
        lblSetRearULAngleF.Text = "";
        lblSetFrontLLAngleF.Text = "";
        lblSetRearLLAngleF.Text = "";
        lblSetTrunkAngleF.Text = "";
        lblSetCOGDistanceF.Text = "";
        lblBCRearFootClearanceTimeF.Text = "";
        lblBCFrontFootClearanceTimeF.Text = "";
        lblBCRearLLAngleTakeoffF.Text = "";
        lblBCFrontLLAngleTakeoffF.Text = "";
        lblBCTrunkAngleTakeoffF.Text = "";
        lblBCLLAngleACF.Text = "";
        lblBCAirTimeF.Text = "";
        lblBCStrideRateF.Text = "";
        lblBCStrideLengthF.Text = "";
        lblBCVelocityF.Text = "";
        lblStep1COGDistanceF.Text = "";
        lblStep1LLAngleTakeoffF.Text = "";
        lblStep1TrunkAngleTakeoffF.Text = "";
        lblStep1LLAngleACF.Text = "";
        lblStep1GroundTimeF.Text = "";
        lblStep1AirTimeF.Text = "";
        lblStep1StrideRateF.Text = "";
        lblStep1StrideLengthF.Text = "";
        lblStep1VelocityF.Text = "";
        lblStep2COGDistanceF.Text = "";
        lblStep2LLAngleTakeoffF.Text = "";
        lblStep2TrunkAngleTakeoffF.Text = "";
        lblStep2LLAngleACF.Text = "";
        lblStep2GroundTimeF.Text = "";
        lblStep2AirTimeF.Text = "";
        lblStep2StrideRateF.Text = "";
        lblStep2StrideLengthF.Text = "";
        lblStep2VelocityF.Text = "";
        lblStep3COGDistanceF.Text = "";
        lblTimeTo3mF.Text = "";
        lblTimeTo5mF.Text = "";

        lblSetFrontBlockDistanceM2.Text = "";
        lblSetRearBlockDistanceM2.Text = "";
        lblSetFrontULAngleM2.Text = "";
        lblSetRearULAngleM2.Text = "";
        lblSetFrontLLAngleM2.Text = "";
        lblSetRearLLAngleM2.Text = "";
        lblSetTrunkAngleM2.Text = "";
        lblSetCOGDistanceM2.Text = "";
        lblBCRearFootClearanceTimeM2.Text = "";
        lblBCFrontFootClearanceTimeM2.Text = "";
        lblBCRearLLAngleTakeoffM2.Text = "";
        lblBCFrontLLAngleTakeoffM2.Text = "";
        lblBCTrunkAngleTakeoffM2.Text = "";
        lblBCLLAngleACM2.Text = "";
        lblBCAirTimeM2.Text = "";
        lblBCStrideRateM2.Text = "";
        lblBCStrideLengthM2.Text = "";
        lblBCVelocityM2.Text = "";
        lblStep1COGDistanceM2.Text = "";
        lblStep1LLAngleTakeoffM2.Text = "";
        lblStep1TrunkAngleTakeoffM2.Text = "";
        lblStep1LLAngleACM2.Text = "";
        lblStep1GroundTimeM2.Text = "";
        lblStep1AirTimeM2.Text = "";
        lblStep1StrideRateM2.Text = "";
        lblStep1StrideLengthM2.Text = "";
        lblStep1VelocityM2.Text = "";
        lblStep2COGDistanceM2.Text = "";
        lblStep2LLAngleTakeoffM2.Text = "";
        lblStep2TrunkAngleTakeoffM2.Text = "";
        lblStep2LLAngleACM2.Text = "";
        lblStep2GroundTimeM2.Text = "";
        lblStep2AirTimeM2.Text = "";
        lblStep2StrideRateM2.Text = "";
        lblStep2StrideLengthM2.Text = "";
        lblStep2VelocityM2.Text = "";
        lblStep3COGDistanceM2.Text = "";
        lblTimeTo3mM2.Text = "";
        lblTimeTo5mM2.Text = "";
    }
    private void MakeHurdleInitialVariableChartValuesHidden()
    {
        lblGroundTimeIntoI.Text = "";
        lblGroundTimeOffI.Text = "";
        lblAirTimeI.Text = "";
        lblStrideLengthIntoI.Text = "";
        lblStrideLengthOffI.Text = "";
        lblStrideLengthTotalI.Text = "";
        lblVelocityI.Text = "";
        lblTouchdownDistanceIntoI.Text = "";
        lblTouchdownDistanceOffI.Text = "";
        lblUpperLegAngleatTouchdownIntoI.Text = "";
        lblUpperLegAngleatTakeoffIntoI.Text = "";
        lblUpperLegAngleatTouchdownOffI.Text = "";
        lblUpperLegAngleatTakeoffOffI.Text = "";
        lblLeadLowerLegMinimumAngleIntoI.Text = "";
        lblLeadLowerLegAngleatAnkleCrossIntoI.Text = "";
        lblLowerLegAngleatTouchdownOffI.Text = "";
        lblLowerLegAngleatTakeoffOffI.Text = "";

        lblGroundTimeIntoM1.Text = "";
        lblGroundTimeOffM1.Text = "";
        lblAirTimeM1.Text = "";
        lblStrideLengthIntoM1.Text = "";
        lblStrideLengthOffM1.Text = "";
        lblStrideLengthTotalM1.Text = "";
        lblVelocityHurdleM1.Text = "";
        lblTouchdownDistanceIntoM1.Text = "";
        lblTouchdownDistanceOffM1.Text = "";
        lblUpperLegAngleatTouchdownIntoM1.Text = "";
        lblUpperLegAngleatTakeoffIntoM1.Text = "";
        lblUpperLegAngleatTouchdownOffM1.Text = "";
        lblUpperLegAngleatTakeoffOffM1.Text = "";
        lblLeadLowerLegMinimumAngleIntoM1.Text = "";
        lblLeadLowerLegAngleatAnkleCrossIntoM1.Text = "";
        lblLowerLegAngleatTouchdownOffM1.Text = "";
        lblLowerLegAngleatTakeoffOffM1.Text = "";

    }
    private void MakeHurdleFinalVariableChartValuesHidden()
    {
        lblGroundTimeIntoF.Text = "";
        lblGroundTimeOffF.Text = "";
        lblAirTimeF.Text = "";
        lblStrideLengthIntoF.Text = "";
        lblStrideLengthOffF.Text = "";
        lblStrideLengthTotalF.Text = "";
        lblVelocityHurdleF.Text = "";
        lblTouchdownDistanceIntoF.Text = "";
        lblTouchdownDistanceOffF.Text = "";
        lblUpperLegAngleatTouchdownIntoF.Text = "";
        lblUpperLegAngleatTakeoffIntoF.Text = "";
        lblUpperLegAngleatTouchdownOffF.Text = "";
        lblUpperLegAngleatTakeoffOffF.Text = "";
        lblLeadLowerLegMinimumAngleIntoF.Text = "";
        lblLeadLowerLegAngleatAnkleCrossIntoF.Text = "";
        lblLowerLegAngleatTouchdownOffF.Text = "";
        lblLowerLegAngleatTakeoffOffF.Text = "";

        lblGroundTimeIntoM2.Text = "";
        lblGroundTimeOffM2.Text = "";
        lblAirTimeM2.Text = "";
        lblStrideLengthIntoM2.Text = "";
        lblStrideLengthOffM2.Text = "";
        lblStrideLengthTotalM2.Text = "";
        lblVelocityHurdleM2.Text = "";
        lblTouchdownDistanceIntoM2.Text = "";
        lblTouchdownDistanceOffM2.Text = "";
        lblUpperLegAngleatTouchdownIntoM2.Text = "";
        lblUpperLegAngleatTakeoffIntoM2.Text = "";
        lblUpperLegAngleatTouchdownOffM2.Text = "";
        lblUpperLegAngleatTakeoffOffM2.Text = "";
        lblLeadLowerLegMinimumAngleIntoM2.Text = "";
        lblLeadLowerLegAngleatAnkleCrossIntoM2.Text = "";
        lblLowerLegAngleatTouchdownOffM2.Text = "";
        lblLowerLegAngleatTakeoffOffM2.Text = "";

    }

    #region[ShowSummary]
    private void ShowSummary()
    {
        fillerleft.Style.Add("display", "block");
        fillercenter.Style.Add("display", "block");
        fillerright.Style.Add("display", "block");
        teachersummaryleft.Style.Add("display", "block");
        teachersummarycenter.Style.Add("display", "block");
        teachersummaryright.Style.Add("display", "block");
        SumDivCenterPanel.Style.Add("display", "block");
        SumDivLeftPanel.Style.Add("display", "block");
       // SummaryVideo.Style.Add("display", "block");
        SummaryButtons.Style.Add("display", "block");
        SummaryDropDown.Style.Add("display", "block");
        SumDivRightPanel.Style.Add("display", "block");
        bottomleft.Style.Add("display", "block");

        contplay.Attributes["style"] = String.Format("font-family:Arial,Helvetica sans-serif;font-size:12px;color:#000000;text-decoration:none;position:absolute;height:1181px;width:930px;");
        fillerleft.Visible = true;
        fillercenter.Visible = true;
        fillerright.Visible = true;
        teachersummaryleft.Visible = true;
        teachersummarycenter.Visible = true;
        teachersummaryright.Visible = true;
        SumDivLeftPanel.Visible = true;
        SumDivCenterPanel.Visible = true;
        //SummaryVideo.Visible = true;
        SummaryButtons.Visible = true;
        SummaryDropDown.Visible = true;
        SumDivRightPanel.Visible = true;
        objdivsum.Visible = false;
        bottomleft.Attributes["style"] = String.Format("font-family:Arial,Helvetica,sans-serif;font-size:12px;text-decoration:none;position:absolute;height:31px;width:23px;left:0px;top:1150px;");
        bottomcenter.Attributes["style"] = String.Format("font-family:Arial,Helvetica,sans-serif;font-size:12px;text-decoration:none;position:absolute;height:31px;width:879px;left:24px;top:1150px;");
        bottomright.Attributes["style"] = String.Format("font-family:Arial,Helvetica,sans-serif;font-size:12px;text-decoration:none;position:absolute;height:31px;width:23px;left:897px;top:1150px;");
    }
    #endregion[ShowSummary]

    #region[Checking for athlete having summary videos]
    private int CheckSummaryAvailable()
    {
        int counterSummary = 0;
        TList<Lesson> lessons = new TList<Lesson>();
        lessons = DataRepository.LessonProvider.GetByCustomerId(customer.CustomerId);
        lessons.Sort("LessonDate DESC");
        SummaryMovie sm;
        TList<SummaryMovie> summarymovies = new TList<SummaryMovie>();
        foreach (Lesson l in lessons)
        {
            if (DropDownList2.SelectedItem.Text.Equals("Sprint"))
            {
                if (l.LessonTypeId == 2)
                {
                    try
                    {
                        sm = DataRepository.SummaryMovieProvider.GetByLessonId(l.LessonId)[0];
                        summarymovies.Add(sm);
                        counterSummary++;
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }

            if (DropDownList2.SelectedItem.Text.Equals("Start"))
            {
                if (l.LessonTypeId == 1)
                {
                    try
                    {
                        sm = DataRepository.SummaryMovieProvider.GetByLessonId(l.LessonId)[0];
                        // if (!sm.DateRecorded.Equals(summarymovie.DateRecorded))
                        summarymovies.Add(sm);
                        counterSummary++;
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
            else
            {
                if (l.LessonTypeId == 3)
                {
                    try
                    {
                        sm = DataRepository.SummaryMovieProvider.GetByLessonId(l.LessonId)[0];
                        summarymovies.Add(sm);
                        counterSummary++;
                    }
                    catch (Exception ex)
                    {
                    }
                }
            }
        }
        return counterSummary;
    }
    #endregion[Checking for athlete having summary videos]
}